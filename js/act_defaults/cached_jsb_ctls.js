anonymousFunc = function () {
    window.cachedFileNames["jsb_ctls"] = "jsb_ctls"
    if (!window.cached_jsb_ctls) window.cached_jsb_ctls = {}
    var z = "* ============================= CTLS =============================\xFE";
    z += "\xFE";
    z += "Subroutine ctl_autoTextBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim W As String\xFE";
    z += "    Dim MOBILEPAD As String\xFE";
    z += "    Dim DFTVAL As StRiNg\xFE";
    z += "    Dim VALUES As StRiNg\xFE";
    z += "    Dim DEFAULTVALUE As String\xFE";
    z += "\xFE";
    z += "   if Column.canedit Then\xFE";
    z += "        If doKOBinding Then \xFE";
    z += "            AdditionalAttributes = @AddParsley(Column, AdditionalAttributes)\xFE";
    z += "            \xFE";
    z += "            If Column.includeurl And Column.arrayname Then \xFE";
    z += "                W = Column.arrayname\xFE";
    z += "            ElseIf Column.reffile Then\xFE";
    z += "                W = jsEscapeString(@jsb_mdl.mdlGetRefValues(ProjectName, Column, Row))\xFE";
    z += "            Else\xFE";
    z += "                W = jsEscapeString(Column.reflist)\xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, \"value\", false, \"window.autoCompleteTextBox($element, `:w:`, `:Val(column.minLength):`, null, `:Val(Column.restrict2List):`)\", \"\")\xFE";
    z += "            /*\xFE";
    z += "            AdditionalAttributes[-1] = `data-bind=\"value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`',\xFE";
    z += "               valueUpdate:'blur', \xFE";
    z += "               css: { onKOload2:  window.autoCompleteTextBox($element, `:w:`, `:Val(column.minLength):`, null, `:Val(Column.restrict2List):`) }\xFE";
    z += "               \"` \xFE";
    z += "            */\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "            ID = ''\xFE";
    z += "        end If\xFE";
    z += "\xFE";
    z += "        MobilePad = Column.mobilepad\xFE";
    z += "        if Mobilepad then\xFE";
    z += "            if MobilePad = 'custom' then\xFE";
    z += "                MobilePad = Column.custompad\xFE";
    z += "                if left(MobilePad, 2) <> \"[[\" or Right(MobilePad, 2) <> \"]]\" then Print \"Your \":viewName:\" \":id:\" field has has a malformed custom pad: \": MobilePad\xFE";
    z += "            else\xFE";
    z += "                if Column.datatype = \"integer\" Then\xFE";
    z += "                    locate MobilePad in ['integer', 'integer+', ''] else Print \"Your \":viewName:\" \":id:\" field has an integer datatype and your are using a non-integer keyboard: \": MobilePad\xFE";
    z += "                    AdditionalAttributes = @MergeAttribute(\"type\", `number`, \";\", AdditionalAttributes)\xFE";
    z += "                elseif Column.datatype = \"double\" Then\xFE";
    z += "                    locate MobilePad in ['real', 'integer', 'integer+', ''] else Print \"Your \":viewName:\" \":id:\" field has an double datatype and your are using a non-integer keyboard: \": MobilePad\xFE";
    z += "                end if\xFE";
    z += "            end if\xFE";
    z += "            \xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"mobilepad\", Mobilepad, \";\", AdditionalAttributes)\xFE";
    z += "        end if\xFE";
    z += "        \xFE";
    z += "        if genCode Then\xFE";
    z += "            if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            \xFE";
    z += "            If Column.includeurl And Column.arrayname Then\xFE";
    z += "                HTML = `ctlHtml = @jsb_html.AutoTextBoxIncludeURL(\"`:ID:`\", \"`:Column.includeurl:`\", \"`:Column.arrayname:`\", `:dftVal:`, `:Val(column.minLength):`, `:AdditionalAttributes:`, `:Not(Column.noSubValues):`, `:Val(Column.restrict2List):`)` ;* 9 Parameters\xFE";
    z += "            ElseIf Column.reffile Then\xFE";
    z += "                HTML = ` ctlHtml = @jsb_html.autoTextBox(\"`:ID:`\", @jsb_bf.getRefValuesBySelect(\"`:Column.reffile:`\", \"`:Column.refpk:`\", \"`:Column.refdisplay:`\", \"`:Column.refwhere:`\", `:(Column.align = \"right\"):`, `:Val(Column.oktocache):`), `:dftVal:`, `:Val(column.minLength):`, `:AdditionalAttributes:`, `:Not(Column.noSubValues):`, `:Val(Column.restrict2List):`)` ;* 8 Parameters    \xFE";
    z += "            Else\xFE";
    z += "                HTML = ` ctlHtml = @jsb_html.autoTextBox(\"`:ID:`\", `:jsEscapeString(Column.reflist):`, `:dftVal:`, `:Val(column.minLength):`, `:AdditionalAttributes:`, `:Not(Column.noSubValues):`, `:Val(Column.restrict2List):`)`\xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script(`:Chr(96):`$('#`:ID:`').change(function() { doJsbSubmit() });`:Chr(96):`)`\xFE";
    z += "        else\xFE";
    z += "            Values = @jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewName) \xFE";
    z += "        \xFE";
    z += "            If Column.includeurl And Column.arrayname Then\xFE";
    z += "                Html = @jsb_html.AutoTextBoxIncludeURL(ID, Column.includeurl, Column.arrayname, DefaultValue, Val(column.minLength), AdditionalAttributes, Not(Column.noSubValues), column.restrict2List) \xFE";
    z += "\xFE";
    z += "            Else\xFE";
    z += "                Html = @jsb_html.autoTextBox(ID, VALUES, DefaultValue, Val(column.minLength), AdditionalAttributes, Not(Column.noSubValues), column.restrict2List) \xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            If Column.autopostback And ID Then HTML := @Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        end if\xFE";
    z += "\xFE";
    z += "    End Else\xFE";
    z += "        * Prevents change\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "* ============================= CTLS =============================\xFE";
    z += "Subroutine autoTextBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    viewModel.columns.push ({name:'includeurl', label:'JS Include Url', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "    // viewModel.columns.push ({name:'valuefield', label:'Value FieldName', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "    viewModel.columns.push ({name:'arrayname', label:'JS Array Name', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "    viewModel.columns.push ({name:'minLength', label:'minLength 4 Popup', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "    viewModel.columns.push ({name:'restrict2List', label:'restrict2List', width:19, control:'checkbox', canedit:true, defaultvalue: 1,  reflist: \"false,0;true,1\" })\xFE";
    z += "    \xFE";
    z += "    call TextBox_ExtraMeta(Row, viewModel)\xFE";
    z += "    \xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_autotextbox"] = z;
    var z = "* Used mostly for MENUS\xFE";
    z += "Subroutine ctl_Button(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim LABEL As String\xFE";
    z += "    Dim URL As String\xFE";
    z += "    Dim ONCLICK As String\xFE";
    z += "    Dim ZURL As String\xFE";
    z += "    Dim ADD As String\xFE";
    z += "    Dim DATA As String\xFE";
    z += "    Dim ONPARENTJAVASCRIPT As String\xFE";
    z += "\xFE";
    z += "    If doKOBinding Then \xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    end if\xFE";
    z += "    \xFE";
    z += "    Label = Column.label\xFE";
    z += "    If Label = \"\" Then Label = Column.name\xFE";
    z += "    Url = @DropIfRight(Column.transferurl, \".page\")\xFE";
    z += "    \xFE";
    z += "    if Column.height then AdditionalAttributes = @MergeAttribute(\"style\", `height:\"`:Column.height:`\"`, \";\", AdditionalAttributes)\xFE";
    z += "    OnClick = `window.eventHandler_`:@NiceName(Column.name):`(json2string($(\"#jsb\")), \"??ItemID??\")`\xFE";
    z += "    AdditionalAttributes = @MergeAttribute(\"onclick\", OnClick, \";\", AdditionalAttributes)\xFE";
    z += "\xFE";
    z += "    If doKOBinding Then \xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    if genCode Then\xFE";
    z += "        AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\"\xFE";
    z += "        Label = `\"`:Label:`\"`\xFE";
    z += "        zUrl = `\"`:Url:`\"`\xFE";
    z += "        \xFE";
    z += "        If Row Then\xFE";
    z += "            Select Case Column.datausuage\xFE";
    z += "                case \"As Url\":\xFE";
    z += "                    zUrl = Row\xFE";
    z += "    \xFE";
    z += "                case \"As Parameter\":\xFE";
    z += "                    If InStr(Url, \"?\") Then Add = \"&\" ELse Add = \"?\"\xFE";
    z += "                    zUrl = `\"`:Url:Add:Column.onParentExtra:`=\":@UrlEncode(`:Row:`)`\xFE";
    z += "    \xFE";
    z += "                case \"As Text\":\xFE";
    z += "                    Label = Row\xFE";
    z += "            End Select\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        HTML = `ctlHtml = @jsb_html.Button(\"`:ID:`\", `:Label:`, `:AdditionalAttributes:`)`\xFE";
    z += "        Html := CRLF():`ctlHtml := @genEventHandler(\"`:@NiceName(Column.name):`\", `:zUrl:`, `:Column.transferto + 0:`, \"`:Column.onParentExtra:`\", `:Column.transferaddfrompage + 0:`)`\xFE";
    z += "    else\xFE";
    z += "        If Row Then\xFE";
    z += "            Data = Row[Column.name]\xFE";
    z += "            Select Case Column.datausuage\xFE";
    z += "                case \"As Url\":\xFE";
    z += "                    Url = Data\xFE";
    z += "    \xFE";
    z += "                case \"As Parameter\":\xFE";
    z += "                    If InStr(Url, \"?\") Then Add = \"&\" ELse Add = \"?\"\xFE";
    z += "                    Url = Url:Add:Column.onParentExtra:\"=\":@UrlEncode(Data)\xFE";
    z += "    \xFE";
    z += "                case \"As Text\":\xFE";
    z += "                    Label = Data\xFE";
    z += "            End Select\xFE";
    z += "        End If\xFE";
    z += "        onParentJavaScript = @genEventHandler(@NiceName(Column.name), Url, Column.transferto + 0, Column.onParentExtra, Column.transferaddfrompage + 0)\xFE";
    z += "        Html = @jsb_html.Button(ID, Label, AdditionalAttributes):onParentJavaScript\xFE";
    z += "    end if\xFE";
    z += "\xFE";
    z += "    return \xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine Button_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    viewModel.columns.push({name:'datausuage', label:'data Usuage', width:19, control:'dropdownbox', canedit:true, reflist: \"As Url;As Parameter;As Text\" })\xFE";
    z += "    viewModel.columns.push({name:'transferto', index:46, label:'Transfer To', datatype: 'number', suppresslabel: false, control:'dropdownbox', canedit:true, notblank: true, defaultvalue:\"10\", reflist: \"new window,1;New Window Tab,2;Tab (name in Transfer Xtra),3;Frame (name in Transfer Xtra),4;Dialog (Title in Transfer Xtra),6;HTTP POST (Transfer Extra becomes formVar Name and contains SelectedID),7;HTTP GET,8;Current Window,10;JavaScript (in Transfer Extra),11;Top Window,12;Back,13;Next Tab,14;Previous Tab,15;Close Window,16;Return Pick Value,17\"})\xFE";
    z += "    viewModel.columns.push({name:'transferurl', index:47, label:'Transfer URL', datatype: 'string', suppresslabel: false, control:'combobox', canedit:true, defaultvalue:\"\",  reffile:\"dict {projectname}\", refpk:\"ItemID\", refwhere:\"ItemID Like '%.page'\", pickfunction: 'edp_pick?projectName={projectname}' })\xFE";
    z += "    viewModel.columns.push({name:'onParentExtra', index:48, label:'Transfer Extra', datatype: 'string', suppresslabel: false, control:'textbox', canedit:true, defaultvalue:\"\"})\xFE";
    z += "    viewModel.columns.push({name:'transferaddfrompage', index:48, label:'add fromPage', suppresslabel: false, control:'checkbox', canedit:true, defaultvalue:1})\xFE";
    z += "    viewModel.columns.push({name:'customcall', index:48, datatype: 'string', label:'Custom Routine', suppresslabel: false, control:'textbox', canedit:true})\xFE";
    z += "    \xFE";
    z += "    viewModel.columns.push({name:'lblInfo', label:'Info', control:'label', suppresslabel: true, fullline: true, defaultvalue:'For more button options, use toolbar buttons and make them inline' })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_button"] = z;
    var z = "* ============================= CTLS =============================\xFE";
    z += "Subroutine ctl_cascadingAutoTextBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "*\xFE";
    z += "* See if there is a reffile, and make a json array, or json callback\xFE";
    z += "*\xFE";
    z += "    Dim Values As StRiNg\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "    Dim QuotedUrl As String\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "\xFE";
    z += "    Values = @jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "    if !genCode And !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name,  viewName)\xFE";
    z += "    \xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        *   Column.parentCtlID, QuotedUrl, addBlank\xFE";
    z += "        QuotedUrl = Column.customRoutine\xFE";
    z += "        if QuotedUrl Then\xFE";
    z += "            if instr(viewName, am()) Then\xFE";
    z += "                attachedDB = field(viewName, am(), 1)\xFE";
    z += "                tableName = field(viewName, am(), 2)\xFE";
    z += "            else\xFE";
    z += "                ReadJson objectModel From @fHandle(\"dict\", ProjectName), viewName Else\xFE";
    z += "                    debug\xFE";
    z += "                End If\xFE";
    z += "                attachedDB = objectModel.attachdb\xFE";
    z += "                tableName = objectModel.tableName\xFE";
    z += "            end if\xFE";
    z += "            \xFE";
    z += "            If InStr(QuotedUrl, \"?\") Then QuotedUrl := \"&\" Else QuotedUrl := \"?\"\xFE";
    z += "            QuotedUrl := \"arg={id}\"\xFE";
    z += "            if !InStrI(QuotedUrl, \"tablename=\") Then QuotedUrl := \"&tableName={tablename}\"\xFE";
    z += "            if !InStrI(QuotedUrl, \"databasename=\") Then QuotedUrl := \"&databaseName={databasename}\"\xFE";
    z += "            QuotedUrl = ReplaceI(QuotedUrl, \"{tablename}\", urlEncode(tableName))\xFE";
    z += "            QuotedUrl = ReplaceI(QuotedUrl, \"{databasename}\", urlEncode(attachedDB))\xFE";
    z += "        End if\xFE";
    z += "        QuotedUrl = `'`:QuotedUrl:`'`\xFE";
    z += "\xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "            AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, \"value\", false, ID:`_`:Column.parentCtlID:`_check`, \"\", false)\xFE";
    z += "            koID = ID\xFE";
    z += "            ID = ''\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        if genCode Then\xFE";
    z += "            if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            \xFE";
    z += "            Html = `ctlHtml = @jsb_html.cascadingAutoTextBox(\"`:ID:`\", \"`:Column.parentCtlID:`\", \"`:QuotedUrl:`\", `:dftVal:`, `:(column.minLength + 0):`, `:AdditionalAttributes:`)`\xFE";
    z += "            If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "        Else\xFE";
    z += "            Html = @jsb_html.cascadingAutoTextBox(ID, Column.parentCtlID, QuotedUrl, DefaultValue, column.minLength, AdditionalAttributes)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            // Create a Change routine which will be called on parent changes\xFE";
    z += "            jsRoutine = `autoCompleteTextBox(childCtl, a /* choiceArray */, `:column.minLength+0:`, null /* CompanionID */, `:column.restrictToList+0:`, '' /* labelName */, '' /* valueName */);`\xFE";
    z += "            Html = Html:@reloadDataListFromUrl_OnParent_Change(koID, Column.parentCtlID, QuotedUrl, jsRoutine)\xFE";
    z += "\xFE";
    z += "            // Create a Check routine to setup on KO Load\xFE";
    z += "            Html := @Script(cascadingAttach2Parent(koID, Column.parentCtlID, True /* doKOBinding */))\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "    End Else\xFE";
    z += "        * Prevents change\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "* ============================= CTLS =============================\xFE";
    z += "Subroutine cascadingAutoTextBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "\xFE";
    z += "    viewModel.columns.push ({name:'lblRequired', label:'Required', control:'label', suppresslabel: true, fullline: true, defaultvalue:'The following fields are required' })\xFE";
    z += "    viewModel.columns.push ({name:'parentCtlID', label:'Parent Control', control:'dropDownBox', canedit:true, required: true, notblank: true, defaultvalue:'', reffile: \"{viewcolumns}\" })\xFE";
    z += "    \xFE";
    z += "    viewModel.columns.push ({name:'customRoutine', label:'CustomRoutine', control:'textbox', canedit:true, required: true, notblank: true, tooltip: \"Place a json function here, or an http call with ?arg={id} for parent argument\"  })\xFE";
    z += "    viewModel.columns.push ({name:'minLength', label:'minLength 4 Popup', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_cascadingautotextbox"] = z;
    var z = "* ============================= CTLS =============================\xFE";
    z += "Subroutine ctl_cascadingComboBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim Values As StRiNg\xFE";
    z += "    Dim DefaultValue As StRiNg\xFE";
    z += "    Dim QuotedUrl As String\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "\xFE";
    z += "    Values = @jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "    if !genCode And !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewName)\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        QuotedUrl = Column.customRoutine\xFE";
    z += "        if QuotedUrl Then\xFE";
    z += "            if instr(viewName, am()) Then\xFE";
    z += "                attachedDB = field(viewName, am(), 1)\xFE";
    z += "                tableName = field(viewName, am(), 2)\xFE";
    z += "            else\xFE";
    z += "                ReadJson objectModel From @fHandle(\"dict\", ProjectName), viewName Else\xFE";
    z += "                    debug\xFE";
    z += "                End If\xFE";
    z += "                attachedDB = objectModel.attachdb\xFE";
    z += "                tableName = objectModel.tableName\xFE";
    z += "            end if\xFE";
    z += "            \xFE";
    z += "            If InStr(QuotedUrl, \"?\") Then QuotedUrl := \"&\" Else QuotedUrl := \"?\"\xFE";
    z += "            QuotedUrl := \"arg={id}\"\xFE";
    z += "            if !InStrI(QuotedUrl, \"tablename=\") Then QuotedUrl := \"&tableName={tablename}\"\xFE";
    z += "            if !InStrI(QuotedUrl, \"databasename=\") Then QuotedUrl := \"&databaseName={databasename}\"\xFE";
    z += "            QuotedUrl = ReplaceI(QuotedUrl, \"{tablename}\", urlEncode(tableName))\xFE";
    z += "            QuotedUrl = ReplaceI(QuotedUrl, \"{databasename}\", urlEncode(attachedDB))\xFE";
    z += "        End If\xFE";
    z += "        QuotedUrl = `'`:QuotedUrl:`'`\xFE";
    z += "\xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "            AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, \"value\", true, ID:`_`:Column.parentCtlID:`_check`, \"\", false)\xFE";
    z += "            koID = ID\xFE";
    z += "            ID = ''\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        if genCode Then\xFE";
    z += "            if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            \xFE";
    z += "            Html = `ctlHtml = @jsb_html.cascadingComboBox(\"`:ID:`\", \"`:Column.parentCtlID:`\", \"`:QuotedUrl:`\", `:dftVal:` /* default val */, `:(Column.addBlank+0):` /* add blank */, \"`:Column.descriptionField:`\", \"`:Column.valueField:`\", `:AdditionalAttributes:`)`\xFE";
    z += "            If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "        Else\xFE";
    z += "            Html = @jsb_html.cascadingComboBox(ID, Column.parentCtlID, QuotedUrl, DefaultValue, Column.addBlank, Column.descriptionField, Column.valueField, AdditionalAttributes)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            // Create a Change routine which will be called on parent changes\xFE";
    z += "            jsRoutine = `loadOptions(childCtl, a /* choiceArray */, \"`:Column.valueField:`\" /* valueField */, \"`:Column.descriptionField:`\" /* descriptionField */, `:Column.addBlank+0:` /* add Blank */, null /* defaultValue */, \"\" /* subdel */, !firstLoad);`\xFE";
    z += "            Html = Html:@reloadDataListFromUrl_OnParent_Change(koID, Column.parentCtlID, QuotedUrl, jsRoutine)\xFE";
    z += "\xFE";
    z += "            // Create a Check routine to setup on KO Load\xFE";
    z += "            Html := @Script(cascadingAttach2Parent(koID, Column.parentCtlID, doKOBinding))\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "    End Else\xFE";
    z += "        * Prevents change\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "* ============================= CTLS =============================\xFE";
    z += "Subroutine cascadingComboBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "\xFE";
    z += "    viewModel.columns.push ({name:'autopostback', label:'Auto PostBack', control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "    \xFE";
    z += "    //*******************************************************************************************************************************************\xFE";
    z += "    viewModel.columns.push ({name:'lblRequired', label:'Required', control:'label', suppresslabel: true, fullline: true, defaultvalue:'The following fields are required' })\xFE";
    z += "    //*******************************************************************************************************************************************\xFE";
    z += "    \xFE";
    z += "    viewModel.columns.push ({name:'parentCtlID', label:'Parent Control', control:'dropDownBox', canedit:true, required: true, notblank: true, defaultvalue:'', reffile: \"{viewcolumns}\" })\xFE";
    z += "    \xFE";
    z += "    viewModel.columns.push ({name:'customRoutine', label:'CustomRoutine', control:'textbox', canedit:true, required: true, notblank: true, tooltip: \"Place a json function here, or an http call with ?arg={id} for parent argument\"  })\xFE";
    z += "    viewModel.columns.push ({name:'descriptionField', label:'descriptionField', control:'textbox', canedit:true, tooltip: \"Place a json field name here\"  })\xFE";
    z += "    viewModel.columns.push ({name:'valueField', label:'valueField', control:'textbox', canedit:true, tooltip: \"Place a json field name here\"  })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_cascadingcombobox"] = z;
    var z = "* ============================= CTLS =============================\xFE";
    z += "Subroutine ctl_cascadingDropDownBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim Values As StRiNg\xFE";
    z += "    Dim DefaultValue As StRiNg\xFE";
    z += "    Dim QuotedUrl As String\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "\xFE";
    z += "    Values = @jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "    if !genCode And !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        QuotedUrl = Column.customRoutine\xFE";
    z += "        if QuotedUrl Then\xFE";
    z += "            if instr(viewName, am()) Then\xFE";
    z += "                attachedDB = field(viewName, am(), 1)\xFE";
    z += "                tableName = field(viewName, am(), 2)\xFE";
    z += "            else\xFE";
    z += "                ReadJson objectModel From @fHandle(\"dict\", ProjectName), viewName Else\xFE";
    z += "                    debug\xFE";
    z += "                End If\xFE";
    z += "                attachedDB = objectModel.attachdb\xFE";
    z += "                tableName = objectModel.tableName\xFE";
    z += "            end if\xFE";
    z += "            \xFE";
    z += "            If InStr(QuotedUrl, \"?\") Then QuotedUrl := \"&\" Else QuotedUrl := \"?\"\xFE";
    z += "            QuotedUrl := \"arg={id}\"\xFE";
    z += "            if !InStrI(QuotedUrl, \"tablename=\") Then QuotedUrl := \"&tableName={tablename}\"\xFE";
    z += "            if !InStrI(QuotedUrl, \"databasename=\") Then QuotedUrl := \"&databaseName={databasename}\"\xFE";
    z += "            QuotedUrl = ReplaceI(QuotedUrl, \"{tablename}\", urlEncode(tableName))\xFE";
    z += "            QuotedUrl = ReplaceI(QuotedUrl, \"{databasename}\", urlEncode(attachedDB))\xFE";
    z += "        End if\xFE";
    z += "        QuotedUrl = `'`:QuotedUrl:`'`\xFE";
    z += "\xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "            AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, \"value\", true, ID:`_`:Column.parentCtlID:`_check`, \"\", false)\xFE";
    z += "            koID = ID\xFE";
    z += "            ID = ''\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        if genCode Then\xFE";
    z += "            if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            Html = `ctlHtml = @jsb_html.cascadingDropDownBox(\"`:ID:`\", \"`:Column.parentCtlID:`\", \"`:QuotedUrl:`\", `:(Column.addBlank+0):` /* add blank */, `:dftVal:` /* default val */, `:AdditionalAttributes:`, \"`:Column.descriptionField:`\", \"`:Column.valueField:`\")`\xFE";
    z += "            If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "        Else\xFE";
    z += "            Html = @jsb_html.cascadingDropDownBox(ID, Column.parentCtlID, QuotedUrl, Column.addBlank, DefaultValue, AdditionalAttributes, Column.descriptionField, Column.valueField)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            // Create a Change routine which will be called on parent changes\xFE";
    z += "            jsRoutine = `loadOptions(childCtl, a /* choiceArray */, \"`:Column.valueField:`\" /* valueField */, \"`:Column.descriptionField:`\" /* descriptionField */, `:Column.addBlank+0:` /* add Blank */, null /* defaultValue */, \"\" /* subdel */, !firstLoad);`\xFE";
    z += "            Html = Html:@reloadDataListFromUrl_OnParent_Change(koID, Column.parentCtlID, QuotedUrl, jsRoutine)\xFE";
    z += "\xFE";
    z += "            // Create a Check routine to setup on KO Load\xFE";
    z += "            Html := @Script(cascadingAttach2Parent(koID, Column.parentCtlID, True /* doKOBinding */))\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "    End Else\xFE";
    z += "        * Prevents change\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "* ============================= CTLS =============================\xFE";
    z += "Subroutine cascadingDropDownBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "\xFE";
    z += "    viewModel.columns.push ({name:'autopostback', label:'Auto PostBack', control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "\xFE";
    z += "    //*******************************************************************************************************************************************\xFE";
    z += "    viewModel.columns.push ({name:'lblRequired', label:'Required', control:'label', suppresslabel: true, fullline: true, defaultvalue:'The following fields are required' })\xFE";
    z += "    //*******************************************************************************************************************************************\xFE";
    z += "    \xFE";
    z += "    viewModel.columns.push ({name:'parentCtlID', label:'Parent Control', control:'dropDownBox', canedit:true, required: true, notblank: true, defaultvalue:'', reffile: \"{viewcolumns}\" })\xFE";
    z += "    viewModel.columns.push ({name:'descriptionField', label:'descriptionField', control:'textbox', canedit:true, tooltip: \"Place a json field name here\"  })\xFE";
    z += "    viewModel.columns.push ({name:'valueField', label:'valueField', control:'textbox', canedit:true, tooltip: \"Place a json field name here\"  })\xFE";
    z += " \xFE";
    z += "    viewModel.columns.push ({name:'customRoutine', label:'CustomRoutine', control:'textbox', canedit:true, required: true, notblank: true, tooltip: \"Place a json function here, or an http call with ?arg={id} for parent argument\"  })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_cascadingdropdownbox"] = z;
    var z = "Subroutine ctl_CheckBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim DefaultValue As StRiNg\xFE";
    z += "    Dim IsChecked As StRiNg\xFE";
    z += "\xFE";
    z += "    If !Column.canedit Then AdditionalAttributes[-1] = \"disabled\" // onclick=\"return false;\"\xFE";
    z += "    \xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"checked:$data['`:Column.name:`'], checked:$data['`:Column.name:`']?$data['`:Column.name:`']:`:IFF(Column.defaultvalue, Column.defaultvalue, 0):`\"` \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, \"checked\", true, \"\", \"\")\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    If genCode Then \xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"''\"\xFE";
    z += "        if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)        \xFE";
    z += "        Html = `ctlHtml = @jsb_html.CheckBox('`:ID:`', True, \"\", Val(`:dftVal:`), `:AdditionalAttributes:`)`\xFE";
    z += "        If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "    else\xFE";
    z += "        If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "\xFE";
    z += "        If Val(DefaultValue) Then IsChecked = True\xFE";
    z += "        Html = @jsb_html.CheckBox(ID, True, \"\", IsChecked, AdditionalAttributes)\xFE";
    z += "\xFE";
    z += "        If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "    end if\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_checkbox"] = z;
    var z = "Subroutine ctl_colorPicker(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "            // AdditionalAttributes[-1] = `data-bind=\"value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"`  \xFE";
    z += "            AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, \"value\", false, \"\", \"\")\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "            ID = ''\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        * Return attributes for a FORM ColorPicker \xFE";
    z += "        if genCode Then\xFE";
    z += "            if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            Html = `ctlHtml = @jsb_html.ColorPicker(\"`:ID:`\", `:dftVal:`, False, `:doKOBinding+0:`, `:AdditionalAttributes:`)`\xFE";
    z += "            If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "        else\xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "            Html = @jsb_html.ColorPicker(ID, DefaultValue, False, doKOBinding, AdditionalAttributes)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        end if\xFE";
    z += "\xFE";
    z += "    End Else\xFE";
    z += "        * Prevents change\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    return \xFE";
    z += "\xFE";
    z += "************************ CTLS *****************************\xFE";
    z += "Subroutine colorPicker_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "\xFE";
    z += "    viewModel.columns.push ({name:'autopostback', label:'Auto PostBack', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_colorpicker"] = z;
    var z = "* ============================= CTLS =============================\xFE";
    z += "Subroutine ctl_comboBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "*\xFE";
    z += "* See if there is a reffile, and make a json array, or json callback\xFE";
    z += "*\xFE";
    z += "    Dim multiselections As Integer\xFE";
    z += "    Dim MobilePad As String\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "    Dim Values As StRiNg\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        AdditionalAttributes = @AddParsley(Column, AdditionalAttributes)  ;* Force JSON to array\xFE";
    z += "        AdditionalAttributes[-1] = `autocomplete='off'`\xFE";
    z += "        multiselections = Column.multiselections\xFE";
    z += "        if multiselections then multiselections = 99 else multiselections = 1\xFE";
    z += "        \xFE";
    z += "        If doKOBinding Then \xFE";
    z += "            If Column.includeurl And Column.arrayname Then\xFE";
    z += "                AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, `value`, false, `koUrlComboBoxLoad`, column.addBlank + 0 :\", \": \"window.\":Column.arrayname:\", \": \"window.\":Column.arrayname:\", \": \"window.\":Column.arrayname:\", \": multiselections)\xFE";
    z += "            else\xFE";
    z += "                AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, `value`, false, `koComboBoxLoad`, column.addBlank + 0:`,'`:HtmlEncode(Column.valueField):`', '`:HtmlEncode(Column.descriptionField):`', `:Val(Column.multiValuedData):\", \": multiselections)\xFE";
    z += "            end if\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "            ID = ''\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        MobilePad = Column.mobilepad\xFE";
    z += "        if Mobilepad then\xFE";
    z += "            if MobilePad = 'custom' then\xFE";
    z += "                MobilePad = Column.custompad\xFE";
    z += "                if left(MobilePad, 2) <> \"[[\" or Right(MobilePad, 2) <> \"]]\" then Print \"Your \":viewName:\" \":id:\" field has has a malformed custom pad: \": MobilePad\xFE";
    z += "            else\xFE";
    z += "                if Column.datatype = \"integer\" Then\xFE";
    z += "                    locate MobilePad in ['integer', 'integer+', ''] else Print \"Your \":viewName:\" \":id:\" field has an integer datatype and your are using a non-integer keyboard: \": MobilePad\xFE";
    z += "                    AdditionalAttributes = @MergeAttribute(\"type\", `number`, \";\", AdditionalAttributes)\xFE";
    z += "                elseif Column.datatype = \"double\" Then\xFE";
    z += "                    locate MobilePad in ['real', 'integer', 'integer+', ''] else Print \"Your \":viewName:\" \":id:\" field has an double datatype and your are using a non-integer keyboard: \": MobilePad\xFE";
    z += "                end if\xFE";
    z += "            end if\xFE";
    z += "            \xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"mobilepad\", Mobilepad, \";\", AdditionalAttributes)\xFE";
    z += "        end if\xFE";
    z += "        \xFE";
    z += "        if genCode Then\xFE";
    z += "            AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\"\xFE";
    z += "            if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "\xFE";
    z += "            If Column.includeurl And Column.arrayname Then\xFE";
    z += "                HTML = `ctlHtml = @jsb_html.ComboBoxIncludeURL(\"`:ID:`\", \"`:Column.includeurl:`\", \"`:Column.arrayname:`\", `:dftVal:`, \"`:column.addBlank + 0:` /* addBlank */, `:Column.valueField:`\", \"`:Column.descriptionField:`\", `:AdditionalAttributes:`, `:Val(Column.multiValuedData):` /* multiValuedData */, `:multiselections:` /* multiselections */)`\xFE";
    z += "            ElseIf Column.reffile Then\xFE";
    z += "                HTML = `ctlHtml = @jsb_html.ComboBox(\"`:ID:`\", @jsb_bf.getRefValuesBySelect(\"`:Column.reffile:`\", \"`:Column.refpk:`\", \"`:Column.refdisplay:`\", \"`:Column.refwhere:`\", `:(Column.align = \"right\"):`, `:Val(Column.oktocache):`), `:dftVal:`, `:column.addBlank + 0:` /* addBlank */, \"`:Column.descriptionField:`\", \"`:Column.valueField:`\", `:AdditionalAttributes:`, `:Val(Column.multiValuedData):` /* multiValuedData */, `:multiselections:` /* multiselections */)`\xFE";
    z += "            Else\xFE";
    z += "                HTML = `ctlHtml = @jsb_html.ComboBox(\"`:ID:`\", \"`:Replace(Column.reflist, '\"', '\\\\\"'):`\", `:dftVal:`, `:column.addBlank + 0:` /* addBlank */, \"`:Column.descriptionField:`\", \"`:Column.valueField:`\", `:AdditionalAttributes:`, `:Val(Column.multiValuedData):` /* multiValuedData */, `:multiselections:` /* multiselections */)`\xFE";
    z += "            End If\xFE";
    z += "                \xFE";
    z += "            If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "\xFE";
    z += "        Else\xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "\xFE";
    z += "            Values = @jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "\xFE";
    z += "            If Column.includeurl And Column.arrayname Then\xFE";
    z += "                Html = @jsb_html.ComboBoxIncludeURL(ID, Column.includeurl, Column.arrayname, DefaultValue, column.addBlank, Column.descriptionField, Column.valueField, AdditionalAttributes, Column.multiValuedData, multiselections)\xFE";
    z += "            ElseIf Column.reffile Then\xFE";
    z += "                Html = @jsb_html.ComboBox(ID, VALUES, DefaultValue, column.addBlank, Column.descriptionField, Column.valueField, AdditionalAttributes, Column.multiValuedData, multiselections)\xFE";
    z += "            Else\xFE";
    z += "                Html = @jsb_html.ComboBox(ID, VALUES, DefaultValue, column.addBlank, Column.descriptionField, Column.valueField, AdditionalAttributes, Column.multiValuedData Or Column.reflist <> \"\", multiselections)\xFE";
    z += "            End If\xFE";
    z += "\xFE";
    z += "            If Column.autopostback And ID Then Html := @Script(`$(\"#`:ID:`\").change(function() { doJsbSubmit() }) `)\xFE";
    z += "        End If\xFE";
    z += "    End Else\xFE";
    z += "        * Prevents change\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine comboBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "\xFE";
    z += "    viewModel.columns.push ({name:'autopostback', label:'Auto PostBack', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "    viewModel.columns.push ({name:'multiselections', label:'Multiple Selections', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "    viewModel.columns.push ({name:'includeurl', label:'JS Include Url', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "    viewModel.columns.push ({name:'arrayname', label:'JS Array Name', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "\xFE";
    z += "    call TextBox_ExtraMeta(Row, viewModel)\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_combobox"] = z;
    var z = "Subroutine ctl_DateBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim onload As String\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim DefaultValue As StRiNg\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "            onload = ` window.datebox_onload($element, '`:Column.yearRange:`')`\xFE";
    z += "            AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', False /* addIfNotInList */, onload /* onload jsFunctionName */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "            ID = ''\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        AdditionalAttributes = @AddParsley(Column, AdditionalAttributes)\xFE";
    z += "        \xFE";
    z += "        if genCode Then\xFE";
    z += "            if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            Html = `ctlHtml = @jsb_html.DateBox(\"`:ID:`\", `:dftVal:`, `:Not(Column.canedit):`, `:AdditionalAttributes:`, '`:Column.yearRange:`')`\xFE";
    z += "            If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "        else\xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "            Html = @jsb_html.DateBox(ID, DefaultValue, Not(Column.canedit), AdditionalAttributes, Column.yearRange)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        end if\xFE";
    z += "    Else\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    return \xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "************************ CTLS *****************************\xFE";
    z += "Subroutine DateBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    viewModel.columns.push ({name:'yearRange', label:'Year Range', width:19, control:'textbox', canedit:true, defaultvalue:\"-99:+1\", tooltip: \"-years:+years\"  })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_datebox"] = z;
    window.cached_jsb_ctls["ctl_datetimebox"] = "Subroutine ctl_DateTimeBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE    Call ctl_DateBox(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFEEnd Sub";
    var z = "Subroutine ctl_downloadlink(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim DefaultValue As StRiNg\xFE";
    z += "\xFE";
    z += "    AdditionalAttributes = @MergeAttribute(\"style\", \"width: 100%\", \";\", AdditionalAttributes)\xFE";
    z += "    AdditionalAttributes[-1] =  `target=\"_blank\"`\xFE";
    z += "\xFE";
    z += "    If doKOBinding Then \xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"attr: {href:'`:@htmlRoot:'uploads/':`' + $data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'()}},text: $data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"` \xFE";
    z += "        AA = `data-bind=\"attr: {href:'`:@htmlRoot:'uploads/':`' + $data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'()}`\xFE";
    z += "        AA := `,text: $data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'`\xFE";
    z += "        AA := `, attr: {id: 'KO_`:NiceName(Column.name):`_' + $index()}\"` \xFE";
    z += "        AdditionalAttributes[-1] = AA\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    If genCode Then \xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "        if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "        Html = [`Url = `:dftVal]\xFE";
    z += "        Html[-1] = `If Left(Url, 4) <> \"http\" Then Url = @htmlRoot:'uploads/':Url`\xFE";
    z += "        Html[-1] = `ctlHtml = @Anchor('`:ID:`', Url, Url, `:AdditionalAttributes:`)`\xFE";
    z += "    Else\xFE";
    z += "        If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "        HTML = @Anchor(ID, @htmlRoot:'uploads/':DefaultValue, DefaultValue, AdditionalAttributes)\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    Return \xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine downloadlink_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    * viewModel.columns.push ({name:'linecnt', label:'Lines', width:19, control:'textbox', canedit:true, default: 1 })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_downloadlink"] = z;
    var z = "Subroutine ctl_dropDownBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim dftVal As String\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "    Dim Values As StRiNg\xFE";
    z += "\xFE";
    z += "    If !Column.canedit Then\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "        Return\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    AdditionalAttributes = @AddParsley(Column, AdditionalAttributes)\xFE";
    z += "\xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"addIfNotInList: {}, value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"`  \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', True /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    if genCode Then\xFE";
    z += "        Html = []\xFE";
    z += "        If doKOBinding Then dftVal = 'null' Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"''\"\xFE";
    z += "\xFE";
    z += "        If Column.includeurl And Column.arrayname Then\xFE";
    z += "            HTML[-1] = `ctlHtml = @jsb_html.DropDownBoxIncludeURL(\"`:ID:`\", \"`:Column.includeurl:`\", \"`:Column.arrayname:`\", `:dftVal:`, `:column.addBlank + 0:` /* addBlank */, False /* readOnly */, `:AdditionalAttributes:`, `:Column.multiValuedData:` /* multiValuedData */)`\xFE";
    z += "        \xFE";
    z += "        ElseIf Column.customRoutine Then\xFE";
    z += "            QuotedUrl = Column.customRoutine\xFE";
    z += "            if instr(viewName, am()) Then\xFE";
    z += "                attachedDB = field(viewName, am(), 1)\xFE";
    z += "                tableName = field(viewName, am(), 2)\xFE";
    z += "            else\xFE";
    z += "                ReadJson objectModel From @fHandle(\"dict\", ProjectName), viewName Else\xFE";
    z += "                    debug\xFE";
    z += "                End If\xFE";
    z += "                attachedDB = objectModel.attachdb\xFE";
    z += "                tableName = objectModel.tableName\xFE";
    z += "            end if\xFE";
    z += "            \xFE";
    z += "            If InStr(QuotedUrl, \"?\") Then QuotedUrl := \"&\" Else QuotedUrl := \"?\"\xFE";
    z += "            QuotedUrl := \"arg={id}\"\xFE";
    z += "            if !InStrI(QuotedUrl, \"tablename=\") Then QuotedUrl := \"&tableName={tablename}\"\xFE";
    z += "            if !InStrI(QuotedUrl, \"databasename=\") Then QuotedUrl := \"&databaseName={attachedDB}\"\xFE";
    z += "            QuotedUrl = ReplaceI(QuotedUrl, \"{tablename}\", urlEncode(tableName))\xFE";
    z += "            QuotedUrl = ReplaceI(QuotedUrl, \"{databasename}\", urlEncode(tableName))\xFE";
    z += "            QuotedUrl = `'`:QuotedUrl:`'`\xFE";
    z += "            \xFE";
    z += "            Html = `ctlHtml = @jsb_html.DropDownBoxAJAX(\"`:ID:`\", `:QuotedUrl:`, `:dftVal:` /* default val */, `:(Column.addBlank+0):` /* add blank */, False /* ReadOnly */, `:AdditionalAttributes:`, True /* Multivalued data */, \"`:Column.descriptionField:`\", \"`:Column.valueField:`\")`\xFE";
    z += "            \xFE";
    z += "        ElseIf Column.reffile Then\xFE";
    z += "            HTML[-1] = `Dim refList As Array = @jsb_bf.getRefValuesBySelect(\"`:Column.reffile:`\", \"`:Column.refpk:`\", \"`:Column.refdisplay:`\", \"`:Column.refwhere:`\", `:(Column.align = \"right\"):`, `:Val(Column.oktocache):`)`\xFE";
    z += "            HTML[-1] = `If refList Then`\xFE";
    z += "            HTML[-1] = `   ctlHtml = @jsb_html.DropDownBox(\"`:ID:`\", refList, `:dftVal:`, `:column.addBlank + 0:` /* addBlank */, False /* readOnly */, `:AdditionalAttributes:`, `:Column.multiValuedData:` /* multiValuedData */)`\xFE";
    z += "            HTML[-1] = `Else`\xFE";
    z += "            HTML[-1] = `   ctlHtml = 'no ref list'`\xFE";
    z += "            HTML[-1] = `End If`\xFE";
    z += "\xFE";
    z += "        ElseIf Column.reflist Then\xFE";
    z += "            HTML[-1] = `ctlHtml = @jsb_html.DropDownBox(\"`:ID:`\", \"`:Replace(Column.reflist, '\"', '\\\\\"'):`\", `:dftVal:`, `:column.addBlank + 0:` /* addBlank */, False /* readOnly */, `:AdditionalAttributes:`, True /* multiValuedData */)`\xFE";
    z += "\xFE";
    z += "        Else\xFE";
    z += "            Html[-1] = \"ctlHtml = 'No ref list' ;* No reference list is setup\"\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        If Column.autopostback And ID Then Html[-1] = `ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "\xFE";
    z += "    Else\xFE";
    z += "        If doKOBinding Then DefaultValue = Null Else DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "\xFE";
    z += "        If Column.includeurl And Column.arrayname Then\xFE";
    z += "            Html = @jsb_html.DropDownBoxIncludeURL(ID, Column.includeurl, Column.arrayname, DefaultValue, Column.addBlank, False, AdditionalAttributes, True)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        Else\xFE";
    z += "            Values = @jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "            If isArray(Values) Then\xFE";
    z += "                Html = @jsb_html.DropDownBox(ID, VALUES, DefaultValue, Column.addBlank, False, AdditionalAttributes, Column.multiValuedData Or Column.reflist <> \"\")\xFE";
    z += "                If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "            Else\xFE";
    z += "                Html = 'no ref list'\xFE";
    z += "            End If\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine dropDownBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "    viewModel.columns.push ({name:'autopostback', label:'Auto PostBack', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "    viewModel.columns.push ({name:'includeurl', label:'JS Include Url', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "    viewModel.columns.push ({name:'arrayname', label:'JS Array Name', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "    viewModel.columns.push ({name:'customRoutine', label:'CustomRoutine', control:'textbox', canedit:true, required: true, notblank: true, tooltip: \"Place a json function here, or an http call with ?arg={id} for parent argument\"  })\xFE";
    z += "\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_dropdownbox"] = z;
    window.cached_jsb_ctls["ctl_emailbox"] = "Subroutine ctl_EMailBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE    AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE    AdditionalAttributes[-1] = `data-parsley-type=\"email\"`\xFE    call ctl_TextBox(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFEEnd Subroutine";
    var z = "Subroutine ctl_fieldSetBtns(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "\xFE";
    z += "    Dim dftVal As String\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "    Dim Values As StRiNg\xFE";
    z += "\xFE";
    z += "    If !Column.canedit Then\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "        Return\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    AdditionalAttributes = @AddParsley(Column, []) ;* AdditionalAttributes ??\xFE";
    z += "\xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"addIfNotInList: {}, checked:$data['`:Column.name:`'], checked:$data['`:Column.name:`']?$data['`:Column.name:`']:`:IFF(Column.defaultvalue, Column.defaultvalue, 0):\xFE";
    z += "        AA = koLoad(Column.name, Column.defaultvalue, 'checked', False /* addIfNotInList */, \"window.fieldSetBtn_Change($element)\" /* onload script */,  Nothing /* jsExtraFunctionParameters */, True)\xFE";
    z += "        AdditionalAttributes[-1] = AA:`, attr: { name: '`:Column.name:`' + $index() }\"`  \xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    If genCode Then \xFE";
    z += "        Html = []\xFE";
    z += "        If doKOBinding Then dftVal = 'null' Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"''\"\xFE";
    z += "        \xFE";
    z += "        If Column.reffile Then\xFE";
    z += "            HTML[-1] = `Dim refList As Array = @jsb_bf.getRefValuesBySelect(\"`:Column.reffile:`\", \"`:Column.refpk:`\", \"`:Column.refdisplay:`\", \"`:Column.refwhere:`\", `:(Column.align = \"right\"):`, `:Val(Column.oktocache):`)`\xFE";
    z += "            HTML[-1] = `If refList Then`\xFE";
    z += "            HTML[-1] = `   ctlHtml = @jsb_html.fieldSetBtns(\"`:ID:`\", refList, `:dftVal:`, `:(!Column.canedit):`, `:AdditionalAttributes:`, `:Column.multiValuedData:` /* multiValuedData */)`\xFE";
    z += "            HTML[-1] = `Else`\xFE";
    z += "            HTML[-1] = `   ctlHtml = 'no ref list '`\xFE";
    z += "            HTML[-1] = `End If`\xFE";
    z += "            \xFE";
    z += "        ElseIf Column.reflist Then\xFE";
    z += "            Html[-1] = `ctlHtml = @jsb_html.fieldSetBtns('`:ID:`', \"`:Replace(Column.reflist, '\"', '\\\\\"'):`\", `:dftVal:`, `:(!Column.canedit):`, `:AdditionalAttributes:`, `:Column.multiValuedData+0:`)`\xFE";
    z += "        \xFE";
    z += "        Else\xFE";
    z += "            Html[-1] = \"ctlHtml = 'no ref list ' ;* No reference list is setup\"\xFE";
    z += "        end if\xFE";
    z += "\xFE";
    z += "        If Column.autopostback And ID Then Html[-1] = `ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "    else\xFE";
    z += "        If doKOBinding Then DefaultValue = Null Else DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "        \xFE";
    z += "        Values = @jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "        If isArray(Values) Then\xFE";
    z += "            Html = @jsb_html.fieldSetBtns(ID, VALUES, DefaultValue, (!Column.canedit), AdditionalAttributes, Column.multiValuedData)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        Else\xFE";
    z += "            Html = ''\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine fieldSetBtns_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "    viewModel.columns.push ({name:'autopostback', label:'Auto PostBack', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_fieldsetbtns"] = z;
    var z = "Subroutine ctl_hiddenVar(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim DFTVAL As StRiNg\xFE";
    z += "    Dim DEFAULTVALUE As StRiNg\xFE";
    z += "\xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"`  \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', False /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    if genCode Then\xFE";
    z += "        if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "        Html = `ctlHtml = @jsb_html.hiddenVar(\"`:ID:`\", `:dftVal:`, `:AdditionalAttributes:`)`\xFE";
    z += "        If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "    else\xFE";
    z += "        If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "        Html = @jsb_html.hiddenVar(ID, DefaultValue, AdditionalAttributes)\xFE";
    z += "        If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "    end if\xFE";
    z += "\xFE";
    z += "    return \xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_hiddenvar"] = z;
    var z = "Subroutine ctl_htmlBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "\xFE";
    z += "    AdditionalAttributes = @MergeAttribute(\"style\", \"width: 100%\", \";\", AdditionalAttributes)\xFE";
    z += "\xFE";
    z += "    if Column.fullheight then\xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"style\", \"height:100%; overflow: auto\", \";\", AdditionalAttributes)\xFE";
    z += "\xFE";
    z += "    elseif Column.linecnt > 1 Then \xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"style\", \"min-height:\":Column.linecnt:\"em\", \";\", AdditionalAttributes)\xFE";
    z += "    end if\xFE";
    z += "\xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"` \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', False /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    If genCode Then \xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "        if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "\xFE";
    z += "        If Column.canedit Then\xFE";
    z += "            Html = `ctlHtml = @NicEditor('`:ID:`', `:dftVal:`, false, `:AdditionalAttributes:`)`\xFE";
    z += "        Else\xFE";
    z += "            HTML = `ctlHtml = @Html(\"<label class='CtlLabel' id='`:ID:`' `:AdditionalAttributes:`>\":Replace(`:dftVal:`, Chr(13), \"<br />\"):\"</label>\")`\xFE";
    z += "        End If\xFE";
    z += "    else\xFE";
    z += "        If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "\xFE";
    z += "        If Column.canedit Then\xFE";
    z += "            Html = @NicEditor(ID, DefaultValue, false, AdditionalAttributes)\xFE";
    z += "        Else\xFE";
    z += "            HTML = CHR(28):\"<label class='CtlLabel' id='\":ID:\"' \":Join(AdditionalAttributes, \" \"):\">\":Replace(DefaultValue, Chr(13), \"<br />\"):\"</label>\":CHR(29)\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "    Return \xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine htmlBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    viewModel.columns.push ({name:'linecnt', label:'Lines', width:19, control:'textbox', canedit:true, default: 1 })\xFE";
    z += "    viewModel.columns.push ({name:'fullheight', label:'fullheight', width:19, control:'checkbox', canedit:true, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_htmlbox"] = z;
    window.cached_jsb_ctls["ctl_imagebox"] = "* todo\xFE\xFESubroutine ctl_ImageBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE    call ctl_TextBox(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFEEnd Subroutine";
    var z = "Subroutine ctl_json_inline(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As String, ByVal parentModel As String, ByVal AdditionalAttributes As Variable,  ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    * $options aspxc-\xFE";
    z += "    \xFE";
    z += "    Dim USENAME As String\xFE";
    z += "    Dim NEWROW As String\xFE";
    z += "    Dim MODEL As StRiNg\xFE";
    z += "\xFE";
    z += "    if !parentModel then parentModel = \"\"\xFE";
    z += "    Dim aHtml = []\xFE";
    z += "\xFE";
    z += "    if parentModel Then \xFE";
    z += "        useName = Column.name\xFE";
    z += "        newRow = `function () { if (window.event) koModel.`:@NiceName(Replace(parentModel, \"().\", \"_\")):useName:`_newRow($index()) /* A */ }`\xFE";
    z += "    Else \xFE";
    z += "        useName = ID\xFE";
    z += "        newRow = `koModel.`:useName:`_newRow`\xFE";
    z += "        newRow = `function () { if (window.event) koModel.`:useName:`_newRow() }`\xFE";
    z += "    End If\xFE";
    z += "        \xFE";
    z += "    if genCode Then\xFE";
    z += "        // Two choices here:  true) put html code directly into the output file, false) write code that creates the html dynamically\xFE";
    z += "        \xFE";
    z += "        if True Then\xFE";
    z += "            If !@json_setup(ProjectName, ID, Column, [], Errors, AdditionalAttributes, defaultRow, dataSet, Model, editViewName) Then Alert(Errors); Return\xFE";
    z += "            rl = @jsb_html.repeaterLoad(useName, defaultRow, DataSet, parentModel)\xFE";
    z += "    \xFE";
    z += "            ' This is where we can recurse\xFE";
    z += "            if Column.form = \"form\" Or Column.form = \"\"  Or Column.form = \"tform\" Then\xFE";
    z += "                rl := @RepeaterFormBackground(ProjectName, useName, Model, DataSet, Column.rmvrowtxt, Column.canedit, parentModel, editViewName)\xFE";
    z += "            else\xFE";
    z += "                rl := @RepeaterGridBackground(ProjectName, useName, Model, DataSet, Column.rmvrowtxt, Column.canedit, parentModel, editViewName) \xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            rl = Replace(rl, chr(28), \"\")\xFE";
    z += "            rl = Replace(rl, chr(29), \"\")\xFE";
    z += "            rl = split(rl, crlf())\xFE";
    z += "            aHtml[-1] = '   ctlHtml = @Html(`'\xFE";
    z += "            for each line in rl\xFE";
    z += "                ltriml = ltrim(line)\xFE";
    z += "                if ltriml then\xFE";
    z += "                    fc = left(ltriml, 1)\xFE";
    z += "                    spcs = instr(line, fc)\xFE";
    z += "                    if spcs <= 1 then \xFE";
    z += "                        if fc = \"<\" then line = space(8):line else line = space(12):line\xFE";
    z += "                    end if\xFE";
    z += "                    aHtml[-1] = line\xFE";
    z += "                end if\xFE";
    z += "            next\xFE";
    z += "            aHtml[-1] = \"    `)\"\xFE";
    z += "            \xFE";
    z += "            if parentModel Then \xFE";
    z += "                Parent = `koModel.`:@NiceName(Replace(parentModel, \"().\", \"\"))\xFE";
    z += "                KOID = Parent:\"_\":@niceName(ID)\xFE";
    z += "            Else \xFE";
    z += "                KOID = `koModel.`:@NiceName(ID)\xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            aHtml[-1] = `   Dim DataSet As Array = `:Row\xFE";
    z += "            aHtml[-1] = `   ctlHtml := @Script('`:KOID:` = makeObservableKO([':Change(Join(dataSet, \",\"), CHR(160), Chr(32)):'], `:KOID:`_DefaultRow);')`\xFE";
    z += "        Else\xFE";
    z += "            \xFE";
    z += "            if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            if parentModel Then \xFE";
    z += "                aHtml[-1] = `Dim parentModel As String = `:parentModel\xFE";
    z += "            Else \xFE";
    z += "                aHtml[-1] = `Dim parentModel As String = Null `\xFE";
    z += "            End If\xFE";
    z += "    \xFE";
    z += "            aHtml[-1] = `Dim Column As JSON = `:Column\xFE";
    z += "            aHtml[-1] = `Dim editViewName As String`\xFE";
    z += "            aHtml[-1] = `Dim Errors As String`\xFE";
    z += "            aHtml[-1] = `Dim defaultRow As JSON`\xFE";
    z += "            aHtml[-1] = `Dim Model As JSON`\xFE";
    z += "            aHtml[-1] = `Dim dataSet As Array`\xFE";
    z += "            aHtml[-1] = `If !@jsb_ctls.json_setup(\"`:ProjectName:`\", \"`:ID:`\", Column, `:Field(Row, \"[\", 1):`, Errors, `:AdditionalAttributes:`, defaultRow, dataSet, Model, editViewName) Then Return Alert(Errors) = '*'`\xFE";
    z += "            \xFE";
    z += "            aHtml[-1] = `ctlHtml = @jsb_html.repeaterLoad(\"`:useName:`\", defaultRow, DataSet, parentModel) `\xFE";
    z += "    \xFE";
    z += "            ' This is where we can recurse\xFE";
    z += "            if Column.form = \"form\" Or Column.form = \"\"  Or Column.form = \"tform\" Then\xFE";
    z += "                aHtml[-1] = `ctlHtml := @jsb_ctls.RepeaterFormBackground(\"`:ProjectName:`\", \"`:useName:`\", Model, DataSet, \"`:Column.rmvrowtxt:`\", \"`:Column.canedit:`\", parentModel, editViewName)`\xFE";
    z += "            else\xFE";
    z += "                aHtml[-1] = `ctlHtml := @jsb_ctls.RepeaterGridBackground(\"`:ProjectName:`\", \"`:useName:`\", Model, DataSet, \"`:Column.rmvrowtxt:`\", \"`:Column.canedit:`\", parentModel, editViewName)`\xFE";
    z += "            End If\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        If Column.canedit And Column.addrowtxt Then \xFE";
    z += "            aHtml[-1] = `ctlHtml := @jsb_html.button('btnAddRow', \"`:Column.addrowtxt:`\", [\"data-bind='click: `:newRow:`'\"]) `\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "    Else\xFE";
    z += "        If !@json_setup(ProjectName, ID, Column, Row, Errors, AdditionalAttributes, defaultRow, dataSet, Model, editViewName) Then Alert(Errors); Return\xFE";
    z += "\xFE";
    z += "        aHtml[-1] = @jsb_html.repeaterLoad(useName, defaultRow, DataSet, parentModel) \xFE";
    z += "\xFE";
    z += "        ' This is where we can recurse\xFE";
    z += "        if Column.form = \"form\" Or Column.form = \"\"  Or Column.form = \"tform\" Then\xFE";
    z += "            aHtml[-1] = @RepeaterFormBackground(ProjectName, useName, Model, DataSet, Column.rmvrowtxt, Column.canedit, parentModel, editViewName)\xFE";
    z += "        else\xFE";
    z += "            aHtml[-1] = @RepeaterGridBackground(ProjectName, useName, Model, DataSet, Column.rmvrowtxt, Column.canedit, parentModel, editViewName) \xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        If Column.canedit And Column.addrowtxt Then \xFE";
    z += "            aHtml[-1] = @jsb_html.button('btnAddRow', Column.addrowtxt, [`data-bind='click: `:newRow:`'`]) \xFE";
    z += "        End If\xFE";
    z += "    End If  \xFE";
    z += "    \xFE";
    z += "    Html = Join(aHtml, CRLF())\xFE";
    z += "End Subroutine \xFE";
    z += "\xFE";
    z += "* ============================= CTLS =============================\xFE";
    z += "Subroutine json_inline_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    * $options aspxc-\xFE";
    z += "    \xFE";
    z += "    viewModel.columns.push ({name:'useview', label:'Use View', datatype: 'string', primarykey:false, width:30, control:'dropdownbox', canedit:true, pickfunction: 'edv_pick?projectName={projectname}', reffile:\"dict {projectname}\", refpk:\"ItemID\", refwhere:\"ItemID Like '%.view'\" })\xFE";
    z += "    viewModel.columns.push ({name:'addrowtxt', label:'Add Row Text', datatype: 'string', primarykey:false, width:30, control:'textbox', required: true, notblank: true, canedit:true, defaultvalue: \"Add another row\" })\xFE";
    z += "    viewModel.columns.push ({name:'rmvrowtxt', label:'Remove Row Text', datatype: 'string', primarykey:false, width:30, control:'textbox', required: true, notblank: true, canedit:true, defaultvalue: \"Remove Row\" })\xFE";
    z += "    viewModel.columns.push ({name:'form', label:'form', datatype: 'string', primarykey:false, width:30, control:'dropdownbox', required: true, notblank: true, canedit:true, defaultvalue: \"form\", reflist: \"form;grid\" })\xFE";
    z += "End Subroutine\xFE";
    z += ""
    window.cached_jsb_ctls["ctl_json_inline"] = z;
    var z = "Subroutine ctl_json_popup(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal parentModel As JSON, ByVal AdditionalAttributes As Variable,  ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    * $options aspxc-\xFE";
    z += "        Dim POPUPWIDTH As String\xFE";
    z += "    Dim POPUPTITLE As String\xFE";
    z += "    Dim DEFAULTROW As String\xFE";
    z += "    Dim MODEL As StRiNg\xFE";
    z += "    Dim EDITVIEWNAME As StRiNg\xFE";
    z += "    Dim USENAME As String\xFE";
    z += "    Dim C2 As String\xFE";
    z += "    Dim C1 As String\xFE";
    z += "    Dim KOID As String\xFE";
    z += "    Dim SUBID As String\xFE";
    z += "    Dim MYLAYOUT As String\xFE";
    z += "    Dim S As String\xFE";
    z += "    Dim POPUPHEIGHT As StriNg\xFE";
    z += "    Dim DATASET As Variable\xFE";
    z += "    Dim output As Variable\xFE";
    z += "\xFE";
    z += "   if !popupHeight Then popupHeight = 300 + UBound(DataSet) * 40;\xFE";
    z += "   if !popupWidth Then popupWidth = \"80%\"\xFE";
    z += "   if Val(popupHeight) <> popupHeight Then popupHeight = '\"':popupHeight:'\"'\xFE";
    z += "   if Val(popupWidth) <> popUpWidth Then popupWidth = '\"':popupWidth:'\"'\xFE";
    z += "\xFE";
    z += "   if !parentModel then parentModel = \"\"\xFE";
    z += "   If !json_setup(ProjectName, ID, Column, Row, output, AdditionalAttributes, defaultRow, dataSet, Model, editViewName) Then Return\xFE";
    z += "\xFE";
    z += "   output = []\xFE";
    z += "   if parentModel Then useName = Column.name Else useName = ID\xFE";
    z += "   output[-1] = @jsb_html.repeaterLoad(useName, defaultRow, DataSet, parentModel) \xFE";
    z += "\xFE";
    z += "   if parentModel Then \xFE";
    z += "      AdditionalAttributes[-1] = `data-bind=\"value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"`  \xFE";
    z += "      AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "      C2 = @jsb_html.button('', '...', [`data-bind=\"click: function () { popup_`:ID:`($data, $index()) }\"`]) \xFE";
    z += "   Else \xFE";
    z += "      C2 = @jsb_html.button('', '...', [`onclick='popup_`:ID:`()'`])\xFE";
    z += "   End If\xFE";
    z += "\xFE";
    z += "   S = \"[\" : Join(DataSet, \",\") : \"]\"\xFE";
    z += "   S = HtmlEscape(S)\xFE";
    z += "   \xFE";
    z += "   If Column.canedit Then\xFE";
    z += "      C1 = Chr(28):`<input id='`:ID:`' name='`:ID:`' class='CtlJsonArray' value='`:S:`' `:Join(AdditionalAttributes, \" \"):` />`:Chr(29)\xFE";
    z += "      output[-1] = @Cols2(\"%\", C1, \"30px\", C2, \"\", \"overflow: hidden\", \"overflow: hidden\")\xFE";
    z += "   Else\xFE";
    z += "      C1 = Chr(28):`<input id='`:ID:`' name='`:ID:`' type='hidden' class='CtlJsonArray' value='`:S:`' `:Join(AdditionalAttributes, \" \"):` />`:Chr(29)\xFE";
    z += "      output[-1] = C1:C2\xFE";
    z += "   End If\xFE";
    z += "\xFE";
    z += "   KoID = \"Ctl_\":ID\xFE";
    z += "   output[-1] = Chr(28):`<div id=\"`:ID:`_dialog\" title=\"Basic! dialog\" style=\"display: none;\">`:Chr(29)\xFE";
    z += "   if parentModel Then subID = parentModel:\"().\" else subID = \"\"\xFE";
    z += "\xFE";
    z += "   if Column.form = \"form\" Or Column.form = \"\" Then\xFE";
    z += "       myLayout = @RepeaterFormBackground(ProjectName, useName, Model, DataSet, Column.rmvrowtxt, Column.canedit, subID, editViewName) \xFE";
    z += "   else\xFE";
    z += "       myLayout = @RepeaterGridBackground(ProjectName, useName, Model, DataSet, Column.rmvrowtxt, Column.canedit, subID, editViewName) \xFE";
    z += "   End If\xFE";
    z += "\xFE";
    z += "   output[-1] =  Replace(Replace(myLayout, \"mdlctl\", \"nstctl\"), \"foreach: $data\", \"foreach: $root\")\xFE";
    z += "   output[-1] = Chr(28):`</div>`\xFE";
    z += "\xFE";
    z += "   Dim Script As Array = []\xFE";
    z += "   If parentModel Then\xFE";
    z += "       Script[-1] = `function popup_`:ID:`(thisRow, index) {` \xFE";
    z += "       Script[-1] = `   var myRow = thisRow; `\xFE";
    z += "       Script[-1] = `   var myCtl = $('[name=\"`:ID:`\"]').eq(index); `\xFE";
    z += "   Else\xFE";
    z += "       Script[-1] = `function popup_`:ID:`() {`\xFE";
    z += "       Script[-1] = `   var myCtl = $(\"#`:ID:`\");`\xFE";
    z += "   End If\xFE";
    z += "\xFE";
    z += "   Script[-1] = `   var myjs = $(myCtl).val();`\xFE";
    z += "   Script[-1] = `   if (Left(myjs, 1) != \"[\") myjs = \"[\" + myjs + \"]\"`\xFE";
    z += "   Script[-1] = `   myjs = string2json(myjs)`\xFE";
    z += "   Script[-1] = ``\xFE";
    z += "\xFE";
    z += "   Script[-1] = `      $(\"#`:ID:`_dialog\" ).dialog({`\xFE";
    z += "   Script[-1] = `       title: \"`:@HtmlEncode(popupTitle):`\",`\xFE";
    z += "   Script[-1] = `       modal: true,` \xFE";
    z += "   Script[-1] = `       width: `:popupWidth:`,` \xFE";
    z += "   Script[-1] = `       minHeight: `:popupHeight:`,` \xFE";
    z += "   Script[-1] = `       height: `:popupHeight:`,` \xFE";
    z += "   Script[-1] = `       open: function() {`\xFE";
    z += "   Script[-1] = `           koModel.`:@NiceName(Replace(parentModel, \"().\", \"_\")):useName:`.removeAll()`\xFE";
    z += "   Script[-1] = `           for (var i = 0; i < myjs.length; ++i) koModel.`:@NiceName(Replace(parentModel, \"().\", \"_\")):useName:`_addRow(myjs[i]);`\xFE";
    z += "   Script[-1] = `      },`\xFE";
    z += "   Script[-1] = `      buttons: {`\xFE";
    z += "   If Column.canedit And Column.addrowtxt Then \xFE";
    z += "      Script[-1] = `         '`:Column.addrowtxt:`': function() { `\xFE";
    z += "      Script[-1] = `             koModel.`:@NiceName(Replace(parentModel, \"().\", \"_\")):useName:`_newRow()`\xFE";
    z += "      Script[-1] = `         },`\xFE";
    z += "   End If\xFE";
    z += "   Script[-1] = `         'Save': function() {`\xFE";
    z += "   Script[-1] = `            $(myCtl).val(koModel.`:@NiceName(Replace(parentModel, \"().\", \"_\")):useName:`_Value());`\xFE";
    z += "   If parentModel Then\xFE";
    z += "       Script[-1] = `            myRow['`:ID:`'] = koModel.`:@NiceName(Replace(parentModel, \"().\", \"_\")):useName:`_Value();`\xFE";
    z += "   End If\xFE";
    z += "   Script[-1] = `            $(this).dialog(\"close\");`\xFE";
    z += "   Script[-1] = `         },`\xFE";
    z += "   Script[-1] = `         'Cancel': function() {`\xFE";
    z += "   Script[-1] = `             $(this).dialog(\"close\");`\xFE";
    z += "   Script[-1] = `         }`\xFE";
    z += "   Script[-1] = `       },`\xFE";
    z += "   Script[-1] = `       close: function(event, ui) { `\xFE";
    z += "   Script[-1] = `          koModel.`:@NiceName(Replace(parentModel, \"().\", \"_\")):useName:`.removeAll()`\xFE";
    z += "   Script[-1] = `       }`\xFE";
    z += "   Script[-1] = `     });`\xFE";
    z += "   Script[-1] = `   }`\xFE";
    z += "\xFE";
    z += "   Html = Join(output):@Script(Join(Script))\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "* ============================= CTLS =============================\xFE";
    z += "Subroutine json_popup_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    * $options aspxc-\xFE";
    z += "   viewModel.columns.push ({name:'useview', label:'Use View', datatype: 'string', primarykey:false, width:30, control:'dropdownbox', canedit:true, pickfunction: 'edv_pick?projectName={projectname}', reffile:\"dict {projectname}\", refpk:\"ItemID\", refwhere:\"ItemID Like '%.view'\" })\xFE";
    z += "   viewModel.columns.push ({name:'popuptitle', label:'Popup Title', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "   viewModel.columns.push ({name:'popupwidth', label:'Popup Width', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "   viewModel.columns.push ({name:'popupheight', label:'MPopup Height', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "   viewModel.columns.push ({name:'form', label:'form', datatype: 'string', primarykey:false, width:30, control:'dropdownbox', required: true, notblank: true, canedit:true, defaultvalue: \"form\", reflist: \"form;grid\" })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_json_popup"] = z;
    var z = "Subroutine ctl_Knob(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "\xFE";
    z += "    If !Column.canedit Then AdditionalAttributes[-1] = \"readonly\"\xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"checked:$data['`:Column.name:`'], checked:$data['`:Column.name:`']?$data['`:Column.name:`']:`:IFF(Column.defaultvalue, Column.defaultvalue, 0):`\"` \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'checked', False /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    If genCode Then \xFE";
    z += "        if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"''\"\xFE";
    z += "        Html = `ctlHtml = @jsb_html.Knob('`:ID:`', `:dftVal:`, `:!Column.canedit:`, `:AdditionalAttributes:`, `:Column.iminvalue:`, `:Column.imaxvalue:`, `:Val(Column.size):`, \"`:Column.color:`\")`\xFE";
    z += "        \xFE";
    z += "        If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "    else\xFE";
    z += "        If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "\xFE";
    z += "        Html = @jsb_html.Knob(ID, DefaultValue, Not(Column.canedit), AdditionalAttributes, Column.iminvalue, Column.imaxvalue, Column.size, Column.color)\xFE";
    z += "\xFE";
    z += "        If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "    end if\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine Knob_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    viewModel.columns.push ({name:'size', label:'Size', width:19, control:'textbox', canedit:true, default: 120 })\xFE";
    z += "    viewModel.columns.push ({name:'color', label:'Color', width:19, control:'textbox', canedit:true })\xFE";
    z += "    viewModel.columns.push ({name:'iminvalue', index:31, label:'int Min Vaue', width:\"12em\", control:'textbox', canedit:true, default: 0 })\xFE";
    z += "    viewModel.columns.push ({name:'imaxvalue', index:32, label:'int Max Value', width:\"12em\", control:'textbox', canedit:true, default: 100 })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_knob"] = z;
    var z = "Subroutine ctl_label(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim code As StRiNg\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "    Dim DisplayValue As String\xFE";
    z += "\xFE";
    z += "    AdditionalAttributes = @MergeAttribute(\"style\", \"width: 100%\", \";\", AdditionalAttributes)\xFE";
    z += "    if Column.linecnt > 1 Then AdditionalAttributes = @MergeAttribute(\"style\", \"min-height:\":Column.linecnt:\"em\", \";\", AdditionalAttributes)\xFE";
    z += "\xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"text:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"` \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'text', False /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    * Label\xFE";
    z += "    If genCode Then \xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = JoinAttributes(AdditionalAttributes) Else AdditionalAttributes = \"\"\xFE";
    z += "        Html = []\xFE";
    z += "        code = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "        if Column.multiValuedData And ((column.refdisplay And column.refdisplay <> column.refpk And (column.reffile Or Column.reflist)) Or Column.reflist) Then \xFE";
    z += "            Html[-1] = `desc = @lookupCode(`:code:`, '`:Column.refdisplay:`', '`:Column.refpk:`', '`:Column.reffile:`', '`:Column.reflist:`', `:(Column.oktocache):`)`\xFE";
    z += "            Html[-1] = `ctlHtml = @Html(\"<label class='CtlLabel form-control' id='ctllbl_`:ID:`' `:AdditionalAttributes:`>\":Replace(@HtmlEncode(desc), Chr(13), \"<br />\"):\"</label><input class='hCtlLabel' type='hidden' name='`:ID:`' value='\":@HtmlEncode(`:Code:`):\"' />\")`\xFE";
    z += "        Else\xFE";
    z += "            Html[-1] = `ctlHtml = @Html(\"<label class='CtlLabel form-control' id='ctllbl_`:ID:`' `:AdditionalAttributes:`>\":Replace(@HtmlEncode(`:code:`), Chr(13), \"<br />\"):\"</label><input class='hCtlLabel' type='hidden' name='`:ID:`' value='\":@HtmlEncode(`:Code:`):\"' />\")`\xFE";
    z += "        end if\xFE";
    z += "\xFE";
    z += "    Else\xFE";
    z += "        If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "        if Column.reffile && Column.refpk && Column.refdisplay && (Column.refpk <> Column.refdisplay) Then \xFE";
    z += "            DisplayValue = @lookupCode(DefaultValue, Column.refdisplay, Column.refpk, Column.reffile, Column.reflist, Column.oktocache)\xFE";
    z += "        Else\xFE";
    z += "            DisplayValue = DefaultValue\xFE";
    z += "        End If\xFE";
    z += "        HTML = CHR(28):\"<label class='CtlLabel form-control' id='ctllbl_\":ID:\"' \":Join(AdditionalAttributes, \" \"):\">\":Replace(@HtmlEncode(DisplayValue), Chr(13), \"<br />\"):\"</label><input class='hCtlLabel' type='hidden' name='\":ID:\"' value='\":@HtmlEncode(DefaultValue):\"' />\":CHR(29)\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    If genCode Then\xFE";
    z += "        If Column.mask Then Html := CRLF():`ctlHtml := @Script('$(\"#ctllbl_`:ID:`\").mask(\"`:Mid(Column.mask, InStr(Column.mask, \",\") +1):`\");')`\xFE";
    z += "    Else\xFE";
    z += "        If Column.mask Then Html = Html:@Script(`$(\"#ctllbl_`:ID:`\").mask(\"`:Mid(Column.mask, InStr(Column.mask, \",\") +1):`\");`)\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine label_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    viewModel.columns.push ({name:'linecnt', label:'Lines', width:19, control:'textbox', canedit:true, default: 1 })\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_label"] = z;
    var z = "************************ CTLS *****************************\xFE";
    z += "Subroutine ctl_Multiselectdropdownbox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "*\xFE";
    z += "* See if there is a RefFIle, and make a json array, or json callback\xFE";
    z += "*\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim Values As String\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "    Dim Binding As Variable\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        If doKOBinding Then\xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force Json To Array\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "           //  Binding = [`data-bind=\"addIfNotInList: {}, value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"`  ]\xFE";
    z += "           Binding = [koLoad(Column.name, Column.defaultvalue, 'value', False /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)]\xFE";
    z += "        Else\xFE";
    z += "            Binding = []\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        If genCode Then\xFE";
    z += "            If doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            If AdditionalAttributes Then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            \xFE";
    z += "            If Column.reffile Then\xFE";
    z += "                Html = `ctlHtml = @jsb_html.multiSelectdropdownbox(\"`:Id:`\", @jsb_bf.getRefValuesBySelect(\"`:Column.reffile:`\", \"`:Column.refpk:`\", \"`:Column.refdisplay:`\", \"`:Column.refwhere:`\", `:(Column.align = \"right\"):`, `:Val(Column.oktocache):`), `:dftVal:`, `:AdditionalAttributes:`, `:Binding:`)`\xFE";
    z += "            ElseIf Column.reflist Then\xFE";
    z += "                Html = `ctlHtml = @jsb_html.multiSelectdropdownbox(\"`:Id:`\", \"`:Replace(Column.reflist, '\"', '\\\\\"'):`\", `:dftVal:`, `:AdditionalAttributes:`, `:Binding:`)`\xFE";
    z += "            Else\xFE";
    z += "                Html[-1] = \"ctlHtml = 'no ref list ' ;* No reference list is setup\"\xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            If Column.autopostback And Id Then Html := Crlf():`ctlHtml := @Script('$(\"#`:Id:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "        Else\xFE";
    z += "            Values = @Jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewName)\xFE";
    z += "            \xFE";
    z += "            Html = @Jsb_html.multiSelectdropdownbox(Id, Values, DefaultValue, @AddParsley(Column, AdditionalAttributes), Binding)\xFE";
    z += "            If Column.autopostback And Id Then Html = Html:@Script(`$('#`:Id:`').blur(function() { doJsbSubmit() });`)\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "\xFE";
    z += "    End Else\xFE";
    z += "        * Prevents change\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, Id, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "************************ CTLS *****************************\xFE";
    z += "Subroutine multiselectdropdownbox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "\xFE";
    z += "    * viewModel.columns.push ({name:'autopostback', label:'Auto PostBack', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_multiselectdropdownbox"] = z;
    var z = "Subroutine ctl_multiselectfieldsetbtns(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim dftVal As String\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "    Dim Values As StRiNg\xFE";
    z += "\xFE";
    z += "    AdditionalAttributes = @AddParsley(Column, AdditionalAttributes)\xFE";
    z += "\xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"addIfNotInList: {}, value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"`  \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', True /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    if genCode Then\xFE";
    z += "        Html = []\xFE";
    z += "        If doKOBinding Then dftVal = 'null' Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"''\"\xFE";
    z += "\xFE";
    z += "        If Column.reffile Then\xFE";
    z += "            HTML[-1] = `Dim refList As Array = @jsb_bf.getRefValuesBySelect(\"`:Column.reffile:`\", \"`:Column.refpk:`\", \"`:Column.refdisplay:`\", \"`:Column.refwhere:`\", `:(Column.align = \"right\"):`, `:Val(Column.oktocache):`)`\xFE";
    z += "            HTML[-1] = `If refList Then`\xFE";
    z += "            HTML[-1] = `   ctlHtml = @jsb_html.multiselectfieldsetbtns(\"`:ID:`\", refList, `:dftVal:`, False /* readOnly */, `:AdditionalAttributes:`, `:Column.multiValuedData:` /* multiValuedData */)`\xFE";
    z += "            HTML[-1] = `Else`\xFE";
    z += "            HTML[-1] = `   ctlHtml = 'no ref list ' ;* No reference list is setup for \"`:ID:`\"`\xFE";
    z += "            HTML[-1] = `End If`\xFE";
    z += "\xFE";
    z += "        ElseIf Column.reflist Then\xFE";
    z += "            HTML[-1] = `ctlHtml = @jsb_html.multiselectfieldsetbtns(\"`:ID:`\", \"`:Replace(Column.reflist, '\"', '\\\\\"'):`\", `:dftVal:`, `:!Column.canedit:` /* readOnly */, `:AdditionalAttributes:`, True /* multiValuedData */)`\xFE";
    z += "\xFE";
    z += "        Else\xFE";
    z += "            Html[-1] = \"ctlHtml = 'no ref list ' ;* No reference list is setup\"\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "    Else\xFE";
    z += "        If doKOBinding Then DefaultValue = Null Else DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "\xFE";
    z += "        Values = @jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "        If isArray(Values) Then\xFE";
    z += "            Html = @jsb_html.multiselectfieldsetbtns(ID, VALUES, DefaultValue, Not(Column.canedit), AdditionalAttributes, Column.multiValuedData Or Column.reflist <> \"\")\xFE";
    z += "        Else\xFE";
    z += "            Html = ''\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine multiselectfieldsetbtns_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_multiselectfieldsetbtns"] = z;
    var z = "Subroutine ctl_Multiselectlistbox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "*\xFE";
    z += "* See if there is a RefFIle, and make a json array, or json callback\xFE";
    z += "* \xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim HoldBlanks As StRiNg\xFE";
    z += "    Dim Values As String\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        If doKOBinding Then\xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force Json To Array\xFE";
    z += "            // AdditionalAttributes[-1] = `data-bind=\"addIfNotInList: {}, value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`', css:  { onKOload: window.multiSelectReflectValues($element) }\"`\xFE";
    z += "            AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', True /* addIfNotInList */, \"window.multiSelectReflectValues($element)\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        If genCode Then\xFE";
    z += "            If doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            If AdditionalAttributes Then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            \xFE";
    z += "            If Column.reffile Then\xFE";
    z += "                Html = `ctlHtml = @jsb_html.multiSelectListBox(\"`:Id:`\", @jsb_bf.getRefValuesBySelect(\"`:Column.reffile:`\", \"`:Column.refpk:`\", \"`:Column.refdisplay:`\", \"`:Column.refwhere:`\", `:(Column.align = \"right\"):`, `:Val(Column.oktocache):`), `:dftVal:`, `:AdditionalAttributes:`)`\xFE";
    z += "            ElseIf Column.reflist Then\xFE";
    z += "                Html = `ctlHtml = @jsb_html.multiSelectListBox(\"`:Id:`\", \"`:Replace(Column.reflist, '\"', '\\\\\"'):`\", `:dftVal:`, `:AdditionalAttributes:`)`\xFE";
    z += "            Else\xFE";
    z += "                Html[-1] = \"ctlHtml = 'no ref list ' ;* No reference list is setup\"\xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            If Column.autopostback And Id Then Html := Crlf():`ctlHtml := @Script('$(\"#`:Id:`\").blur(function() { doJsbSubmit() });')`\xFE";
    z += "        Else\xFE";
    z += "            HoldBlanks = Column.notblank\xFE";
    z += "            Column.notblank = True\xFE";
    z += "            Values = @Jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "            Column.notblank = HoldBlanks\xFE";
    z += "            \xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewName)\xFE";
    z += "            \xFE";
    z += "            Html = @Jsb_html.multiSelectListBox(Id, Values, DefaultValue, @AddParsley(Column, AdditionalAttributes))\xFE";
    z += "            If Column.autopostback And Id Then Html = Html:@Script(`$('#`:Id:`').blur(function() { doJsbSubmit() });`)\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "    End Else\xFE";
    z += "        * Prevents change\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, Id, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine multiselectlistbox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "    viewModel.columns.push ({name:'autopostback', label:'Auto PostBack', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_multiselectlistbox"] = z;
    var z = "Subroutine ctl_passwordBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim DefaultValue As StRiNg\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "            // AdditionalAttributes[-1] = `data-bind=\"value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"`  \xFE";
    z += "            AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', False /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        AdditionalAttributes = @AddParsley(Column, AdditionalAttributes)\xFE";
    z += "\xFE";
    z += "        If genCode Then\xFE";
    z += "            if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            \xFE";
    z += "            Html = `ctlHtml = @jsb_html.PasswordBox(\"`:ID:`\", `:Row:`, false, `:AdditionalAttributes:`)` \xFE";
    z += "            If Column.mask Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").mask(\"`:Mid(Column.mask, InStr(Column.mask, \",\") +1):`\");')`\xFE";
    z += "            If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "        Else\xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "            Html = @jsb_html.PasswordBox(ID, DefaultValue, false, AdditionalAttributes)\xFE";
    z += "            If Column.mask Then Html = Html:@Script(`$(\"#`:ID:`\").mask(\"`:Mid(Column.mask, InStr(Column.mask, \",\") +1):`\");`)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "    End Else\xFE";
    z += "        call ctl_TextBox(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "End Sub"
    window.cached_jsb_ctls["ctl_passwordbox"] = z;
    window.cached_jsb_ctls["ctl_phonebox"] = "Subroutine ctl_PhoneBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE   // AdditionalAttributes[-1] = `data-parsley-type=\"phone\"`\xFE    Column.mask = '(999) 999-9999? x99999'\xFE    call ctl_TextBox(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFEEnd Subroutine\xFE\xFE";
    var z = "* ============================= CTLS =============================\xFE";
    z += "Subroutine ctl_popSelection(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "*\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim Values As StRiNg\xFE";
    z += "    Dim DefaultValue As StRiNg\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        If doKOBinding Then \xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "            // AdditionalAttributes[-1] = `data-bind=\"value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"` \xFE";
    z += "            AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', False /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        if genCode Then\xFE";
    z += "            if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "\xFE";
    z += "            HTML = `ctlHtml = @jsb_html.InputPopSelection(\"`:ID:`\", @jsb_bf.getRefValuesBySelect(\"`:Column.reffile:`\", \"`:Column.refpk:`\", \"`:Column.refdisplay:`\", \"`:Column.refwhere:`\", `:(Column.align = \"right\"):`, `:Val(Column.oktocache):`), `:dftVal:`, `:AdditionalAttributes:`, \"`:Column.popupwidth:`\", \"`:Column.popupheight:`\", \"`:Column.popuptitle:`\")`\xFE";
    z += "            If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "        else\xFE";
    z += "            Values = @jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "            \xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "\xFE";
    z += "            Html = @jsb_html.InputPopSelection(ID, VALUES, DefaultValue, @AddParsley(Column, AdditionalAttributes), Column.popupwidth, Column.popupheight, Column.popuptitle)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        end if\xFE";
    z += "\xFE";
    z += "    End Else\xFE";
    z += "        * Prevents change\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine popSelection_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "\xFE";
    z += "    viewModel.columns.push ({name:'autopostback', label:'Auto PostBack', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "\xFE";
    z += "    viewModel.columns.push ({name:'popuptitle', label:'Popup Title', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "    viewModel.columns.push ({name:'popupwidth', label:'Popup Width', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "    viewModel.columns.push ({name:'popupheight', label:'Popup Height', width:19, control:'textbox', canedit:true, notblank: false })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_popselection"] = z;
    var z = "Subroutine ctl_radioBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "*\xFE";
    z += "* See if there is a RefFIle, and make a json array, or json callback\xFE";
    z += "*\xFE";
    z += "    Dim DFTVAL As StRiNg\xFE";
    z += "    Dim VALUES As StRiNg\xFE";
    z += "    Dim DEFAULTVALUE As String\xFE";
    z += "\xFE";
    z += "    AdditionalAttributes = @AddParsley(Column, [])\xFE";
    z += "    \xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"addIfNotInList: {}, checked:$data['`:Column.name:`'], checked:$data['`:Column.name:`']?$data['`:Column.name:`']:`:IFF(Column.defaultvalue, Column.defaultvalue, 0):`, attr: { name: '`:Column.name:`' + $index() }\"` \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'checked', False /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */, True):`, attr: { name: '`:Column.name:`' + $index() }\"` \xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    If genCode Then \xFE";
    z += "        if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"''\"\xFE";
    z += "        \xFE";
    z += "        if Column.reflist Then\xFE";
    z += "            Html = `ctlHtml = @jsb_html.RadioBtns('`:ID:`', \"`:Replace(Column.reflist, '\"', '\\\\\"'):`\", `:dftVal:`, `:(!Column.canedit):`, `:AdditionalAttributes:`)`\xFE";
    z += "        Else\xFE";
    z += "            Html = `ctlHtml = @jsb_html.RadioBtns('`:ID:`', @jsb_bf.getRefValuesBySelect(\"`:Column.reffile:`\", \"`:Column.refpk:`\", \"`:Column.refdisplay:`\", \"`:Column.refwhere:`\", `:(Column.align = \"right\"):`, `:Val(Column.oktocache):`), `:dftVal:`, `:(!Column.canedit):`, `:AdditionalAttributes:`)`\xFE";
    z += "        end if\xFE";
    z += "        \xFE";
    z += "        If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "    else\xFE";
    z += "        Values = @jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            Html = @jsb_html.RadioBtns('', VALUES, null, (!Column.canedit), AdditionalAttributes)\xFE";
    z += "        else\xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "            Html = @jsb_html.RadioBtns(ID, VALUES, DefaultValue, (!Column.canedit), AdditionalAttributes)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$(\"[name='`:ID:`']\").change(function() { doJsbSubmit() });`)\xFE";
    z += "        end if\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine radioBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "    viewModel.columns.push ({name:'autopostback', label:'Auto PostBack', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_radiobox"] = z;
    var z = "Subroutine ctl_Slider(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim dftVal As String\xFE";
    z += "\xFE";
    z += "    If !Column.canedit Then AdditionalAttributes[-1] = \"readonly\"\xFE";
    z += "    AdditionalAttributes = @AddParsley(Column, AdditionalAttributes) ;* Force to be an Array[]\xFE";
    z += "    \xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        * AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`', attr: { name: '`:Column.name:`' + $index() }, css: { onKOload: window.slider_Change($element) }\"` \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', False /* addIfNotInList */, \"window.slider_Change($element)\" /* onload script */,  Nothing /* jsExtraFunctionParameters */, True):`, attr: { name: '`:Column.name:`' + $index() }\"` \xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        AdditionalAttributes = @jsb_bf.MergeAttribute('style', 'min-width: 200px', ';', AdditionalAttributes)\xFE";
    z += "        ID = \"\"\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    If genCode Then \xFE";
    z += "        Html = []\xFE";
    z += "        if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"''\"\xFE";
    z += "        Html[-1] = `ctlHtml = @jsb_html.Slider('`:ID:`', `:dftVal:`, `:Column.iminvalue:`, `:Column.imaxvalue:`, 1, `:AdditionalAttributes:`)`\xFE";
    z += "        \xFE";
    z += "    else\xFE";
    z += "        dftVal = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "        Html = @jsb_html.Slider(ID, dftVal, Column.iminvalue, Column.imaxvalue, 1, AdditionalAttributes)\xFE";
    z += "    end if\xFE";
    z += "\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine Slider_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    viewModel.columns.push ({name:'size', label:'Size', width:19, control:'textbox', canedit:true, default: 120 })\xFE";
    z += "    viewModel.columns.push ({name:'color', label:'Color', width:19, control:'textbox', canedit:true })\xFE";
    z += "    viewModel.columns.push ({name:'iminvalue', index:31, label:'int Min Vaue', width:\"12em\", control:'textbox', canedit:true, default: 0 })\xFE";
    z += "    viewModel.columns.push ({name:'imaxvalue', index:32, label:'int Max Value', width:\"12em\", control:'textbox', canedit:true, default: 100 })\xFE";
    z += "    viewModel.columns.push ({name:'units', index:33, label:'Units', width:\"12em\", control:'textbox', canedit:true, default: '' })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_slider"] = z;
    var z = "* ============================= CTLS =============================\xFE";
    z += "Subroutine ctl_sliderLabeled(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "*\xFE";
    z += "* See if there is a RefFIle, and make a json array, or json callback\xFE";
    z += "*\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "    Dim Values As StRiNg\xFE";
    z += "\xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        AdditionalAttributes = @jsb_bf.MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"value: $data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`', attr: { name: '`:Column.name:`' + $index() }, css: { onKOload: window.sliderLabeled_onLoad($element) }\"` ;* addIfNotInList: {}, \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', False /* addIfNotInList */, \"window.sliderLabeled_onLoad($element)\" /* onload script */,  Nothing /* jsExtraFunctionParameters */, True):`, attr: { name: '`:Column.name:`' + $index() }\"` \xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        AdditionalAttributes = @jsb_bf.MergeAttribute('style', 'min-width: 200px', ';', AdditionalAttributes)\xFE";
    z += "        ID = \"\"\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        if genCode Then\xFE";
    z += "            AdditionalAttributes = @AddParsley(Column, AdditionalAttributes)\xFE";
    z += "            if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            \xFE";
    z += "            if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            \xFE";
    z += "            If Column.reffile Then\xFE";
    z += "                HTML = `ctlHtml = @jsb_html.sliderLabeled(\"`:ID:`\", @jsb_bf.getRefValuesBySelect(\"`:Column.reffile:`\", \"`:Column.refpk:`\", \"`:Column.refdisplay:`\", \"`:Column.refwhere:`\", `:(Column.align = \"right\"):`, `:Val(Column.oktocache):`), `:dftVal:`, `:column.addBlank + 0:` /* addBlank */, False /* readOnly */, `:AdditionalAttributes:`, `:Column.multiValuedData:` /* multiValuedData */)`\xFE";
    z += "            Else\xFE";
    z += "                HTML = `ctlHtml = @jsb_html.sliderLabeled(\"`:ID:`\", \"`:Replace(Column.reflist, '\"', '\\\\\"'):`\", `:dftVal:`, `:column.addBlank + 0:` /* addBlank */, False /* readOnly */, `:AdditionalAttributes:`, True /* multiValuedData */)`\xFE";
    z += "            End If\xFE";
    z += "        \xFE";
    z += "        Else\xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "            AdditionalAttributes = @AddParsley(Column, AdditionalAttributes)\xFE";
    z += "            \xFE";
    z += "            Values = @jsb_mdl.mdlGetRefValues(ProjectName, Column, Row)\xFE";
    z += "            Html = @jsb_html.sliderLabeled(ID, VALUES, DefaultValue, Column.addBlank, False, AdditionalAttributes, Column.multiValuedData Or Column.reflist <> \"\")\xFE";
    z += "        End If\xFE";
    z += "    End Else\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "* ============================= CTLS =============================\xFE";
    z += "Subroutine sliderLabeled_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_sliderlabeled"] = z;
    var z = "\xFE";
    z += "* ============================= CTLS =============================\xFE";
    z += "Subroutine ctl_smartComboBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "*\xFE";
    z += "\xFE";
    z += "    column.control = \"combobox\"\xFE";
    z += "    column.savenewvalues = true\xFE";
    z += "    call ComboBox(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    \xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine smartComboBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    viewModel.columns.push ({name:'autopostback', label:'Auto PostBack', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "    viewModel.columns.push ({name:'multiselect', label:'Allow Multi Selection', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "       \xFE";
    z += "    Call push_RefExtraMeta(row, viewmodel)\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_smartcombobox"] = z;
    var z = "Subroutine ctl_TextBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim DEFAULTVALUE As String\xFE";
    z += "    Dim MOBILEPAD As String\xFE";
    z += "\xFE";
    z += "    if !genCode And !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "    \xFE";
    z += "    if Column.linecnt > 1 Then\xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"style\", \"width: 100%\", \";\", AdditionalAttributes)\xFE";
    z += "    Else\xFE";
    z += "        AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes)\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"`  \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', False /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        AdditionalAttributes = @AddParsley(Column, AdditionalAttributes) ;* Force to be an Array[]\xFE";
    z += "        \xFE";
    z += "        if Column.datatype = \"integer\" then\xFE";
    z += "            AdditionalAttributes[-1] = `data-parsley-type=\"integer\"`\xFE";
    z += "            if !InStr(AdditionalAttributes, \"placeholder\") Then AdditionalAttributes[-1] = `placeholder=\"please enter an integer number\"`\xFE";
    z += "            AdditionalAttributes[-1] = `type=\"number\"`\xFE";
    z += "        end if\xFE";
    z += "\xFE";
    z += "        if Column.datatype = \"double\" then\xFE";
    z += "            AdditionalAttributes[-1] = `data-parsley-type=\"number\"`\xFE";
    z += "            if !InStr(AdditionalAttributes, \"placeholder\") Then AdditionalAttributes[-1] = `placeholder=\"please enter a decimal number\"`\xFE";
    z += "            * AdditionalAttributes[-1] = `pattern=\"[\\d]+([\\.][\\d]+)?\"`\xFE";
    z += "            AdditionalAttributes[-1] = `type=\"tel\"`\xFE";
    z += "        end if\xFE";
    z += "\xFE";
    z += "        MobilePad = Column.mobilepad\xFE";
    z += "        if MobilePad And Column.linecnt <= 1 then\xFE";
    z += "            if MobilePad = 'custom' then\xFE";
    z += "                MobilePad = Column.custompad\xFE";
    z += "                if left(MobilePad, 2) <> \"[[\" or Right(MobilePad, 2) <> \"]]\" then Print \"Your \":viewName:\" \":id:\" field has has a malformed custom pad: \": MobilePad\xFE";
    z += "            else\xFE";
    z += "                if Column.datatype = \"integer\" Then\xFE";
    z += "                    locate MobilePad in ['integer', 'integer+', ''] else Print \"Your \":viewName:\" \":id:\" field has an integer datatype and your are using a non-integer keyboard: \": MobilePad\xFE";
    z += "                    AdditionalAttributes = @MergeAttribute(\"type\", `number`, \";\", AdditionalAttributes)\xFE";
    z += "                    \xFE";
    z += "                elseif Column.datatype = \"double\" Then\xFE";
    z += "                    locate MobilePad in ['real', 'integer', 'integer+', ''] else Print \"Your \":viewName:\" \":id:\" field has an double datatype and your are using a non-integer keyboard: \": MobilePad\xFE";
    z += "                end if\xFE";
    z += "            end if\xFE";
    z += "        end if\xFE";
    z += "            \xFE";
    z += "        If genCode Then if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "\xFE";
    z += "        if Column.linecnt > 1 Then\xFE";
    z += "            If genCode Then\xFE";
    z += "                Html = `ctlHtml = @jsb_html.TextArea(\"`:ID:`\",`:Row:`, `:Column.linecnt+0:`, \"\", `:AdditionalAttributes:`)`\xFE";
    z += "            Else\xFE";
    z += "\xFE";
    z += "                Html = @jsb_html.TextArea(ID, DefaultValue, Column.linecnt, \"\", AdditionalAttributes)\xFE";
    z += "            End If\xFE";
    z += "        Else\xFE";
    z += "            If genCode Then\xFE";
    z += "                if Column.datatype = \"integer\" Then\xFE";
    z += "                    Html = `ctlHtml = @jsb_html.IntegerBox(\"`:ID:`\", `:Row:`, false, `:AdditionalAttributes:`, '`:Column.iminvalue:`', '`:Column.imaxvalue:`')`\xFE";
    z += "                    \xFE";
    z += "                elseif Column.datatype = \"double\" Then\xFE";
    z += "                    Html = `ctlHtml = @jsb_html.DecimalBox(\"`:ID:`\", `:Row:`, false, `:AdditionalAttributes:`, '`:Column.xminvalue:`', '`:Column.xmaxvalue:`')`\xFE";
    z += "                    \xFE";
    z += "                else\xFE";
    z += "                    Html = `ctlHtml = @jsb_html.TextBox(\"`:ID:`\", `:Row:`, false, `:AdditionalAttributes:`, \"`:MobilePad:`\")`\xFE";
    z += "                end if\xFE";
    z += "            Else\xFE";
    z += "                if Column.datatype = \"integer\" Then\xFE";
    z += "                    Html = @jsb_html.IntegerBox(ID, DefaultValue, false, AdditionalAttributes, Column.iminvalue, Column.imaxvalue)\xFE";
    z += "                    \xFE";
    z += "                elseif Column.datatype = \"double\" Then\xFE";
    z += "                    Html = @jsb_html.DecimalBox(ID, DefaultValue, false, AdditionalAttributes, Column.xminvalue, Column.xmaxvalue)\xFE";
    z += "                    \xFE";
    z += "                else\xFE";
    z += "                    Html = @jsb_html.TextBox(ID, DefaultValue, false, AdditionalAttributes, MobilePad)\xFE";
    z += "                end if\xFE";
    z += "            End If\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        If genCode Then\xFE";
    z += "            If Column.mask Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").mask(\"`:Mid(Column.mask, InStr(Column.mask, \",\") +1):`\");')`\xFE";
    z += "            If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "        Else\xFE";
    z += "            If Column.mask Then Html = Html:@Script(`$(\"#`:ID:`\").mask(\"`:Mid(Column.mask, InStr(Column.mask, \",\") +1):`\");`)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        End If\xFE";
    z += "    End Else\xFE";
    z += "        if Column.linecnt > 1 Then\xFE";
    z += "            AdditionalAttributes[-1] = \"readonly\"\xFE";
    z += "            If genCode Then\xFE";
    z += "                if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "                Html = `ctlHtml = @jsb_html.TextArea(\"`:ID:`\", `:Row:`, `:Column.linecnt:`, \"\", `:AdditionalAttributes:`)`\xFE";
    z += "            Else\xFE";
    z += "                Html = @jsb_html.TEXTAREA(ID, DefaultValue, Column.linecnt, \"\", AdditionalAttributes)\xFE";
    z += "            End If\xFE";
    z += "        else\xFE";
    z += "            Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "        end if\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine TextBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    viewModel.columns.push ({name:'linecnt', label:'Lines', width:19, control:'textbox', canedit:true, defaultvalue: 1 })\xFE";
    z += "    viewModel.columns.push ({name:'mobilepad', label:'Mobile Pad', width:19, control:'dropdownbox', canedit:true, defaultvalue: \"full\", addBlank: true, reflist: \"hex;hex+;integer;integer+;real;full;custom\" })\xFE";
    z += "    viewModel.columns.push ({name:'custompad', label:'Custom Pad', width:19, control:'textbox', canedit:true, tooltip: \"[['a', 'Cancel', 'Accept'], ['b', 'Clear', 'Delete']]\", display:\"gridhidden\", defaultvalue:\"[['1','2','3','4','.','Accept'],['5','6','7','8','-','Cancel'],['9','0','A','B','_','Clear'],['C','D','E','F','Space','Delete']]\" })\xFE";
    z += "    \xFE";
    z += "    // options.layout = [['1', '2', '3', '4', '.', 'Accept'], ['5', '6', '7', '8', '-', 'Cancel'], ['9', '0', 'A', 'B', '_', 'Clear'], ['C', 'D', 'E', 'F', 'Space', 'Delete']]\xFE";
    z += "\xFE";
    z += "    viewModel.columns.push ({name:'regx', index:33, label:'RegX', width:\"12em\", control:'comboBox', canedit:true, display:\"gridhidden\", \xFE";
    z += "        reflist:'mm/dd/yy,^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$;yyyy/mm/dd,^(19|20)\\\\d\\\\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$;ZipCode,^\\\\d{5}(?:[-\\\\s]\\\\d{4})?$;UserName,/^[a-z0-9_-]{3,16}$/;Password,/^[a-z0-9_-]{6,18};HexValue,/^#?([a-f0-9]{6}|[a-f0-9]{3})$/;E-Mail,/^([a-z0-9_\\\\.-]+)@([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})$/;URL,/^(https?:\\\\/\\\\/)?([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})([\\\\/\\\\w \\\\.-]*)*\\\\/?$/;IP,/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;SSN,^\\\\d{3}-?\\\\d{2}-?\\\\d{4}$;Phone,^(?:(?:\\\\+?1\\\\s*(?:[.-]\\\\s*)?)?(?:\\\\(\\\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\\\s*\\\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\\\s*(?:[.-]\\\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\\\s*(?:[.-]\\\\s*)?([0-9]{4})(?:\\\\s*(?:#|x\\\\.?|ext\\\\.?|extension)\\\\s*(\\\\d+))?$'\xFE";
    z += "    })\xFE";
    z += "\xFE";
    z += "    if row.datatype = \"integer\" then\xFE";
    z += "        viewModel.columns.push ({name:'iminvalue', index:31, label:'int Min Vaue', width:\"12em\", control:'textbox', canedit:true, display:\"gridhidden\" })\xFE";
    z += "        viewModel.columns.push ({name:'imaxvalue', index:32, label:'int Max Value', width:\"12em\", control:'textbox', canedit:true, display:\"gridhidden\" })\xFE";
    z += "        remove row, 'xminvalue'\xFE";
    z += "        remove row, 'xminvalue'\xFE";
    z += "\xFE";
    z += "    elseif row.datatype = \"double\" then\xFE";
    z += "        viewModel.columns.push ({name:'xminvalue', index:31, label:'Min Vaue', width:\"12em\", control:'textbox', canedit:true, display:\"gridhidden\" })\xFE";
    z += "        viewModel.columns.push ({name:'xmaxvalue', index:32, label:'Max Value', width:\"12em\", control:'textbox', canedit:true, display:\"gridhidden\" })\xFE";
    z += "        remove row, 'iminvalue'\xFE";
    z += "        remove row, 'iminvalue'\xFE";
    z += "\xFE";
    z += "    else\xFE";
    z += "        remove row, 'iminvalue'\xFE";
    z += "        remove row, 'iminvalue'\xFE";
    z += "        remove row, 'xminvalue'\xFE";
    z += "        remove row, 'xminvalue'\xFE";
    z += "    end if\xFE";
    z += "\xFE";
    z += "    viewModel.columns.push ({name:'regxtext', index:34, label:'Reg X Text', width:\"12em\", control:'textbox', canedit:true, display:\"gridhidden\" })\xFE";
    z += "    \xFE";
    z += "    // https://igorescobar.github.io/jQuery-Mask-Plugin/\xFE";
    z += "    viewModel.columns.push ({name:'mask', index:33, label:'Mask', width:\"12em\", control:'comboBox', canedit:true, display:\"gridhidden\", tooltip:' Use S(a-z) A(a-z,0-9) 0(req digit) 9(opt digit) #(any digits)',\xFE";
    z += "        reflist:'mm/dd/yyyy,00/00/0000;yyyy-mm-dd,0000-00-00;ZipCode,00000;SSN,000-00-0000;Phone,(000) 000-0000'\xFE";
    z += "    })\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_textbox"] = z;
    var z = "Subroutine ctl_TimeBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim DefaultValue As StRiNg\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            AdditionalAttributes = @MergeAttribute(\"\", \"\", \";\", AdditionalAttributes) ;* Force JSON to array\xFE";
    z += "            // AdditionalAttributes[-1] = `data-bind=\"value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"`  \xFE";
    z += "            AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', False /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "            AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        AdditionalAttributes = @AddParsley(Column, AdditionalAttributes)\xFE";
    z += "\xFE";
    z += "        If genCode Then \xFE";
    z += "            if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "            if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "            Html = `ctlHtml = @jsb_html.TimeBox(\"`:ID:`\", `:dftVal:`, `:Not(Column.canedit):`, `:AdditionalAttributes:`)`\xFE";
    z += "            If Column.autopostback And ID Then Html := CRLF():`ctlHtml := @Script('$(\"#`:ID:`\").change(function() { doJsbSubmit() });')`\xFE";
    z += "        else\xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "            Html = @jsb_html.TimeBox(ID, DefaultValue, Not(Column.canedit), AdditionalAttributes)\xFE";
    z += "            If Column.autopostback And ID Then Html = Html:@Script(`$('#`:ID:`').change(function() { doJsbSubmit() });`)\xFE";
    z += "        end if\xFE";
    z += "    Else\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "    return \xFE";
    z += "End Sub"
    window.cached_jsb_ctls["ctl_timebox"] = z;
    var z = "Subroutine ctl_UploadBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim DEFAULTVALUE As StRiNg\xFE";
    z += "    Dim LBLADDITIONALATTRIBUTES As Variable\xFE";
    z += "    Dim CTLADDITIONALATTRIBUTES As Variable\xFE";
    z += "\xFE";
    z += "    if !genCode And !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "    \xFE";
    z += "    If Column.canedit Then\xFE";
    z += "        lblAdditionalAttributes = @AddParsley(Column, lblAdditionalAttributes) ;* Force to be an Array[]\xFE";
    z += "        \xFE";
    z += "        if doKOBinding Then \xFE";
    z += "            lblAdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'text', False /* addIfNotInList */, Nothing /* onload jsFunctionName */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "            lblAdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "            ID = ''\xFE";
    z += "            \xFE";
    z += "            //CtlAdditionalAttributes = koLoad(Column.name, Column.defaultvalue, 'fileinput', False /* addIfNotInList */, Nothing /* onload jsFunctionName */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "            CtlAdditionalAttributes = [`data-bind=\"attr: {name: 'KO_`:NiceName(Column.name):`_' + $index() }\"`]\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        If genCode Then\xFE";
    z += "            if lblAdditionalAttributes then lblAdditionalAttributes = \"[`\":Join(lblAdditionalAttributes, \"`,`\"):\"`]\" Else lblAdditionalAttributes = \"[]\"\xFE";
    z += "            if CtlAdditionalAttributes then CtlAdditionalAttributes = \"[`\":Join(CtlAdditionalAttributes, \"`,`\"):\"`]\"\xFE";
    z += "            Html = `ctlHtml := @jsb_html.UploadBox(\"`:ID:`\", `:Row:`, `:Column.autopostback + 0:` /* autopostback */, false /* allowMultipleFiles */, '`:Column.mimetypes:`', `:lblAdditionalAttributes:`, `:CtlAdditionalAttributes:`)`\xFE";
    z += "        Else\xFE";
    z += "            If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "            Html = @jsb_html.UploadBox(ID, DefaultValue, `:Column.autopostback + 0:` /* autopostback */, false /* allowMultipleFiles */, Column.mimetypes, lblAdditionalAttributes, CtlAdditionalAttributes)\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "    End Else\xFE";
    z += "        Call @jsb_ctls.ctl_Label(ProjectName, ID, Column, Row, Html, doKOBinding, lblAdditionalAttributes, genCode, viewName)\xFE";
    z += "    End If\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine UploadBox_ExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    viewModel.columns.push ({name:'storagefile', label:'Storage Path', width:19, control:'textbox', canedit:true, default: 1 })\xFE";
    z += "    viewModel.columns.push ({name:'mimetypes', label:'mimetypes', width:19, control:'combobox', canedit:true, reflist: \"audio/*;video/*;image/*\" })\xFE";
    z += "\xFE";
    z += "    viewModel.columns.push ({name:'appenddate', label:'Append Date', width:19, control:'checkbox', canedit:true, required: false, notblank: false, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "    viewModel.columns.push ({name:'registeraccount', label:'Register as Act', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "    viewModel.columns.push ({name:'filenameprefix', label:'FileName Prefix', width:19, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "\xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_uploadbox"] = z;
    var z = "Subroutine ctl_UrlBox(ByVal ProjectName As String, ByVal ID As String, ByVal Column As JSON, ByVal Row As JSON, ByRef Html As Variable, ByVal doKOBinding As Boolean, ByVal AdditionalAttributes As Variable, ByVal genCode As Boolean, ByVal viewName As String)\xFE";
    z += "    Dim dftVal As StRiNg\xFE";
    z += "    Dim DefaultValue As String\xFE";
    z += "\xFE";
    z += "    If Column.canedit Then \xFE";
    z += "        AdditionalAttributes[-1] = `data-parsley-type=\"url\"`\xFE";
    z += "        call ctl_TextBox(ProjectName, ID, Column, Row, Html, doKOBinding, AdditionalAttributes, genCode, viewName)\xFE";
    z += "        Return\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    if doKOBinding Then \xFE";
    z += "        // AdditionalAttributes[-1] = `data-bind=\"value:$data['`:Column.name:`'], value:$data['`:Column.name:`']?$data['`:Column.name:`']:'`:Column.defaultvalue:`'\"`  \xFE";
    z += "        AdditionalAttributes[-1] = koLoad(Column.name, Column.defaultvalue, 'value', False /* addIfNotInList */, \"\" /* onload script */,  Nothing /* jsExtraFunctionParameters */)\xFE";
    z += "        AdditionalAttributes[-1] = `class='knockOutCtl'`\xFE";
    z += "        ID = ''\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    If genCode Then \xFE";
    z += "        if AdditionalAttributes then AdditionalAttributes = \"[`\":Join(AdditionalAttributes, \"`,`\"):\"`]\" Else AdditionalAttributes = \"[]\"\xFE";
    z += "        if doKOBinding Then dftVal = Null Else dftVal = getDefaultFmt(Row, Column.defaultvalue, Column.name)\xFE";
    z += "        HTML = `ctlHtml = @jsb_html.Anchor(\"`:ID:`\", `:dftVal:`, `:dftVal:`, `:AdditionalAttributes:`)`\xFE";
    z += "    else\xFE";
    z += "        If !doKOBinding Then DefaultValue = @getDefaultValue(Row[Column.name], Column.defaultvalue, Column.name, viewname)\xFE";
    z += "        HTML = @jsb_html.Anchor(ID, DefaultValue, DefaultValue, AdditionalAttributes)\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    Return   \xFE";
    z += "End Subroutine"
    window.cached_jsb_ctls["ctl_urlbox"] = z;
    var z = "Sub _AddParsley()\xFE";
    z += "End Sub\xFE";
    z += "\xFE";
    z += "Function AddParsley(ByVal Column As Json, ByVal AdditionalAttributes As Variable) As Variable\xFE";
    z += "    Dim ParsleyNeeded As Boolean\xFE";
    z += "    Dim Attributes As Variable\xFE";
    z += "\xFE";
    z += "    Attributes = AdditionalAttributes\xFE";
    z += "    if !Attributes Then\xFE";
    z += "        Attributes = []\xFE";
    z += "    Else If TypeOf(Attributes) <> \"Array\" Then\xFE";
    z += "        Attributes = @jsb_bf.MergeAttribute('', '', '', Attributes)\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    If Column.tooltip Then \xFE";
    z += "        if !InStr(Attributes, \"title\") Then Attributes[-1] = `title=\"`:Column.tooltip:`\"`\xFE";
    z += "        if !InStr(Attributes, \"placeholder\") Then Attributes[-1] = `placeholder=\"`:Column.tooltip:`\"`\xFE";
    z += "    ElseIf Column.suppresslabel Then\xFE";
    z += "       if !InStr(Attributes, \"title\") Then Attributes[-1] = `title=\"`:Column.label:`\"`\xFE";
    z += "       if !InStr(Attributes, \"placeholder\") Then  Attributes[-1] = `placeholder=\"`:Column.label:`\"`\xFE";
    z += "    ElseIf Column.label Then\xFE";
    z += "        if !InStr(Attributes, \"placeholder\") Then Attributes[-1] = `placeholder=\"`:Column.label:`\"`\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    ParsleyNeeded = Column.required Or Column.notblank Or Column.iminvalue <> \"\" Or Column.imaxvalue <> \"\" Or Column.xminvalue <> \"\" Or Column.xmaxvalue <> \"\" Or Column.regx <> \"\" \xFE";
    z += "    If Not(ParsleyNeeded) Then Return Attributes\xFE";
    z += "\xFE";
    z += "    Attributes[-1] = [`parsley-trigger=\"change focusout\"`]\xFE";
    z += "    If Column.required Or Column.notblank Then Attributes[-1] = `required`\xFE";
    z += "    \xFE";
    z += "    if Column.datatype = \"integer\" then\xFE";
    z += "        If Len(Column.iminvalue) Then Attributes[-1] = `min=\"`:Column.iminvalue:`\"` \xFE";
    z += "        If Len(Column.imaxvalue) Then Attributes[-1] = `max=\"`:Column.imaxvalue:`\"` \xFE";
    z += "\xFE";
    z += "    elseif Column.datatype = \"double\" then\xFE";
    z += "        If Column.xminvalue Then Attributes[-1] = `min=\"`:Column.xminvalue:`\"`\xFE";
    z += "        If Column.xmaxvalue Then Attributes[-1] = `max=\"`:Column.xmaxvalue:`\"`\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    If Column.regx Then \xFE";
    z += "        Attributes[-1] = `pattern=\"`:Mid(Column.regx, InStr(Column.regx, \",\") + 1):`\"`\xFE";
    z += "        If Column.regxtext Then Attributes[-1] = `data-parsley-error-message=\"`:Column.regxtext:`\"`\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    Attributes = @jsb_bf.MergeAttribute('onchange', 'parsleyReset(this)', ';', Attributes)\xFE";
    z += "\xFE";
    z += "    Return Attributes\xFE";
    z += "End Function"
    window.cached_jsb_ctls["_addparsley"] = z;
    var z = "Sub _getDefaultFmt\xFE";
    z += "End Sub\xFE";
    z += "\xFE";
    z += "function getDefaultFmt(ByVal Row As String, ByVal defaultValue As String, ByVal columnName As String) As String\xFE";
    z += "    Dim defaultValues As Array\xFE";
    z += "    Dim r As Array\xFE";
    z += "    Dim isExpression As Boolean\xFE";
    z += "    Dim I As Integer\xFE";
    z += "    Dim funcName As String\xFE";
    z += "    Dim extra As String\xFE";
    z += "    Dim newDefaultValue As String\xFE";
    z += "    Dim mRow As String\xFE";
    z += "    Dim Q As String\xFE";
    z += "    Dim ldftVal As String\xFE";
    z += "\xFE";
    z += "    if !defaultValue then return Row:\"\"\xFE";
    z += "    \xFE";
    z += "    // Check for {xxx} substituions\xFE";
    z += "    isExpression = InStr(defaultValue, \"{\") Or InStr(defaultValue, \"(\") Or InStr(defaultValue, \"+\") Or InStr(defaultValue, \"-\") Or InStr(defaultValue, \"/\") Or InStr(defaultValue, \"*\") Or InStr(defaultValue, \":\") \xFE";
    z += "    defaultValues = SPlit(defaultValue, \"{\")\xFE";
    z += "    r = [defaultValues[1]]\xFE";
    z += "    for I = 2 to UBound(defaultValues)\xFE";
    z += "        funcName = ltrim(rtrim(defaultValues[I]))\xFE";
    z += "        funcName = Field(funcName, \"}\", 1)\xFE";
    z += "        if left(funcName, 1) = \"@\" then funcName = mid(funcName, 2)\xFE";
    z += "        \xFE";
    z += "        If InStr(funcName, \"(\") Then\xFE";
    z += "            extra = \"(\":DropLeft(funcName, \"(\")\xFE";
    z += "            funcName = Field(funcName, \"(\", 1)\xFE";
    z += "        Else\xFE";
    z += "            extra = \"\"\xFE";
    z += "        end if\xFE";
    z += "\xFE";
    z += "        select case lcase(funcName)\xFE";
    z += "            Case \"objectname\", \"viewname\"\xFE";
    z += "                newDefaultValue = \"'\":columnName:\"'\"\xFE";
    z += "                \xFE";
    z += "            Case \"niceobjectname\", \"niceviewname\"\xFE";
    z += "                newDefaultValue = \"'\":@NiceName(columnName):\"'\"\xFE";
    z += "                \xFE";
    z += "            Case \"paramvar\",\"@param\"\xFE";
    z += "                newDefaultValue = \"@ParamVar\":extra\xFE";
    z += "                \xFE";
    z += "            Case \"sessionvar\", \"session\"\xFE";
    z += "                newDefaultValue = \"@SessionVar\":extra\xFE";
    z += "                \xFE";
    z += "            Case \"applicationvar\", \"application\"\xFE";
    z += "                newDefaultValue = \"@ApplicationVar\":extra\xFE";
    z += "                \xFE";
    z += "            Case \"queryvar\", \"urlparam\", \"urlvar\", \"param\"\xFE";
    z += "                newDefaultValue = \"@QueryVar\":extra\xFE";
    z += "                \xFE";
    z += "            case \"lastvalue\"\xFE";
    z += "                newDefaultValue = \"@session('LastValue:\":columnName:\"')\"\xFE";
    z += "\xFE";
    z += "            case \"time\"\xFE";
    z += "                newDefaultValue = \"Time(Time())\"          \xFE";
    z += "\xFE";
    z += "            case \"itime\"\xFE";
    z += "                newDefaultValue = \"Time()\"\xFE";
    z += "\xFE";
    z += "            case \"timestamp\", \"now\"\xFE";
    z += "                newDefaultValue = \"Now()\"            \xFE";
    z += "\xFE";
    z += "            Case \"yy\"\xFE";
    z += "                newDefaultValue = \"Mid(Date(Date()), 3, 2)\"\xFE";
    z += "                \xFE";
    z += "            Case \"yyyy\"\xFE";
    z += "                newDefaultValue = \"Theyear(Date())\"\xFE";
    z += "                \xFE";
    z += "            Case \"mm\"\xFE";
    z += "                newDefaultValue = \"Themonth(Date())\"\xFE";
    z += "                \xFE";
    z += "            Case \"dd\"\xFE";
    z += "                newDefaultValue = \"Theday(Date())\"\xFE";
    z += "                \xFE";
    z += "            case \"date\"\xFE";
    z += "                newDefaultValue = \"Date(Date())\"          \xFE";
    z += "\xFE";
    z += "            case \"idate\"\xFE";
    z += "                newDefaultValue = \"Date()\"  \xFE";
    z += "\xFE";
    z += "            case \"datetime\"\xFE";
    z += "                newDefaultValue = \"DateTime()\"  \xFE";
    z += "\xFE";
    z += "            case \"timedate\"\xFE";
    z += "                newDefaultValue = \"TimeDate()\"    \xFE";
    z += "\xFE";
    z += "            case \"guid\"\xFE";
    z += "                newDefaultValue = \"Guid()\"    \xFE";
    z += "\xFE";
    z += "            case \"username\"\xFE";
    z += "                newDefaultValue = \"@UserName\"    \xFE";
    z += "\xFE";
    z += "            case else\xFE";
    z += "                // Assumed to be a column name\xFE";
    z += "                mRow = Field(Row, \"[\", 1)\xFE";
    z += "                newDefaultValue = mRow:\"['\":funcName:\"']\"\xFE";
    z += "        end select\xFE";
    z += "        \xFE";
    z += "        R[-1] = `IFF(`:Row:`, `:Row:`, `:newDefaultValue:`)`\xFE";
    z += "    Next\xFE";
    z += "    newDefaultValue = Join(R, \"\")\xFE";
    z += "    \xFE";
    z += "    Q = \"\"\xFE";
    z += "    if !isExpression Then\xFE";
    z += "        newDefaultValue = defaultValue\xFE";
    z += "        ldftVal = lcase(defaultValue)\xFE";
    z += "    \xFE";
    z += "        if isNumeric(newDefaultValue) Then\xFE";
    z += "        ElseIf ldftVal = 'false' or ldftVal = 'true' or ldftVal = 'null' then\xFE";
    z += "        Else if Left(newDefaultValue, 1) = \"'\" and Right(newDefaultValue,1) = \"'\" Then\xFE";
    z += "        Else if Left(newDefaultValue, 1) = '\"' and Right(newDefaultValue,1) = '\"' Then\xFE";
    z += "        Else if Left(newDefaultValue, 1) = \"`\" and Right(newDefaultValue,1) = \"`\" Then\xFE";
    z += "    \xFE";
    z += "        elseif !InStr(newDefaultValue, '`') Then\xFE";
    z += "            Q = '`'\xFE";
    z += "        Elseif !InStr(newDefaultValue, \"'\") Then\xFE";
    z += "            Q = \"'\"\xFE";
    z += "        Elseif !InStr(newDefaultValue, '\"') Then\xFE";
    z += "            Q = '\"'\xFE";
    z += "        Else\xFE";
    z += "            Alert('Your default value for ':newDefaultValue:' contains both types of quotes.')\xFE";
    z += "        end if\xFE";
    z += "    end if\xFE";
    z += "    \xFE";
    z += "    Return `IFF(`:Row:`, `:Row:`, `:Q:newDefaultValue:Q:`)`\xFE";
    z += "end function"
    window.cached_jsb_ctls["_getdefaultfmt"] = z;
    var z = "sub _json_setup\xFE";
    z += "    * $options aspxc-\xFE";
    z += "end Sub\xFE";
    z += "\xFE";
    z += "function json_setup(ByVal ProjectName As String, ByVal ID As String, ByVal Column As Json, ByVal Row As Json, ByRef Errors As String, ByVal AdditionalAttributes As Variable, ByRef defaultRow As Json, ByRef dataSet As Array, ByRef Model As Json, ByRef editViewName As String) As Boolean\xFE";
    z += "    * $options aspxc-\xFE";
    z += "    \xFE";
    z += "    Dim ColumnDefs As Array\xFE";
    z += "    Dim Fhandle As FileHandle\xFE";
    z += "    Dim xModel As Json\xFE";
    z += "    Dim Def As Json\xFE";
    z += "    Dim js As Json\xFE";
    z += "    Dim inlineRow As Json\xFE";
    z += "    Dim SColumn As Json\xFE";
    z += "    Dim CDefs As String\xFE";
    z += "    Dim D As String\xFE";
    z += "\xFE";
    z += "    editViewName = \"\"\xFE";
    z += "\xFE";
    z += "    if Column.useview Then\xFE";
    z += "        ReadJSon xModel from @fHandle('dict', ProjectName), Column.useview Else \xFE";
    z += "            Errors = @Html('Unable to find view ':Column.useview:' for json_inline column ':Column.name)\xFE";
    z += "            Return False\xFE";
    z += "        End If\xFE";
    z += "        editViewName = PROJECTNAME:\"*\":Column.useview\xFE";
    z += "        ColumnDefs = xModel.columns\xFE";
    z += "\xFE";
    z += "    ElseIf Column.reflist Then\xFE";
    z += "        CDefs = Replace(Column.reflist, AM(), \"\")\xFE";
    z += "        ColumnDefs = JSon(\"{cdefs:[\" : CDefs : \"]}\").cdefs\xFE";
    z += "\xFE";
    z += "    End Else If Column.reffile <> \"\" Then\xFE";
    z += "        If lcase(Column.reffile) = \"jsb_jsondefs\" Then\xFE";
    z += "            Read CDefs From @fHandle(\"jsb_jsondefs\"), Column.refpk Then\xFE";
    z += "                CDefs = Replace(CDefs, AM(), \"\")\xFE";
    z += "                ColumnDefs = JSon(\"{cdefs:[\" : CDefs : \"]}\").cdefs\xFE";
    z += "            Else\xFE";
    z += "                Errors = @Html('Unable to find refpk ':Column.refpk:' in jsb_jsondefs column ':Column.name)\xFE";
    z += "                Return False\xFE";
    z += "            End If\xFE";
    z += "        Else\xFE";
    z += "            Open \"Dict\", Column.reffile To Fhandle else \xFE";
    z += "                Errors = @Html('Unable to find reffile ':Column.reffile:' for json_inline column ':Column.name)\xFE";
    z += "                Return False\xFE";
    z += "            End If\xFE";
    z += "            ColumnDefs = @getTableColumnDefs(Column.reffile, false, true)\xFE";
    z += "\xFE";
    z += "        End If\xFE";
    z += "    Else\xFE";
    z += "        Errors = @Html(\"Your json_inline for column \":column.name:\" isn't setup correctly.  There is no reflist.\")\xFE";
    z += "        Return False\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    Dim tstDataSet = Clone(Row[Column.name])\xFE";
    z += "    If TypeOf(tstDataSet) <> \"Array\" Then\xFE";
    z += "        If tstDataSet = \"\" Then tstDataSet = \"[]\"\xFE";
    z += "        If Left(tstDataSet, 1) = \"{\" Then tstDataSet = \"[\":tstDataSet:\"]\"\xFE";
    z += "        If Left(tstDataSet, 1) <> \"[\" Then tstDataSet = \"[]\"\xFE";
    z += "        tstDataSet = JSon(\"{dset:\" : tstDataSet : \"}\").dset \xFE";
    z += "    End If\xFE";
    z += "    DataSet = tstDataSet\xFE";
    z += "    @Session.myDataSet = DataSet\xFE";
    z += "    \xFE";
    z += "    defaultRow = {}\xFE";
    z += "    \xFE";
    z += "    // set default values in defaultRow and insure json_inline values are an array in the Row\xFE";
    z += "    For Each Def In ColumnDefs\xFE";
    z += "        if Def.name Then \xFE";
    z += "            D = Def.defaultvalue\xFE";
    z += "            if Def.control = \"json_inline\" Then\xFE";
    z += "                If Left(D,1) <> \"[\" Or Right(D,1) <> \"]\" Then \xFE";
    z += "                    if Left(D, 1) = \"{\" And Right(D,1) = \"}\" Then D = \"[\":D:\"]\" Else D = \"[]\"\xFE";
    z += "                End If\xFE";
    z += "                js = JSon(\"{array:\":D:\"}\")\xFE";
    z += "                D = js.array\xFE";
    z += "                for each inlineRow in DataSet\xFE";
    z += "                    if !isArray(inlineRow[Def.name]) Then inlineRow[Def.name] = []\xFE";
    z += "                Next\xFE";
    z += "            End If\xFE";
    z += "            defaultRow[Def.name] = D\xFE";
    z += "        end if\xFE";
    z += "    Next\xFE";
    z += "\xFE";
    z += "    If !Column.canedit Then\xFE";
    z += "        For Each SColumn In ColumnDefs\xFE";
    z += "            SColumn.canedit = false\xFE";
    z += "            SColumn.pickfunction = \"\"\xFE";
    z += "        Next\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    Model = {}\xFE";
    z += "\xFE";
    z += "    Model.columns = ColumnDefs\xFE";
    z += "    return True\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += ""
    window.cached_jsb_ctls["_json_setup"] = z;
    var z = "sub _koGridViewNColumns\xFE";
    z += "    * $options aspxc-\xFE";
    z += "end Sub\xFE";
    z += "\xFE";
    z += "function koGridViewNColumns(ByVal ProjectName As String, ByVal modelColumns As Array, ByVal parentModel As String, ByVal ID As String, ByVal removeRowText As String, ByVal canedit As Boolean, ByVal viewName As String) As String\xFE";
    z += "    * $options aspxc-\xFE";
    z += "    \xFE";
    z += "    Dim Html As Array\xFE";
    z += "    Dim CI As Integer\xFE";
    z += "    Dim CtlName As String\xFE";
    z += "    Dim L1 As StRiNg\xFE";
    z += "    Dim niceColumnName As String\xFE";
    z += "    Dim ctlHtml As String\xFE";
    z += "    Dim PickURL As String\xFE";
    z += "    Dim PID As String\xFE";
    z += "    Dim Column As Variable\xFE";
    z += "    Dim additionalAttrs As Variable\xFE";
    z += "\xFE";
    z += "    Html = []\xFE";
    z += "    Html[-1] = @Html(\"<tr>\")\xFE";
    z += "    \xFE";
    z += "    For Each Column, CI In modelColumns\xFE";
    z += "        If Column.display <> \"hidden\" And Column.name <> \"\" Then \xFE";
    z += "            CtlName = LCase(Column.control)\xFE";
    z += "            if CtlName = \"\" Then CtlName = \"textbox\"\xFE";
    z += "            \xFE";
    z += "            If CtlName = \"json_inline\" Then CtlName = \"json_popup\" \xFE";
    z += "\xFE";
    z += "            L1 = Column.label\xFE";
    z += "            niceColumnName = \"KO_\":@niceName(Column.name)\xFE";
    z += "\xFE";
    z += "            CtlName = \"jsb_ctls.ctl_\":CtlName\xFE";
    z += "            additionalAttrs = [`style='width:auto;`:Column.ctlstyle:`'`]\xFE";
    z += "            if Column.linecnt > 1 Then Column.linecnt = 1 \xFE";
    z += "            ctlHtml = \"\"\xFE";
    z += "\xFE";
    z += "            Call @CtlName(ProjectName, niceColumnName, Column, {}, ByRef ctlHtml, True, additionalAttrs, false /* genCode */, viewName)\xFE";
    z += "\xFE";
    z += "            If Column.pickfunction Then \xFE";
    z += "                PickURL = @DropIfRight(Column.pickfunction, \".page\")\xFE";
    z += "                PickURL = Replace(PickURL, \"{projectname}\", @UrlEncode(ProjectName))\xFE";
    z += "                If InStr(PickURL, \"//\") = 0 Then\xFE";
    z += "                    If Left(PickURL, 1) = \"/\" Then PickURL = Mid(PickURL, 2)\xFE";
    z += "                    PickURL = @jsbRestCall(PickURL)\xFE";
    z += "                End If\xFE";
    z += "                ctlHtml = @jsb_html.addPick(ctlHtml, niceColumnName, \"Pick \":L1, \"80%\", \"60%\", PickURL, Column.autopostback)\xFE";
    z += "            End If\xFE";
    z += "\xFE";
    z += "            Html[-1] = @Html(`<td><mdlctl id='ctl_`:niceColumnName:`'>`):ctlHtml:@Html(`</mdlctl></td>`)\xFE";
    z += "        End If\xFE";
    z += "    Next\xFE";
    z += "\xFE";
    z += "    if canedit then\xFE";
    z += "        if !removeRowText Then removeRowText = \"Remove\"\xFE";
    z += "        Html[-1] = @Html(`<td class=\"anchorRemoveGridTD\">`)\xFE";
    z += "\xFE";
    z += "        if parentModel Then\xFE";
    z += "            PID = @NiceName(Replace(parentModel, \"().\", \"_\")):ID\xFE";
    z += "            Html[-1] = @Html(`<a class=\"anchorRemoveGridRow\" data-bind=\"click: function() { if (confirm('Are you sure you want to `:removeRowText:` this row?')) koModel.`:PID:`_delRow($data, $index(), $parent) } \">`:removeRowText:`</a>`)\xFE";
    z += "        else\xFE";
    z += "            // Html[-1] = @Html(`<a class=\"anchorRemoveGridRow\" data-bind=\"click: function() { $root.`:PID:`_delRow\">`:removeRowText:`</a>`)\xFE";
    z += "            Html[-1] = @Html(`<a class=\"anchorRemoveGridRow\" data-bind=\"click: function() { if (confirm('Are you sure you want to `:removeRowText:` this row?')) koModel.`:ID:`_delRow($data, $index()) }\">`:removeRowText:`</a>`)\xFE";
    z += "        end if\xFE";
    z += "\xFE";
    z += "        Html[-1] = @Html(`</td>`)\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    Html[-1] = @Html(`</tr>`)\xFE";
    z += "\xFE";
    z += "    return Join(Html,\"\")\xFE";
    z += "End Function\xFE";
    z += ""
    window.cached_jsb_ctls["_kogridviewncolumns"] = z;
    var z = "Sub _koLoad\xFE";
    z += "End Sub\xFE";
    z += "\xFE";
    z += "function koLoad(ByVal ColumnName As String, ByVal DefaultValue As Boolean, byval valueField As String, ByVal addIfNotInList As Boolean, ByVal jsFunctionName As String, byval jsExtraFunctionParameters As String, optional byval dontCloseString) As String\xFE";
    z += "    Dim result As String\xFE";
    z += "\xFE";
    z += "    if Len(jsExtraFunctionParameters) then jsExtraFunctionParameters = ', ':jsExtraFunctionParameters\xFE";
    z += "    if !valueField Then valueField = 'value'\xFE";
    z += "    result = `data-bind=\"`\xFE";
    z += "    if addIfNotInList then result := `addIfNotInList: {}, `\xFE";
    z += "    result := `attr: {id: 'KO_`:NiceName(ColumnName):`_' + $index()}, `\xFE";
    z += "    // result := `attr: {id: 'KO_`:NiceName(ColumnName):`'}, `\xFE";
    z += "    if DefaultValue Then\xFE";
    z += "        result := valueField:`: $data['`:ColumnName:`'], `:valueField:`: $data['`:ColumnName:`']?$data['`:ColumnName:`']:'`:DefaultValue:`'`\xFE";
    z += "    Else\xFE";
    z += "        result := valueField:`: $data['`:ColumnName:`']`    \xFE";
    z += "    End If\xFE";
    z += "    result := \", valueUpdate:'blur'\"\xFE";
    z += "    if jsFunctionName Then \xFE";
    z += "        if InStr(jsFunctionName, \"(\") Then\xFE";
    z += "            Result := `, css: { `:NiceName(ColumnName):`_load: `:jsFunctionName:` }`\xFE";
    z += "        Else\xFE";
    z += "            Result := `, css: { `:NiceName(ColumnName):`_load: `:jsFunctionName:`($element, $data, $index`:jsExtraFunctionParameters:`) }`\xFE";
    z += "        end if\xFE";
    z += "    end if\xFE";
    z += "    if !dontCloseString then result := `\"`\xFE";
    z += "    return result\xFE";
    z += "end function"
    window.cached_jsb_ctls["_koload"] = z;
    var z = "Sub _push_RefExtraMeta\xFE";
    z += "End Sub\xFE";
    z += "\xFE";
    z += "* ============================= CTLS =============================\xFE";
    z += "Subroutine push_RefExtraMeta(ByRef Row As JSON, ByVal viewModel As JSON)\xFE";
    z += "    viewModel.columns.push ({name:'lblRef', label:'ref', control:'label', suppresslabel: true, fullline: true, defaultvalue:'The following fields are for your Reference file' })\xFE";
    z += "    viewModel.columns.push ({name:'reffile', index:21, label:'Ref File', width:\"12em\", control:'comboBox', autopostback: true, canedit:true, reffile:\"{listfiles}\" })\xFE";
    z += "    viewModel.columns.push ({name:'refsql', label:'Ref SQL', width:\"12em\", control:'textbox', canedit:true, notblank: false })\xFE";
    z += "    viewModel.columns.push ({name:'refpk', label:'Ref PK', width:\"12em\", control:'comboBox', canedit:true, reffile:\"{!reffile}\" })\xFE";
    z += "    viewModel.columns.push ({name:'refdisplay', label:'Ref display', width:\"12em\", control:'comboBox', canedit:true, reffile:\"{!reffile}\"  })\xFE";
    z += "    viewModel.columns.push ({name:'refwhere', label:'Ref Where', width:\"12em\", control:'textbox', canedit:true, notblank: false })\xFE";
    z += "    viewModel.columns.push ({name:'reflist', label:'Ref List', width:23, control:'textbox', canedit:true, tooltip: \"Display,Key;...\" })\xFE";
    z += "    viewModel.columns.push ({name:'multiValuedData', newlineprefix: true, label:'multi-Valued Data', control:'checkbox', canedit:true, defaultvalue:1, reflist: \"false,0;true,1\" })\xFE";
    z += "    viewModel.columns.push ({name:'addBlank', label:'Add Blank Value', control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" })\xFE";
    z += "    viewModel.columns.push ({name:'oktocache', label:'OK 2 Cache', control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" })\xFE";
    z += "    viewModel.columns.push ({name:'savenewvalues', label:'Save New Values', control:'checkbox', canedit:true, defaultvalue:false, reflist: \"false,0;true,1\" })\xFE";
    z += "\xFE";
    z += "    viewModel.columns.push ({name:'lblRef2', label:'ref2', control:'label', suppresslabel: true, fullline: true, defaultvalue:'' })\xFE";
    z += "    viewModel.columns.push ({})\xFE";
    z += "End Sub"
    window.cached_jsb_ctls["_push_refextrameta"] = z;
    var z = "Program _RepeaterFormBackground\xFE";
    z += "    * $options aspxc-\xFE";
    z += "End Program\xFE";
    z += "\xFE";
    z += "function RepeaterFormBackground(ByVal ProjectName As String, ByVal ID As String, ByVal objectModel As Json, ByVal dataArray As Array, ByVal removeRowText As StRiNg, ByVal canedit As Boolean, ByVal parentModel As String, ByVal viewName As String) As String\xFE";
    z += "    * $options aspxc-\xFE";
    z += "    \xFE";
    z += "    Dim DropIt As Boolean\xFE";
    z += "    Dim LastDivI As Integer\xFE";
    z += "    Dim LS As String\xFE";
    z += "    Dim RS As String\xFE";
    z += "    Dim pfx As String\xFE";
    z += "    Dim innerHtml As String\xFE";
    z += "\xFE";
    z += "    @Session.myDataSet = dataArray\xFE";
    z += "    \xFE";
    z += "    innerHtml = @JSB_MDL.formViewNColumns(ProjectName, objectModel, ID:\"().\", {}, viewName)\xFE";
    z += "\xFE";
    z += "    if canedit And removeRowText Then \xFE";
    z += "        DropIt = InStr(innerHtml, `<div class=\"form-group row\">`) < 40 \xFE";
    z += "        If DropIt Then \xFE";
    z += "            LastDivI = Index(innerHtml, \"</div>\", Count(innerHtml, \"</div>\"))\xFE";
    z += "            LS = Left(innerHTML, LastDivI-1)\xFE";
    z += "            RS = Mid(innerHTML, LastDivI)\xFE";
    z += "        Else\xFE";
    z += "            LS = innerHTML\xFE";
    z += "            RS = \"\"\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        pfx = `<div class=\"col-xs-1\"><a class=\"anchorRemoveRow\" style=\"display:table\" data-bind=\"click: function() { if (confirm('Are you sure you want to `:removeRowText:` this row?'))`\xFE";
    z += "        RS := @Html(\"</div>\")\xFE";
    z += "        \xFE";
    z += "        if parentModel Then\xFE";
    z += "            innerHtml = LS:@Html(pfx:` $root.`:@NiceName(Replace(parentModel, \"().\", \"_\")):ID:`_delRow($data, $index(), $parent) } \">`:removeRowText:`</a>`):RS\xFE";
    z += "        Else\xFE";
    z += "            innerHtml = LS:@Html(pfx:` koModel.`:ID:`_delRow($data, $index()) }\">`:removeRowText:`</a>`):RS\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    innerHtml = @Div(ID:'_ContextDiv', innerHtml, [\"class='inlineJsonBlock'\"])\xFE";
    z += "    Html = @repeaterHtml(ID, \"div\", @Html(\"<div class='inlineJson \":ID:\"'>\"), innerHtml, @Html(\"</div>\"), parentModel)\xFE";
    z += "    Html = Replace(Html, \"mdlctl\", \"nstctl\")\xFE";
    z += "\xFE";
    z += "    If @IsAdmin And viewName Then\xFE";
    z += "        CM = {}\xFE";
    z += "        CM[viewname] = { cmd: 'viewView', val: viewname }\xFE";
    z += "        CM[viewname] = { cmd: 'editView', val: viewname }\xFE";
    z += "        \xFE";
    z += "        Html = Html:@jsb_html.ContextMenu(\"#\":ID:'_ContextDiv', CM)\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    Return Html\xFE";
    z += "End Function\xFE";
    z += ""
    window.cached_jsb_ctls["_repeaterformbackground"] = z;
    var z = "\xFE";
    z += "program _RepeaterGridBackground\xFE";
    z += "    * $options aspxc-\xFE";
    z += "end program\xFE";
    z += "\xFE";
    z += "function RepeaterGridBackground(ByVal ProjectName As String, ByVal ID As String, ByVal objectModel As Json, ByVal dataArray As Array, ByVal removeRowText As StRiNg, ByVal canedit As Boolean, ByVal parentModel As String, ByVal viewName As String) As String\xFE";
    z += "    * $options aspxc-\xFE";
    z += "    \xFE";
    z += "    Dim CM As Array\xFE";
    z += "    Dim KOID As String\xFE";
    z += "    Dim outerHtmlPrefix As String\xFE";
    z += "    Dim innerHtml As String\xFE";
    z += "    Dim outerHtmlSuffix As String\xFE";
    z += "\xFE";
    z += "    modelColumns = @jsb_mdl.DropGridColumns(objectModel.columns)\xFE";
    z += "\xFE";
    z += "    @Session.myDataSet = dataArray\xFE";
    z += "    \xFE";
    z += "    if parentModel Then KOID = @NiceName(ID) Else KOID = `koModel.`:@NiceName(ID)\xFE";
    z += "    \xFE";
    z += "    outerHtmlPrefix = @Html(`<table id=\"`:@NiceName(ID):`_table\" class=\"repeaterTable\" data-bind=\"visible: `:KOID:`().length>0\"><thead>`)\xFE";
    z += "\xFE";
    z += "    For CI = 1 to UBound(modelColumns)\xFE";
    z += "        Column = modelColumns[CI]\xFE";
    z += "        If Column.control = \"\" Then Column.control = \"textbox\"\xFE";
    z += "        outerHtmlPrefix = outerHtmlPrefix:@Html(`<th>`):Column.label:@Html(`</th>`)\xFE";
    z += "    Next\xFE";
    z += "\xFE";
    z += "    outerHtmlPrefix = outerHtmlPrefix:@Html(`<th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th></thead>`)\xFE";
    z += "\xFE";
    z += "    if viewName Then\xFE";
    z += "        innerHtml = koGridViewNColumns(ProjectName, modelColumns, parentModel, ID, removeRowText, canedit, viewName)\xFE";
    z += "    Else\xFE";
    z += "        innerHtml = koGridViewNColumns(ProjectName, modelColumns, parentModel, ID, removeRowText, canedit, objectModel.attachdb:am():objectModel.tableName)\xFE";
    z += "    end if\xFE";
    z += "    \xFE";
    z += "    outerHtmlSuffix = @Html(`</table>`)\xFE";
    z += "\xFE";
    z += "    Html = @repeaterHtml(ID, \"tbody\", outerHtmlPrefix, innerHtml, outerHtmlSuffix, parentModel)\xFE";
    z += "\xFE";
    z += "    If @IsAdmin And viewName Then\xFE";
    z += "        CM = {}\xFE";
    z += "        CM[viewname] = { cmd: 'viewView', val: viewname }\xFE";
    z += "        CM[viewname] = { cmd: 'editView', val: viewname }\xFE";
    z += "        \xFE";
    z += "        //CM = []\xFE";
    z += "        //CM[-1] = \"Display: \":viewname:\",viewView,\":viewName\xFE";
    z += "        //CM[-1] = \"Edit: \":viewname:\",editView,\":viewName\xFE";
    z += "        \xFE";
    z += "        Html = Html:@jsb_html.ContextMenu('#':@NiceName(ID):`_table`, CM)\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    return Html\xFE";
    z += "End Function\xFE";
    z += ""
    window.cached_jsb_ctls["_repeatergridbackground"] = z;
}
anonymousFunc()
anonymousFunc = null