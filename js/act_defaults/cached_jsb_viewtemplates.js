anonymousFunc = function () {
    window.cachedFileNames["jsb_viewtemplates"] = "jsb_viewtemplates"
    if (!window.cached_jsb_viewtemplates) window.cached_jsb_viewtemplates = {}
    var z = "{ index:20, label:'C.R.U.D' },\xFE";
    z += "\xFE";
    z += "{name:'attachdb', index: 21, label:'Attach DB', width:19, control:'dropDownBox', autopostback: true, canedit:true, required: false, addBlank: true, reffile:\"SYSTEM\", refpk:\"ItemID\" },\xFE";
    z += "{name:'tableName', index:22, label:'Table Name', datatype: 'string', width:90, control:'dropDownBox', required: false, addBlank: true, autopostback: true, canedit:true, reffile:\"{listfiles}\", pickfunction: \"picktable\"},\xFE";
    z += "\xFE";
    z += "{ index:30, label:'chart' },\xFE";
    z += "\xFE";
    z += "{name:'charttype', index:30, label:'Chart Type', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"ColumnChart;BarChart;LineChart;AreaChart;PieChart\" },\xFE";
    z += "{name:'charttitle', index:31, label:'Chart Title', width:30, control:'textbox', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'horztitle', index:32, label:'Horz. Title', width:30, control:'textbox', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'verttitle', index:33, label:'Vert. Title', width:30, control:'textbox', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{ index:51, label:'CSS' },\xFE";
    z += "\xFE";
    z += "{name:'forecolor', index:52, label:'Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'backcolor', index:53, label:'Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{ index:55, label:'CSS' },\xFE";
    z += "\xFE";
    z += "{name:'font', index:56, label:'Font', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"Arial,Arial, Helvetica, sans-serif;Arial Black, 'Arial Black', Gadget, sans-serif;Comic Sans MS, 'Comic Sans MS', Textile, cursive;Courier New, 'Courier New', Courier, monospace;Georgia, Georgia, 'Times New Roman', Times, serif;Impact, Impact, Charcoal, sans-serif;Lucida Console, 'Lucida Console', Monaco, monospace;Lucida Sans Unicode, 'Lucida Sans Unicode', 'Lucida Grande', sans-serif;Palatino Linotype, 'Palatino Linotype', 'Book Antiqua', Palatino, serif;Tahoma, Tahoma, Geneva, sans-serif;Times New Roman, 'Times New Roman', Times, serif;Trebuchet MS, 'Trebuchet MS', Helvetica, sans-serif;Verdana, Verdana, Geneva, sans-serif;MS Sans Serif, 'MS Sans Serif', Geneva, sans-serif;MS Serif, 'MS Serif', 'New York', serif;\" },\xFE";
    z += "{name:'fontsize', index:57, label:'Font size', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"xx-small;x-small;small;medium;large;x-large;xx-large;smaller;larger;initial;inherit\" },\xFE";
    z += "\xFE";
    z += "{ index:60, label:'CSS' },\xFE";
    z += "{name:'boxed', index:61, label:'Boxed', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"none;solid;double;groove;ridge;inset;outset\"  },\xFE";
    z += "{name:'centercontents', index:61, label:'Center contents', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{name:'custombtns', fullline: true, index:64, label:'Custom Btns', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add custom button', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"customBtns\" },\xFE";
    z += "{name:'btnsonbot', index:65, label:'Btns on Bottom', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" }\xFE";
    z += "\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "********************************************** <%=viewName%> CHART **********************************************\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "<%\xFE";
    z += "   mayCRUD = false\xFE";
    z += "   hasDefaultValues = False\xFE";
    z += "   niceViewName = @NiceName(@DropIfRight(viewName, \".view\", true)) \xFE";
    z += "   nicEditID = \"ne_\":niceViewName   \xFE";
    z += "%>\xFE";
    z += "\xFE";
    z += "\xFE";
    z += "Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON)\xFE";
    z += "    <% if viewModel.attachdb then %>\xFE";
    z += "        AttachDB \"<%=viewModel.attachdb%>\" else Stop @Errors\xFE";
    z += "    <% end if %>\xFE";
    z += "   viewVars.dataSet = []\xFE";
    z += "   \xFE";
    z += "<% if viewModel.tableName Then%>\xFE";
    z += "   Open \"<%=viewModel.tableName%>\" to fTable else Alert(@errors, True)\xFE";
    z += "   Dim rtnErrors As String = \"\", selectHandle As SelectList, SqlFilter As String = \"\", SqlColumns As String = \"\"\xFE";
    z += "   <%= @jsb_mdl.buildSqlSelect(viewModel, false)%>\xFE";
    z += "   If rtnErrors Then @Alert(rtnErrors, True)\xFE";
    z += "   select fTable to selectHandle Where SqlFilter else Alert(@errors)\xFE";
    z += "\xFE";
    z += "   ReadNext pkID From selectHandle Else Alert(\"No items found in <%=viewModel.tableName%> Where \" : SqlFilter, True)\xFE";
    z += "   viewVars.pkID = pkID\xFE";
    z += "<% End If%>\xFE";
    z += "   viewVars.dataSet = []\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "    * ReadJSon viewModel From @fHandle(\"DICT\", \"<%=ProjectName%>\"), \"<%=viewName%>\" Else viewModel = {}; Alert('Missing dict <%=ProjectName%>, <%=viewName%>', True)\xFE";
    z += "    * @jsb_mdl.standardUnload(viewModel.columns, viewVars.Row, false)\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "<%$include _checkCommands%>\xFE";
    z += "\xFE";
    z += "function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "    mydata = [\xFE";
    z += "      { Year: 2004, Sales: 100, Expenses: 100 },\xFE";
    z += "      { Year: 2005, Sales: 150, Expenses: 200 },\xFE";
    z += "      { Year: 2006, Sales: 580, Expenses: 300 }]\xFE";
    z += "\xFE";
    z += "    Dim Html As String = @Chart(\"<%=niceViewName%>\", mydata, \"<%=viewModel.charttype%>\", \"<%=viewModel.charttitle%>\", \"<%=viewModel.verttitle%>\", \"<%=viewModel.horztitle%>\")\xFE";
    z += "\xFE";
    z += "    Html = display_<%=niceViewName%>_extras(viewVars, Html)\xFE";
    z += "\xFE";
    z += "    Html = @Html(\"<div id='<%=niceViewName%>' class='ChartBlock <%=niceViewName%>'>\":CRLF()):Html:@Html(\"</div>\":CRLF())\xFE";
    z += "    Return Html\xFE";
    z += "End Function\xFE";
    z += "\xFE";
    z += "<%$include _display_extras%>"
    window.cached_jsb_viewtemplates["chart"] = z;
    var z = "{ index:20, label:'C.R.U.D' },\xFE";
    z += "\xFE";
    z += "{name:'attachdb', index: 21, label:'Attach DB', width:19, control:'dropDownBox', autopostback: true, canedit:true, required: false, addBlank: true, reffile:\"SYSTEM\", refpk:\"ItemID\" },\xFE";
    z += "{name:'tableName', index:22, label:'Table Name', datatype: 'string', width:90, control:'dropDownBox', required: false, addBlank: true, autopostback: true, canedit:true, reffile:\"{listfiles}\", pickfunction: \"picktable\"},\xFE";
    z += "{name:'header', index:22, label:'Header Text', required: false, datatype: 'string', width:90, control:'textbox', canedit:true, defaultvalue:\"{viewname}\" },\xFE";
    z += "{name:'adminBackgroundEdit', index:23, label:'Enable BK Edit', width:12, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'columns', index:24, label:'Columns', datatype: 'jsonarray', width:90, control:'json_popup', display: \"hidden\", canedit:true, reffile:\"jsb_jsondefs\", refpk:\"viewColumns\" },\xFE";
    z += "\xFE";
    z += "{name:'useajax', index:25, label:'use AJAX', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'useInlineHTML', index:25, label:'use inline HTML', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{ index:25, label:'C.R.U.D' },\xFE";
    z += "{name:'newRecord', index:26, label:'Start w/NewRecord', width:12, control:'checkbox', canedit:true, defaultvalue:false, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'allowNewRecord', index:27, label:'allow ID newRecord', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{ index:30, label:'Buttons' },\xFE";
    z += "\xFE";
    z += "{name:'allowupdates', index:32, label:'Allow Updates', width:12, control:'checkbox', canedit:true, defaultvalue:1, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'allowdeletes', index:35, label:'Allow Deletes', width:12, control:'checkbox', canedit:true, defaultvalue:1, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{ index:51, label:'CSS' },\xFE";
    z += "\xFE";
    z += "{name:'forecolor', index:52, label:'Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'backcolor', index:53, label:'Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{ index:55, label:'CSS' },\xFE";
    z += "\xFE";
    z += "{name:'font', index:56, label:'Font', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"Arial,Arial, Helvetica, sans-serif;Arial Black, 'Arial Black', Gadget, sans-serif;Comic Sans MS, 'Comic Sans MS', Textile, cursive;Courier New, 'Courier New', Courier, monospace;Georgia, Georgia, 'Times New Roman', Times, serif;Impact, Impact, Charcoal, sans-serif;Lucida Console, 'Lucida Console', Monaco, monospace;Lucida Sans Unicode, 'Lucida Sans Unicode', 'Lucida Grande', sans-serif;Palatino Linotype, 'Palatino Linotype', 'Book Antiqua', Palatino, serif;Tahoma, Tahoma, Geneva, sans-serif;Times New Roman, 'Times New Roman', Times, serif;Trebuchet MS, 'Trebuchet MS', Helvetica, sans-serif;Verdana, Verdana, Geneva, sans-serif;MS Sans Serif, 'MS Sans Serif', Geneva, sans-serif;MS Serif, 'MS Serif', 'New York', serif;\" },\xFE";
    z += "{name:'fontsize', index:57, label:'Font size', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"xx-small;x-small;small;medium;large;x-large;xx-large;smaller;larger;initial;inherit\" },\xFE";
    z += "\xFE";
    z += "{ index:60, label:'CSS' },\xFE";
    z += "{name:'boxed', index:61, label:'Boxed', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"none;solid;double;groove;ridge;inset;outset\"  },\xFE";
    z += "\xFE";
    z += "{name:'inputs', index:62, fullline: true, label:'Input Params', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add input selection', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"viewInputs\" },\xFE";
    z += "{name:'outputs', index:63, fullline: true, label:'Output Params', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add output parameter', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"viewOutputs\" },\xFE";
    z += "\xFE";
    z += "{name:'custombtns', fullline: true, index:64, label:'Custom Btns', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add custom button', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"customBtns\" },\xFE";
    z += "{name:'btnsonbot', index:65, label:'Btns on Bottom', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" }\xFE";
    z += "\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "************************************** <%=ProjectName%> view_<%=viewName%> FORM ****************************************\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "<%\xFE";
    z += "    mayCRUD = viewModel.allowNewRecord Or viewModel.allowupdates Or viewModel.allowdeletes Or viewModel.newRecord\xFE";
    z += "%>\xFE";
    z += "\xFE";
    z += "<%$include _form%>\xFE";
    z += ""
    window.cached_jsb_viewtemplates["form"] = z;
    var z = "{ index:21,  name:'xCRUD', defaultvalue:'C.R.U.D', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;' },\xFE";
    z += "{name:'attachdb', index: 22, label:'Attach DB', width:19, control:'combobox', autopostback: true, canedit:true, required: false, addBlank: true, reffile:\"SYSTEM\", refpk:\"ItemID\" },\xFE";
    z += "{name:'tableName', index:23, label:'Table Name', datatype: 'string', width:90, control:'dropDownBox', required: false, addBlank: true, autopostback: true, canedit:true, reffile:\"{listfiles}\", pickfunction: \"picktable\"},\xFE";
    z += "{name:'orderby', index:24, label:'order by', datatype: 'string', suppresslabel: false, control:'textbox', canedit:true, required: false, addBlank: true, defaultvalue:\"\"},\xFE";
    z += "{name:'customSQL', index:22, label:'Custom SQL', datatype: 'string', width:90, control:'textbox', required: false, autopostback: true, canedit:true, pickfunction: \"pickcustomSQL\"},\xFE";
    z += "\xFE";
    z += "{name:'allowinserts', index:25, label:'Allow Inserts', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'allowupdates', index:26, label:'Allow Updates', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'allowdeletes', index:27, label:'Allow Deletes', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{name:'useajax', index:28, label:'use AJAX', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'usedevx', index:28, label:'use devX Grid', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{ index: 30, name: 'xsclick', defaultvalue: 'Grid Single Click', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;'   },\xFE";
    z += "{name:'gridOpenTo', index:31, label:'Grid Selection To', datatype: 'number', suppresslabel: false, control:'dropdownbox', canedit:true, required: false, addBlank: true, defaultvalue:\"10\", reflist: \"New Window,1;New Window Tab,2;Tab (name in Transfer Xtra),3;Frame (name in Transfer Xtra),4;Dialog (Title in Transfer Xtra),6;HTTP POST (Transfer Extra becomes formVar Name and contains SelectedID),7;HTTP GET,8;Current Window,10;JavaScript (in Transfer Extra),11;Top Window,12;Back,13;Next Tab,14;Previous Tab,15;Close Window,16;Return Pick Value,17\"},\xFE";
    z += "{name:'gridOpenUrl', index:32, label:'Selection URL', datatype: 'string', suppresslabel: false, control:'combobox', canedit:true, required: false, addBlank: true, defaultvalue:\"\",  reffile:\"dict {projectname}\", refpk:\"ItemID\", refwhere:\"ItemID Like '%.page'\", pickfunction: 'edp_pick?projectName={projectname}' },\xFE";
    z += "{name:'gridOpenExtra', index:33, label:'Transfer Xtra', datatype: 'string', suppresslabel: false, control:'textbox', canedit:true, required: false, addBlank: true, defaultvalue:\"\"},\xFE";
    z += "{name:'passThruParams', index:34, label:'pass Url Params', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'addFromUrl', index:35, label:'add From Url', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{ index: 40, name: 'xdclick', defaultvalue: 'Grid Double Click', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;'  },\xFE";
    z += "{name:'gridDblOpenTo', index:41, label:'dblClick Selection To', datatype: 'number', suppresslabel: false, control:'dropdownbox', canedit:true, required: false, addBlank: true, defaultvalue:\"\", reflist: \"New Window,1;New Window Tab,2;Tab (name in Transfer Xtra),3;Frame (name in Transfer Xtra),4;Dialog (Title in Transfer Xtra),6;HTTP POST (Transfer Extra becomes formVar Name and contains SelectedID),7;HTTP GET,8;Current Window,10;JavaScript (in Transfer Extra),11;Top Window,12;Back,13;Next Tab,14;Previous Tab,15;Close Window,16;Return Pick Value,17\"},\xFE";
    z += "{name:'gridDblOpenUrl', index:42, label:'dblClick URL', datatype: 'string', suppresslabel: false, control:'combobox', canedit:true, required: false, addBlank: true, defaultvalue:\"\",  reffile:\"dict {projectname}\", refpk:\"ItemID\", refwhere:\"ItemID Like '%.page'\", pickfunction: 'edp_pick?projectName={projectname}' },\xFE";
    z += "{name:'gridDblOpenExtra', index:43, label:'dblClick Xtra', datatype: 'string', suppresslabel: false, control:'textbox', canedit:true, required: false, addBlank: true, defaultvalue:\"\"},\xFE";
    z += "{name:'passDblThruParams', index:44, label:'dblClick pass Url Params', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'addDblFromUrl', index:45, label:'dblClick add From Url', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "\xFE";
    z += "{ index:50, name:'xuicss', defaultvalue:'UI CSS', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;' },\xFE";
    z += "\xFE";
    z += "{name:'header', index:51, label:'Header Text', required: false, datatype: 'string', width:90, control:'textbox', canedit:true, defaultvalue:\"{viewname}\" },\xFE";
    z += "\xFE";
    z += "{name:'headforecolor', index:52, label:'Header Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'headbackcolor', index:53, label:'Header Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{name:'forecolor', index:54, label:'Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'backcolor', index:52, label:'Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{name:'altforecolor', index:55, label:'Alt Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'altbackcolor', index:56, label:'Alt Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{name:'font', index:57, label:'Font', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"Arial,Arial, Helvetica, sans-serif;Arial Black, 'Arial Black', Gadget, sans-serif;Comic Sans MS, 'Comic Sans MS', Textile, cursive;Courier New, 'Courier New', Courier, monospace;Georgia, Georgia, 'Times New Roman', Times, serif;Impact, Impact, Charcoal, sans-serif;Lucida Console, 'Lucida Console', Monaco, monospace;Lucida Sans Unicode, 'Lucida Sans Unicode', 'Lucida Grande', sans-serif;Palatino Linotype, 'Palatino Linotype', 'Book Antiqua', Palatino, serif;Tahoma, Tahoma, Geneva, sans-serif;Times New Roman, 'Times New Roman', Times, serif;Trebuchet MS, 'Trebuchet MS', Helvetica, sans-serif;Verdana, Verdana, Geneva, sans-serif;MS Sans Serif, 'MS Sans Serif', Geneva, sans-serif;MS Serif, 'MS Serif', 'New York', serif;\" },\xFE";
    z += "{name:'fontsize', index:58, label:'Font size', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"xx-small;x-small;small;medium;large;x-large;xx-large;smaller;larger;initial;inherit\" },\xFE";
    z += "{name:'boxed', index:59, label:'Boxed', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"none;solid;double;groove;ridge;inset;outset\"  },\xFE";
    z += "\xFE";
    z += "{ index:70,  name:'xio', defaultvalue:'Input / Output Parameters', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;' },\xFE";
    z += "\xFE";
    z += "{name:'inputs', index:74, fullline: true, label:'Input Params', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add input selection', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"viewInputs\" },\xFE";
    z += "{name:'outputs', index:75, fullline: true, label:'Output Params', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add output parameter', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"viewOutputs\" },\xFE";
    z += "{name:'dynamicinputs', index:77, fullline: true, label:'Auto Ajax Filters', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add AJax Filter', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"viewInputs\" },\xFE";
    z += "\xFE";
    z += "{name:'custombtns', fullline: true, index:80, label:'Custom Btns', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add custom button', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"customBtns\" },\xFE";
    z += "{name:'btnsonbot', index:81, label:'Btns on Bottom', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" }\xFE";
    z += "\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "************************************************** <%=viewName%> Grid View *********************************************\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "<%\xFE";
    z += "   ** Function genCodeStub(ProjectName, pageName, pageModel, viewName, viewModel, TemplateFileName) \xFE";
    z += "   ** We return the array GEN[]\xFE";
    z += "   **\xFE";
    z += "   niceViewName = @NiceName(@DropIfRight(viewName, \".view\", true)) \xFE";
    z += "   nicEditID = \"ne_\":niceViewName\xFE";
    z += "   mayCRUD = viewModel.allowNewRecord Or viewModel.allowupdates Or viewModel.allowdeletes Or viewModel.newRecord\xFE";
    z += "   doKOBinding = false\xFE";
    z += "   \xFE";
    z += "    if viewModel.tableName = \"\" Then\xFE";
    z += "        @Alert(\"You don't have a Table Name defined in your view : \" : viewName, True)\xFE";
    z += "        Return 0\xFE";
    z += "    End If\xFE";
    z += "   \xFE";
    z += "    hasDefaultValues = False\xFE";
    z += "    latColumnName = \"\"\xFE";
    z += "    lngColumnName = \"\"\xFE";
    z += "    if viewModel.attachdb then\xFE";
    z += "        attachdb viewModel.attachdb else Stop @Errors\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    for Each Column In viewModel.columns\xFE";
    z += "        if Column.defaultvalue Then hasDefaultValues = True\xFE";
    z += "        if Column.isLatitude Then latColumnName = Column.name\xFE";
    z += "        if Column.isLongitude Then lngColumnName = Column.name\xFE";
    z += "    next\xFE";
    z += "    \xFE";
    z += "    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\xFE";
    z += "    // Verify viewModel for grid selections [ * needs a URL: (>1 And <= 10) Or 12], or no need: >= 13 or  = 11\xFE";
    z += "    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\xFE";
    z += "    \xFE";
    z += "    //  * 1 open in a new window with ?xxx={id} (if containerName given then it is Url Extra)\xFE";
    z += "    //  * 2 open in a new window tab with ?containerName=idvalue (if containerName given then it is Url Extra)\xFE";
    z += "    //  * 3 open in a new jQuery Tab. Tab is is 4th parameter containerName\xFE";
    z += "    //  * 4 open in an new or existing IFRAME whose id is containerName\xFE";
    z += "    //  * 5 open in a DIV whose id is containerName\xFE";
    z += "    //  * 6 open in a jQuery Model DIalog (Title of dialog is containerName)\xFE";
    z += "    //  * 7 postback : \xFE";
    z += "    //               Makes a FormVar('postBackUrl') which is parentDataRow\xFE";
    z += "    //               Makes a FormVar('postBackTitle') which is eventName\xFE";
    z += "    //               Makes a FormVar(containerName) which is SelectedID\xFE";
    z += "    //               - create this with print @genEventHandler(eventName /* put into @FormVar('postBackTitle') */, Url /*unused*/, 7, 'containerName' /* FormVar(containerName) gets SelectedID */ ):\xFE";
    z += "    //  * 8 httpget from Url with {id} (if containerName given then it is Url Extra)\xFE";
    z += "    //  * 9 (Unused)\xFE";
    z += "    //  * 10 open in current window (if containerName given then it is Url Extra)\xFE";
    z += "    //    11 pure javascript in containerName\xFE";
    z += "    //  * 12 open in top window (if containerName given then it is Url Extra)\xFE";
    z += "    //    13 Back Page: due window history back (uses fromPage if it exists)\xFE";
    z += "    //    14 Next Tab\xFE";
    z += "    //    15 Previous Tab\xFE";
    z += "    //    16 Close Window\xFE";
    z += "    //    17 Return a PICK value\xFE";
    z += "    //    18 Force jqGrid to reload (containerName is jqGridID) - does $('#':jqGridID).trigger( 'reloadGrid' );\xFE";
    z += "\xFE";
    z += "    gridOpenUrl = Trim(@DropIfRight(viewModel.gridOpenUrl, '.page'))\xFE";
    z += "    if gridOpenUrl Then \xFE";
    z += "        If InStr(gridOpenUrl, \"//\") = 0 And Left(gridOpenUrl, 1) = \"/\" Then gridOpenUrl = Mid(gridOpenUrl, 2)\xFE";
    z += "        op = @jsb_mdl.UrlOutputParams(viewModel.outputs) \xFE";
    z += "        if instr(gridOpenUrl, \"?\") then op = replace(op, \"?\", \"&\")\xFE";
    z += "        gridOpenUrl := op\xFE";
    z += "\xFE";
    z += "        If viewModel.gridOpenTo = 11  Or viewModel.gridOpenTo >= 13 Then // No need for URL\xFE";
    z += "            If MsgBox(\"Your grid (\":niceViewName:\") has a Non-URL 'Grid Selection To' action (\":eventHandlerType(viewModel.gridOpenTo):\") and a URL defined (\":gridOpenUrl:\").  Remove the URL?\", \"Yes,*No\") = \"Yes\" Then\xFE";
    z += "                remove viewModel, \"gridOpenUrl\"\xFE";
    z += "                ReadJSON testExistance from fhandle('dict', ProjectName), viewName Then WriteJSON viewModel On fhandle('dict', ProjectName), viewName\xFE";
    z += "            End If\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "    ElseIf (viewModel.gridOpenTo >= 1 And viewModel.gridOpenTo < 10) Or viewModel.gridOpenTo = 12 Then // Need a URL\xFE";
    z += "        If MsgBox(\"Your grid (\":niceViewName:\") has a 'Grid Selection To' action (\":eventHandlerType(viewModel.gridOpenTo):\"), but no URL defined.  Remove the click action?\", \"Yes,*No\") = \"Yes\" Then\xFE";
    z += "            remove viewModel, \"gridOpenTo\"\xFE";
    z += "            ReadJSON testExistance from fhandle('dict', ProjectName), viewName Then WriteJSON viewModel On fhandle('dict', ProjectName), viewName Else MsgBox(\"Could not find model\"); Debug\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "   gridDblOpenUrl = Trim(@DropIfRight(viewModel.gridDblOpenUrl, '.page'))\xFE";
    z += "   if gridDblOpenUrl then\xFE";
    z += "        If InStr(gridDblOpenUrl, \"//\") = 0 And Left(gridDblOpenUrl, 1) = \"/\" Then gridDblOpenUrl = Mid(gridDblOpenUrl, 2)\xFE";
    z += "        op = @jsb_mdl.UrlOutputParams(viewModel.outputs) \xFE";
    z += "        if instr(gridDblOpenUrl, \"?\") then op = replace(op, \"?\", \"&\")\xFE";
    z += "        gridDblOpenUrl := op\xFE";
    z += "            \xFE";
    z += "        if viewModel.gridDblOpenTo = 11 Or viewModel.gridDblOpenTo >= 13 Then // No need for URL\xFE";
    z += "            If MsgBox(\"Your grid (\":niceViewName:\") has a Non-URL 'dblClick Selection To' action (\":eventHandlerType(viewModel.gridDblOpenTo):\") and a URL defined (\":gridDblOpenUrl:\").  Remove the URL?\", \"Yes,*No\") = \"Yes\" Then\xFE";
    z += "                remove viewModel, \"gridDblOpenUrl\"\xFE";
    z += "                ReadJSON testExistance from fhandle('dict', ProjectName), viewName Then WriteJSON viewModel On fhandle('dict', ProjectName), viewName Else MsgBox(\"Could not find model\"); Debug\xFE";
    z += "            End If\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "    ElseIf (viewModel.gridDblOpenTo >= 1 And viewModel.gridDblOpenTo < 10) Or viewModel.gridDblOpenTo = 12 Then // Need a URL\xFE";
    z += "        If MsgBox(\"Your grid (\":niceViewName:\") has a 'dblClick Selection To' action (\":eventHandlerType(viewModel.gridDblOpenTo):\"), but no URL defined.  Remove the dblClick action?\", \"Yes,*No\") = \"Yes\" Then\xFE";
    z += "            remove viewModel, \"gridDblOpenTo\"\xFE";
    z += "            ReadJSON testExistance from fhandle('dict', ProjectName), viewName Then WriteJSON viewModel On fhandle('dict', ProjectName), viewName Else MsgBox(\"Could not find model\"); Debug\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "   \xFE";
    z += "    // C)ontainerName parameter (Required by 3,4,5,6,7,11 & 18, Optional for 1,2,8,10, & 12)\xFE";
    z += "    if !viewModel.gridOpenExtra Then\xFE";
    z += "        If (viewModel.gridOpenTo >= 3 And viewModel.gridOpenTo < 7) Or (viewModel.gridOpenTo = 11 Or viewModel.gridOpenTo = 18) Then\xFE";
    z += "            MsgBox(\"You must specify more information in the 'Transfer Xtra' metadata field for action (\":eventHandlerType(viewModel.gridOpenTo):\"; view: \":viewName)\xFE";
    z += "        ElseIf viewModel.gridOpenTo = 7 Then\xFE";
    z += "            MsgBox(\"You must specify a your javascript in the 'Transfer Xtra' metadata field for action (\":eventHandlerType(viewModel.gridOpenTo):\"; view: \":viewName)\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    if !viewModel.gridDblOpenExtra Then\xFE";
    z += "        If (viewModel.gridDblOpenTo >= 3 And viewModel.gridDblOpenTo < 7) Or (viewModel.gridDblOpenTo = 11 Or viewModel.gridDblOpenTo = 18) Then\xFE";
    z += "            MsgBox(\"You must specify more information in the 'dblClick Xtra' metadata field for action (\":eventHandlerType(viewModel.gridDblOpenTo):\"; view: \":viewName)\xFE";
    z += "        ElseIf viewModel.gridDblOpenTo = 7 Then\xFE";
    z += "            MsgBox(\"You must specify a your javascript in the 'dblClick Xtra' metadata field for action (\":eventHandlerType(viewModel.gridDblOpenTo):\"; view: \":viewName)\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    hasSpecialOutputs = False\xFE";
    z += "    for each Column in viewModel.outputs\xFE";
    z += "        If Column.scope = \"SessionVar\" Or Column.scope = \"ApplicationVar\" Or Column.scope = \"ProfileVar\" Then\xFE";
    z += "            hasSpecialOutputs = True\xFE";
    z += "            break\xFE";
    z += "        End If\xFE";
    z += "    next             \xFE";
    z += "%>\xFE";
    z += "*\xFE";
    z += "* To be compatable with the modeler and other views, we must implement these 4 routines:\xFE";
    z += "*\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON) // viewVars = { fromParentPage: '', parentMultiView: '', lastView: true }\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_checkCommands(viewVars, inCmd, ColumnID)\xFE";
    z += "*   function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "*\xFE";
    z += "Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON)\xFE";
    z += "    <% if viewModel.attachdb then %>\xFE";
    z += "        AttachDB \"<%=viewModel.attachdb%>\" else Stop @Errors\xFE";
    z += "    <% end if %>\xFE";
    z += "    \xFE";
    z += "    <%if viewModel.usedevx then%>\xFE";
    z += "        if !viewVars.userSettings Then viewVars.userSettings = {}\xFE";
    z += "        Dim userSettings As JSON = viewVars.userSettings\xFE";
    z += "        if !userSettings.devXGridLayout Then\xFE";
    z += "            Dim devXGridLayout As String = \"\"\xFE";
    z += "            Read devXGridLayout From fHandle('tmp'), @UserName:\"_<%=pageName%>_<%=viewName%>_layout\" Else userSettings.devXGridLayout = \"\"\xFE";
    z += "            userSettings.devXGridLayout = devXGridLayout\xFE";
    z += "        End If\xFE";
    z += "        if !userSettings.devXGridFilter Then\xFE";
    z += "            Dim devXGridFilter As String = \"\"\xFE";
    z += "            Read devXGridFilter From fHandle('tmp'), @UserName:\"_<%=pageName%>_<%=viewName%>_filter\" Else devXGridFilter = \"\"\xFE";
    z += "            userSettings.devXGridFilter = devXGridFilter\xFE";
    z += "        End If\xFE";
    z += "    <%End if%>\xFE";
    z += "    <%if latColumnName And lngColumnName Then %>\xFE";
    z += "        userSettings.showKMLExport = True\xFE";
    z += "        userSettings.latColumnName = \"<%=latColumnName%>\"\xFE";
    z += "        userSettings.lngColumnName = \"<%=lngColumnName%>\"\xFE";
    z += "    <%end if%>\xFE";
    z += "    \xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "    <%if viewModel.usedevx then%>\xFE";
    z += "        Dim Cmd As String = @formVar('Btn'):@formVar('BtnReset')\xFE";
    z += "        Dim userSettings As Json = viewVars.userSettings\xFE";
    z += "    \xFE";
    z += "        // Record current settings\xFE";
    z += "        devXGrid = System(29).getControl(\"devXGrid\")\xFE";
    z += "        userSettings.devXGridLayout = devXGrid.SaveClientLayout()  \xFE";
    z += "        userSettings.devXGridFilter = devXGrid.FilterExpression \xFE";
    z += "        \xFE";
    z += "        // Record current user display settings for devXgrid\xFE";
    z += "        viewVars.lastCmd = Cmd\xFE";
    z += "\xFE";
    z += "        Write userSettings.devXGridLayout On fHandle('tmp'), @UserName:\"_<%=pageName%>_<%=viewName%>_layout\" Else Null\xFE";
    z += "        Write userSettings.devXGridFilter On fHandle('tmp'), @UserName:\"_<%=pageName%>_<%=viewName%>_filter\" Else Null\xFE";
    z += "    <%Else%>\xFE";
    z += "        <% if hasSpecialOutputs Then %>\xFE";
    z += "           Dim postBackCmd As As String = @formvar(\"postBackTitle\")\xFE";
    z += "           if postBackCmd then\xFE";
    z += "              Dim postBackRow As JSON = JSON(@formvar(\"postBackUrl\"))\xFE";
    z += "              <%\xFE";
    z += "                    // If we have any parameters for Session, Application or Profile, save them\xFE";
    z += "                    for each Column in viewModel.outputs\xFE";
    z += "                        If Column.name = \"\" Then Column.name = Column.field\xFE";
    z += "                        Select Case Column.scope \xFE";
    z += "                           case \"SessionVar\"\xFE";
    z += "                              %> @Session[\"<%=Column.name%>\"] = postBackRow[\"<%=Column.field%>\"] \xFE";
    z += "                              <%\xFE";
    z += "                              \xFE";
    z += "                           case \"ApplicationVar\"\xFE";
    z += "                              %> @Application[\"<%=Column.name%>\"] = postBackRow[\"<%=Column.field%>\"] \xFE";
    z += "                              <%\xFE";
    z += "                              \xFE";
    z += "                           case \"ProfileVar\"\xFE";
    z += "                              %> @profilevar(\"<%=Column.name%>\", postBackRow[\"<%=Column.field%>\"])\xFE";
    z += "                              <%\xFE";
    z += "                        end select\xFE";
    z += "                    next\xFE";
    z += "                %>\xFE";
    z += "            End If\xFE";
    z += "        <% End If %>\xFE";
    z += "        \xFE";
    z += "        viewVars.GridOperations = @formvar(\"<%=niceViewName%>_ops\")\xFE";
    z += "    <%End If%>\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "function view_<%=niceViewName%>_isDirty(ByRef viewVars As JSON) As Boolean\xFE";
    z += "   Return False\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "<%$include _checkCommands%>\xFE";
    z += "\xFE";
    z += "\xFE";
    z += "<%if viewModel.usedevx then%>\xFE";
    z += "Function gridFetch_<%=niceViewName%>(ByVal formVars As JSON, ByRef rtnErrors As String) As SelectList\xFE";
    z += "<%Else%>\xFE";
    z += "Function gridFetch_<%=niceViewName%>(ByVal formVars As JSON, ByRef rtnErrors As String) As Array\xFE";
    z += "<%End If%>\xFE";
    z += "    Dim selectHandle As SelectList, SqlFilter As String = \"\", SqlColumns As String = \"\"\xFE";
    z += "    <% if viewModel.attachdb Then %>\xFE";
    z += "    AttachDB \"<%=viewModel.attachdb%>\" else rtnErrors = @Errors; Return Null\xFE";
    z += "    <%End If%>\xFE";
    z += "    <%= @jsb_mdl.buildSqlSelect(viewModel, true)%>\xFE";
    z += "    \xFE";
    z += "    If rtnErrors Then Return Null\xFE";
    z += "   \xFE";
    z += "    <% if viewModel.customSQL Then\xFE";
    z += "        I = InStrI(viewModel.customSQL, \" from \":viewModel.tableName)\xFE";
    z += "        if I then\xFE";
    z += "            Dim Columns As String = RTrim(LTrim(Left(viewModel.customSQL, I-1)))\xFE";
    z += "            SqlFilter = mid(viewModel.customSQL, I + Len(\" from \":viewModel.tableName))\xFE";
    z += "            if lcase(fieldLeft(Columns, ' ')) = 'select' then Columns = LTrim(DropLeft(Columns, ' '))\xFE";
    z += "            if Columns And Columns <> \"*\" Then %>\xFE";
    z += "            SqlColumns = \"<%=Replace(Columns, '\"', '\\\\\"')%>\"\xFE";
    z += "            <%End If\xFE";
    z += "            if SqlFilter Then  \xFE";
    z += "            %>\xFE";
    z += "               SqlFilter := \"<%=Replace(SqlFilter, '\"', '\\\\\"')%>\"\xFE";
    z += "            <% \xFE";
    z += "            End If \xFE";
    z += "        %>\xFE";
    z += "            Dim fTable As FileHandle\xFE";
    z += "            if !@jsb_bf.OpenTable(\"<%=viewModel.tableName%>\", \"<%=viewName%>\", fTable, rtnErrors) Then Return Null\xFE";
    z += "            Select SqlColumns From fTable to selectHandle Where SqlFilter Then\xFE";
    z += "        <%Else%>\xFE";
    z += "            SqlSelect \"<%=Replace(viewModel.customSQL, '\"', '\\\\\"')%>\":Iff(SqlFilter, \" Where \":SqlFilter, \"\") To selectHandle Then\xFE";
    z += "        <%End If%>\xFE";
    z += "    <%Else%>\xFE";
    z += "        if !SqlColumns Then SqlColumns = \"*\"\xFE";
    z += "        Dim fTable As FileHandle\xFE";
    z += "        if !@jsb_bf.OpenTable(\"<%=viewModel.tableName%>\", \"<%=viewName%>\", fTable, rtnErrors) Then Return Null\xFE";
    z += "        Select SqlColumns From fTable to selectHandle Where SqlFilter Then\xFE";
    z += "    <%End If%>\xFE";
    z += "    <%if viewModel.usedevx then%>\xFE";
    z += "         Return selectHandle  // Return SelectHandle as datasourc for devX components\xFE";
    z += "    <%else%>\xFE";
    z += "        Dim dataSet As Array = GetList(selectHandle)\xFE";
    z += "        Return dataSet\xFE";
    z += "    <%End If%>\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    rtnErrors = \"Grid-\":System(28):\": \":@Errors:crlf():\"Sql Filter: \":SqlFilter\xFE";
    z += "    LogErr(rtnErrors)\xFE";
    z += "    Return Null\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "Function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "<%if viewModel.usedevx then %>\xFE";
    z += "    * $options external page\xFE";
    z += "    * $options external <%=niceViewName%>\xFE";
    z += "<%End If%>\xFE";
    z += "    Dim viewModel As JSON\xFE";
    z += "    Dim Html As String = \"\", cname as string\xFE";
    z += "    \xFE";
    z += "    * Get our column definitions from the Model Designer (from table Views and !items in Dict of <%=viewModel.tableName%>)\xFE";
    z += "    ReadJSON viewModel From @fHandle(\"DICT\", \"<%=ProjectName%>\"), \"<%=viewName%>\" Else viewModel = @jsb_mdl.createNewView(\"<%=viewName%>\")\xFE";
    z += "   \xFE";
    z += "    <%if viewModel.useajax and !viewModel.usedevx then%>\xFE";
    z += "        Dim urlSource As String, UrlParams As String\xFE";
    z += "        <%= @jsb_mdl.UrlPassThrough(viewModel) ; // This will setup UrlParams %>\xFE";
    z += "        urlSource = \"gridFetch_<%=niceViewName%>\":UrlParams\xFE";
    z += "    <%Else%>\xFE";
    z += "        Dim rtnErrors As String = \"\"\xFE";
    z += "        <%if viewModel.usedevx then%>\xFE";
    z += "            Dim DataSource As SelectList = gridFetch_<%=niceViewName%>(@FormVars, rtnErrors)\xFE";
    z += "        <%Else%>\xFE";
    z += "            Dim DataSource As Array = gridFetch_<%=niceViewName%>(@FormVars, rtnErrors)\xFE";
    z += "        <%End If%>\xFE";
    z += "        If rtnErrors Then\xFE";
    z += "            Return rtnErrors:crlf():@Button('backErr', \"Back\", { onclick: \"window.history.go(-2);\" } )\xFE";
    z += "        End If\xFE";
    z += "    <%End If%>\xFE";
    z += "    \xFE";
    z += "    <%if viewModel.usedevx then %>\xFE";
    z += "        Dim userSettings As JSON = viewVars.userSettings\xFE";
    z += "        userSettings.showExportBtns = True\xFE";
    z += "        \xFE";
    z += "        preScripts = []\xFE";
    z += "        postScripts = []\xFE";
    z += "        \xFE";
    z += "        moreBtns = []\xFE";
    z += "        moreBtns[-1] = {name:'BtnReset', text:'Reset Layout'}\xFE";
    z += "        moreBtns[-1] = {name:'Btn', text:'Fit to Data'}\xFE";
    z += "        moreBtns[-1] = {name:'Btn', text:'Fit to Screen'}\xFE";
    z += "        js = 'if (devXGrid.IsCustomizationWindowVisible()) devXGrid.ShowCustomizationWindow($(\"#BtnShowDragDrop\")[0]); else devXGrid.ShowCustomizationWindow()'\xFE";
    z += "        moreBtns[-1] = {name:'BtnShowDragDrop', text:'Show Drag & Drop Window', onclick: js}\xFE";
    z += "        userSettings.additionalButtons = moreBtns\xFE";
    z += "        \xFE";
    z += "        // =============   ============= Create the devXGrid  =============   ============= \xFE";
    z += "        Dim olderVersion = False\xFE";
    z += "        if system(1) = \"aspx\" then if Page Then olderVersion = True\xFE";
    z += "        if olderVersion Then\xFE";
    z += "            // Visual Studio version of ASPX page\xFE";
    z += "            Html = setup_devXGrid(<%=niceViewName%>, DataSource, userSettings)\xFE";
    z += "        Else        \xFE";
    z += "            Html = @jsb_html.devXGrid(\"devXGrid\", DataSource, userSettings)\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        devXGrid = System(29).getControl(\"devXGrid\") \xFE";
    z += "        devXGrid.ClientSideEvents.ColumnGrouping = \"devXGrid_LayoutChanged\"\xFE";
    z += "        devXGrid.ClientSideEvents.ColumnMoving   = \"devXGrid_LayoutChanged\"\xFE";
    z += "        devXGrid.ClientSideEvents.ColumnResized  = \"devXGrid_LayoutChanged\"\xFE";
    z += "        devXGrid.ClientSideEvents.ColumnSorting  = \"devXGrid_LayoutChanged\"\xFE";
    z += "        preScripts[-1] = \"function devXGrid_LayoutChanged(s, e) { $('#BtnReset').prop('disabled', false) }\"\xFE";
    z += "        preScripts[-1] = \"function devXGrid_onInit(s, e) { $('#BtnReset').prop('disabled', true) }\"\xFE";
    z += "        \xFE";
    z += "        if Trim(userSettings.devXGridLayout) = \"\" Then\xFE";
    z += "            // Set Reset enabled on load\xFE";
    z += "            devXGrid.ClientSideEvents.Init = \"devXGrid_onInit\"\xFE";
    z += "        Else\xFE";
    z += "            devXGrid.ClientSideEvents.Init = Nothing\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        If viewVars.lastCmd = \"Export to CSV\" Then\xFE";
    z += "            e64 = Encode(DataSource.GetCSV(), 64)\xFE";
    z += "            print @script(\" const b64Data = '\":E64:\"'; saveBlob(b64toBlob(b64Data, 'text/plain'), '<%=pageName%>_<%=niceViewName%>.csv'); doJsbSubmit(); \"):\xFE";
    z += "            E64 = \"\"\xFE";
    z += "            @Server.Pause\xFE";
    z += "        \xFE";
    z += "        <%if latColumnName And lngColumnName Then %>\xFE";
    z += "\xFE";
    z += "        Else If viewVars.lastCmd = \"Export KML\" Then\xFE";
    z += "    \xFE";
    z += "            rowCount = devXGrid.VisibleRowCount\xFE";
    z += "            doIt = True\xFE";
    z += "            If rowCount > 10000 Then\xFE";
    z += "                doIt = Msgbox(\"You have \":rowCount:\" records, proceed with export?\", \"Yes,No\") = \"Yes\"\xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            If doIt Then\xFE";
    z += "                Kml = ['<?xml version=\"1.0\" encoding=\"UTF-8\"?><kml xmlns=\"http://www.opengis.net/kml/2.2\"><Document>']\xFE";
    z += "    \xFE";
    z += "                // Make each group into a KML folder\xFE";
    z += "                dim grdColumns = devXGrid.Columns\xFE";
    z += "                grdColumnCnt = UBound(grdColumns)\xFE";
    z += "                \xFE";
    z += "                groupColumns = []\xFE";
    z += "                for i = 0 to grdColumnCnt - 1\xFE";
    z += "                    grdColumn = grdColumns(i)\xFE";
    z += "                    GroupIndex = grdColumn.GroupIndex\xFE";
    z += "                    if GroupIndex <> -1 Then\xFE";
    z += "                        groupColumns[GroupIndex+1] = grdColumn.FieldName\xFE";
    z += "                    end if\xFE";
    z += "                next\xFE";
    z += "                grpColumnCnt = UBound(groupColumns)\xFE";
    z += "                groupValues = []\xFE";
    z += "                nestedInFolder = false\xFE";
    z += "                \xFE";
    z += "                For RowNo = 0 To rowCount - 1\xFE";
    z += "                    Row = devXGrid.GetDataRow(RowNo)\xFE";
    z += "                    \xFE";
    z += "                    if grpColumnCnt Then\xFE";
    z += "                        startANewGroup = RowNo = 0\xFE";
    z += "                        for i = 1 to grpColumnCnt\xFE";
    z += "                            grpCName = groupColumns[i]\xFE";
    z += "                            pVal = groupValues[i]\xFE";
    z += "                            cVal = Row[grpCName]\xFE";
    z += "                            if pVal <> cVal Then \xFE";
    z += "                                startANewGroup = True\xFE";
    z += "                                break\xFE";
    z += "                            end if\xFE";
    z += "                        next\xFE";
    z += "                        \xFE";
    z += "                        if startANewGroup then\xFE";
    z += "                            if nestedInFolder Then Kml[-1] = \"</Folder>\"\xFE";
    z += "                            \xFE";
    z += "                            for i = 1 to grpColumnCnt\xFE";
    z += "                                grpCName = groupColumns[i]\xFE";
    z += "                                cVal = Row[grpCName]\xFE";
    z += "                                groupValues[i] = cVal\xFE";
    z += "                            next\xFE";
    z += "                            \xFE";
    z += "                            Kml[-1] = \"<Folder>\"\xFE";
    z += "                            Kml[-1] = \"<name>\":@HtmlEncode(Join(groupValues, \" \")):\"</name>\"\xFE";
    z += "                            nestedInFolder = true\xFE";
    z += "                        end if\xFE";
    z += "                    end if\xFE";
    z += "                       \xFE";
    z += "                    Point = '<Point><coordinates>':Row(\"<%=lngColumnName%>\"):',':Row(\"<%=latColumnName%>\"):'</coordinates></Point>'\xFE";
    z += "                    desc = []\xFE";
    z += "                    \xFE";
    z += "                    <% \xFE";
    z += "                        if viewModel.outputs Then\xFE";
    z += "                            oColumns = []\xFE";
    z += "                            for each OColumn As JSON in viewModel.outputs  ; // viewModel.columns\xFE";
    z += "                                oColumns[-1] = OColumn.field\xFE";
    z += "                            next\xFE";
    z += "                        Else\xFE";
    z += "                            oColumns = []\xFE";
    z += "                            for each OColumn As JSON in viewModel.columns\xFE";
    z += "                                oColumns[-1] = OColumn.name\xFE";
    z += "                            next\xFE";
    z += "                        End If\xFE";
    z += "                \xFE";
    z += "                        for each Column As JSON in viewModel.columns\xFE";
    z += "                            cName = Column.name\xFE";
    z += "                            locate cName in oColumns Setting Spot then\xFE";
    z += "                                Select Case column.datatype\xFE";
    z += "                                    Case \"guid\", \"blob\", \"password\", \"jsonarray\", \"jpg\", \"png\":\xFE";
    z += "                                        // Don't output these\xFE";
    z += "                                            \xFE";
    z += "                                    Case \"url\":\xFE";
    z += "                                        %> desc[-1] = @HtmlEncode(\"<%=cname%>: \"):'<a href=\"':Lnk:'\">':Row(\"<%=cname%>\"):'</a>' \xFE";
    z += "                                        <%\xFE";
    z += "                            \xFE";
    z += "                                    Case Else\xFE";
    z += "                                        %> desc[-1] = @HtmlEncode(\"<%=cname%>: \":Row(\"<%=cname%>\")) \xFE";
    z += "                                        <%\xFE";
    z += "                                End Select\xFE";
    z += "                            End If\xFE";
    z += "                        next\xFE";
    z += "                    %>\xFE";
    z += "                    KML[-1] = \"<Placemark><description>\":Join(Desc, \"<br />\"):\"</description>\":Point:\"</Placemark>\"\xFE";
    z += "                Next\xFE";
    z += "                \xFE";
    z += "                if nestedInFolder Then Kml[-1] = \"</Folder>\"\xFE";
    z += "                KML[-1] = \"</Document></kml>\"\xFE";
    z += "                \xFE";
    z += "                Print @Script('saveFile(\"<%=niceViewName%>.kml\", \"application/vnd.google-earth.kmz\", ':jsEscapeString(Join(KML, \"\\n\")):')')\xFE";
    z += "            End If\xFE";
    z += "        <%end if%>\xFE";
    z += "\xFE";
    z += "        Else If viewVars.lastCmd = \"Fit to Data\" Or viewVars.lastCmd = \"Reset Layout\" Or viewVars.lastCmd = \"Fit to Screen\" Then\xFE";
    z += "            dxColumns = devXGrid.DataColumns\xFE";
    z += "\xFE";
    z += "            dt = DataSource.RowHandle.Table\xFE";
    z += "            dtColumns = dt.Columns\xFE";
    z += "            dtRows = dt.Rows\xFE";
    z += "            \xFE";
    z += "            dtColCnt = dtColumns.Count\xFE";
    z += "            dtRowCount = dtRows.Count\xFE";
    z += "            \xFE";
    z += "            ShowExportBtns = True\xFE";
    z += "            If dtRowCount > 300 Then searchRowCnt = 300 Else searchRowCnt = dtRowCount\xFE";
    z += "\xFE";
    z += "            devXGrid.LoadClientLayout(\" \")\xFE";
    z += "            clearCookies = true\xFE";
    z += "\xFE";
    z += "            If viewVars.lastCmd = \"Fit to Data\" Then\xFE";
    z += "                ColWidths = []\xFE";
    z += "\xFE";
    z += "                // Get length of header columns\xFE";
    z += "                for ColNo = 1 to dxColumns.Count \xFE";
    z += "                    DC = dxColumns[ColNo-1]\xFE";
    z += "                    Caption = DC.Caption\xFE";
    z += "                    if !Caption Then Caption = DC.Name\xFE";
    z += "                    if !Caption Then Caption = dtColumns(ColNo-1).Caption\xFE";
    z += "                    CW = Len(Caption)+2\xFE";
    z += "                    if CW > 60 Then CW = 60\xFE";
    z += "                    ColWidths[ColNo] = CW\xFE";
    z += "                Next\xFE";
    z += "                \xFE";
    z += "                //  Find largest data cell\xFE";
    z += "                For RowNo = 0 To searchRowCnt - 1\xFE";
    z += "                    Row = dtRows(RowNo)\xFE";
    z += "                    For ColNo = 1 To dtColCnt\xFE";
    z += "                        V = RTrim(Row(ColNo-1))\xFE";
    z += "                        LenOfV = Len(V)\xFE";
    z += "                        if LenOfV > ColWidths[ColNo] then ColWidths[ColNo] = LenOfV\xFE";
    z += "                    Next\xFE";
    z += "                Next\xFE";
    z += "                \xFE";
    z += "                // Update Grid\xFE";
    z += "                for ColNo = 1 to dxColumns.Count \xFE";
    z += "                    DC = dxColumns[ColNo-1]\xFE";
    z += "                    CP = ColWidths[ColNo]\xFE";
    z += "                    DC.Width = CP * 11\xFE";
    z += "                Next\xFE";
    z += "                \xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            if viewVars.lastCmd = \"Fit to Screen\" Then\xFE";
    z += "                visibleColumnCnt = 0\xFE";
    z += "                for ColNo = 1 to dxColumns.Count \xFE";
    z += "                    DC = dxColumns[ColNo-1]\xFE";
    z += "                    IF DC.Visible Then visibleColumnCnt += 1\xFE";
    z += "                Next\xFE";
    z += "                \xFE";
    z += "                If !visibleColumnCnt Then visibleColumnCnt = 1\xFE";
    z += "                CP = CInt(1000 / visibleColumnCnt) / 10\xFE";
    z += "                CP = CreateObject(\"Unit(Percentage, \":CP:\")\")\xFE";
    z += "                \xFE";
    z += "                // Update Grid\xFE";
    z += "                for ColNo = 1 to dxColumns.Count \xFE";
    z += "                    DC = dxColumns[ColNo-1]\xFE";
    z += "                    DC.Width = CP\xFE";
    z += "                Next\xFE";
    z += "                \xFE";
    z += "                devXGrid.Width = CreateObject(\"Unit(Percentage, 100)\")\xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            if viewVars.lastCmd = \"Reset Layout\" Then \xFE";
    z += "                devXGrid.FilterExpression = \"\"\xFE";
    z += "                userSettings.devXGridLayout = \"\"\xFE";
    z += "            Else\xFE";
    z += "                // Record new settings\xFE";
    z += "                userSettings.devXGridLayout = devXGrid.SaveClientLayout()  \xFE";
    z += "                userSettings.devXFilter = devXGrid.FilterExpression \xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            Write userSettings.devXGridLayout On fHandle('tmp'), @UserName:\"_<%=pageName%>_<%=viewName%>_layout\" Else Null\xFE";
    z += "            Write userSettings.devXGridFilter On fHandle('tmp'), @UserName:\"_<%=pageName%>_<%=viewName%>_filter\" Else Null\xFE";
    z += "        End If\xFE";
    z += "            \xFE";
    z += "        if clearCookies Then\xFE";
    z += "            postScripts[-1] = \"ASPxClientUtils.DeleteCookie('ASPxGridViewCookies')\"\xFE";
    z += "            clearCookies = false\xFE";
    z += "        end if\xFE";
    z += "        \xFE";
    z += "        // Create an easy javaScript Handle called myGrid for debugging\xFE";
    z += "        postScripts[-1] = \"myGrid = ASPx.GetControlCollection().Get('devXGrid')\"\xFE";
    z += "\xFE";
    z += "        if UBound(preScripts) Then preScripts = @Script(Join(preScripts, crlf()))\xFE";
    z += "        if UBound(postScripts) Then postScripts = @Script(Join(postScripts, crlf()))\xFE";
    z += "        \xFE";
    z += "        Html = preScripts:Html:postScripts\xFE";
    z += "    \xFE";
    z += "    <%else%>\xFE";
    z += "        Dim gridOptions As JSON = {\xFE";
    z += "            HeadForeColor: \"<%=viewModel.headforecolor%>\", HeadBackColor: \"<%=viewModel.headbackcolor%>\",  \xFE";
    z += "            RowForeColor: \"<%=viewModel.forecolor%>\", RowBackColor: \"<%=viewModel.backcolor%>\",              \xFE";
    z += "            AltForeColor: \"<%=viewModel.altforecolor%>\", AltBackColor: \"<%=viewModel.altbackcolor%>\",\xFE";
    z += "            allowInserts: <%=viewModel.allowinserts+0%>, allowUpdates: <%=viewModel.allowupdates + 0%>, allowDeletes: <%=viewModel.allowdeletes + 0%>,         \xFE";
    z += "            WidthMultiplier: 12,\xFE";
    z += "            width100percent: UBound(viewModel.columns) < 6        \xFE";
    z += "            /*  noFilterBar: false, addRowNumbers: false, doPaging: UBound(viewModel.columns) >300, caption: \"\", addRowNumbers: false, sortname: \"colname,colname\", sortorder: \"desc,asc\", sortablerows: false */\xFE";
    z += "        }\xFE";
    z += "        \xFE";
    z += "       Html = @jsb_html.jqGrid(\"<%=niceViewName%>\", DataSource, viewModel.columns, gridOptions)\xFE";
    z += "       \xFE";
    z += "    <% End If %>\xFE";
    z += "    \xFE";
    z += "    \xFE";
    z += "   <% if viewModel.gridOpenTo And gridOpenUrl Then %>\xFE";
    z += "      Dim SelectUrl As String = \"<%=gridOpenUrl%>\"\xFE";
    z += "      <% if viewModel.passThruParams Then %>\xFE";
    z += "         if InStr(SelectUrl, \"?\") Then UrlC = \"&\" Else UrlC = \"?\"\xFE";
    z += "         SelectUrl = SelectUrl:Replace(Replace(UrlC:@QueryString, \"newRecord=1\", \"\"), \"&&\", \"&\") ;* Don't pass thru newRecord\xFE";
    z += "      <% End If %>               \xFE";
    z += "      <% // If we have any parameters other than URL, then we must post back here to save them %>\xFE";
    z += "      <% If @jsb_mdl.hasServerSideParams(viewModel) Then %>\xFE";
    z += "            // Generate the javascript code which will handle the row selected event and postback to the server\xFE";
    z += "            Html := @genEventHandler(\"rowSelected\", Null, 7 /* PostBack */, \"selectedID\") ;* selectedID = FormVar(\"selectedID\") and postBackRow = JSON(@formvar(\"postBackUrl\"))\xFE";
    z += "      <% Else %> \xFE";
    z += "            // Generate the javascript code which will handle the row selected event and redirect the browser\xFE";
    z += "            Html := @genEventHandler(\"rowSelected\", SelectUrl, <%=viewModel.gridOpenTo+0%> /* <%=eventHandlerType(viewModel.gridOpenTo+0) %> */, \"<%=viewModel.gridOpenExtra%>\", <%=viewModel.addFromUrl+0%>, <%=viewModel.passThruParams+0%>) \xFE";
    z += "      <% End If %>\xFE";
    z += "   <%Else%>\xFE";
    z += "      <%\xFE";
    z += "        // If we have outputs that are memoryVars, we need to create the memoryVar\xFE";
    z += "        Dim firstMemoryVar As Boolean = True\xFE";
    z += "        Dim jScript As Array = []\xFE";
    z += "        jScript[-1] = 'if (window._isDirty) if (!confirm(\"Abandoned your changes?\")) return false;'\xFE";
    z += "        for each Column As JSON in viewModel.outputs\xFE";
    z += "            if Column.scope = \"memoryVar\" Then\xFE";
    z += "                cname = Column.name\xFE";
    z += "                if !cname then cname = Column.field\xFE";
    z += "                if firstMemoryVar Then firstMemoryVar = False\xFE";
    z += "                jScript[-1] = 'storeVal(\"memoryVar_':niceName(cname):'\", parentDataRow[\"':Column.field:'\"])'\xFE";
    z += "                jScript[-1] = '$(\"#memoryVar_':niceName(cname):'\").trigger(\"change\")'\xFE";
    z += "                %>\xFE";
    z += "                    Dim currentVal As Object = @formVar('memoryVar_<%=niceName(cname)%>');\xFE";
    z += "                    if (currentVal) Then Html := @HIDDEN('memoryVar_<%=niceName(cname)%>', CStr(currentVal));\xFE";
    z += "                <%\xFE";
    z += "            End If\xFE";
    z += "        next\xFE";
    z += "        If !FirstMemoryVar Then\xFE";
    z += "            jScript = Replace(Join(jScript, \";\"), \"'\", \"\\\\'\")\xFE";
    z += "            %>\xFE";
    z += "                // Generate the javascript code to handle the row selected event, and update the memory variables\xFE";
    z += "                Html := @genEventHandler(\"rowSelected\", \"\", 11 /* pure javacript */, '<%=jScript%>')\xFE";
    z += "            <%\xFE";
    z += "        End If\xFE";
    z += "      %>\xFE";
    z += "   <% End If %>\xFE";
    z += "\xFE";
    z += "   <% If viewModel.gridDblOpenTo And gridDblOpenUrl Then %>\xFE";
    z += "      Dim dblSelectUrl As String = \"<%=gridDblOpenUrl%>\"\xFE";
    z += "      <% if viewModel.passDblThruParams Then %>\xFE";
    z += "         if InStr(dblSelectUrl, \"?\") Then UrlC = \"&\" Else UrlC = \"?\"\xFE";
    z += "         dblSelectUrl = dblSelectUrl:UrlC:@QueryString\xFE";
    z += "      <% End If %>               \xFE";
    z += "      <%\xFE";
    z += "            If @jsb_mdl.hasServerSideParams(viewModel) Then\xFE";
    z += "      %>\xFE";
    z += "            Html := @genEventHandler(\"dblClickRow\", \"postBackDblClick\", 7, \"selectedID\") ;* will have hidden variables url and selectedID\xFE";
    z += "      <% Else %> \xFE";
    z += "            Html := @genEventHandler(\"dblClickRow\", dblSelectUrl, <%=viewModel.gridDblOpenTo+0%> /* <%=eventHandlerType(viewModel.gridDblOpenTo+0)%> */, \"<%=viewModel.gridDblOpenExtra%>\", <%=viewModel.addDblFromUrl+0%>, <%=viewModel.passDblThruParams+0%>) \xFE";
    z += "      <% End If %>  \xFE";
    z += "   <% End If %> \xFE";
    z += "\xFE";
    z += "   Html = display_<%=niceViewName%>_extras(viewVars, Html)\xFE";
    z += "   Return Html\xFE";
    z += "End Function\xFE";
    z += "\xFE";
    z += "<%$include _display_extras%>\xFE";
    z += "\xFE";
    z += "<%if viewModel.useajax and !viewModel.usedevx then%>\xFE";
    z += "    *\xFE";
    z += "    * This is the <%=niceViewName%> AJAX callback function for the GRID ( jsGrid )\xFE";
    z += "    *\xFE";
    z += "    Restful Function gridFetch_<%=niceViewName%>(ByVal formVars As JSON, _search, nd, rows As Integer, page As Integer, sidx As Integer, sord As String, searchField As String, searchOper As String, searchString As String) As JSON\xFE";
    z += "       Dim rtnErrors As String = \"\"\xFE";
    z += "       if !gridFetch_<%=niceViewName%>(formVars, rtnErrors) Else\xFE";
    z += "            Rec = {}\xFE";
    z += "            <% For Each Column In viewModel.columns\xFE";
    z += "                If Column.name And Column.display <> \"hidden\" Then \xFE";
    z += "                    %>Rec[\"<%=Column.name%>\"] = rtnErrors\xFE";
    z += "                    <%\xFE";
    z += "                End If\xFE";
    z += "            Next\xFE";
    z += "            %>\xFE";
    z += "            \xFE";
    z += "            Return { page: 1, total: 1, records: 1, rows: [Rec] }\xFE";
    z += "       End If\xFE";
    z += "    *\xFE";
    z += "       Dim PageSize As Integer = rows\xFE";
    z += "       If PageSize < 1 Then PageSize = 1\xFE";
    z += "    \xFE";
    z += "       If sidx Then dataSet = @SortJsonArray(dataSet, Field(sidx, \"+\", 1), sord=\"asc\")\xFE";
    z += "       RowCount = Len(dataSet)\xFE";
    z += "       Dim TotalPages As Integer = CInt((RowCount / PageSize) + .99999)\xFE";
    z += "       If Page > TotalPages Then Page = TotalPages\xFE";
    z += "       If Page < 1 Then Page = 1\xFE";
    z += "       StartRow = PageSize * (Page -1) ;* Page is 1..N\xFE";
    z += "       Dim returnRows As Array = []\xFE";
    z += "       For I = 1 To PageSize\xFE";
    z += "          If StartRow + I > RowCount Then Exit For\xFE";
    z += "          returnRows[I] = dataSet[StartRow+I]\xFE";
    z += "       Next\xFE";
    z += "    \xFE";
    z += "       Dim R As JSON = { }\xFE";
    z += "       R.page = Page\xFE";
    z += "       R.total = TotalPages ;* pages\xFE";
    z += "       R.records = RowCount\xFE";
    z += "       R.rows = returnRows\xFE";
    z += "    \xFE";
    z += "       Return R\xFE";
    z += "    End Function\xFE";
    z += "<%End If%>\xFE";
    z += "\xFE";
    z += "function view_<%=niceViewName%>_gridUpdateRows(ByVal sOps As String, rtnErrors As String) As Boolean\xFE";
    z += "    if !sOps then Return True\xFE";
    z += "    Dim fTable As Table, CName As String\xFE";
    z += "    Dim ops As Array = JSon(sops) \xFE";
    z += "    \xFE";
    z += "    Dim PKName As String = \"<%=@jsb_mdl.pkColumnID(viewModel, ProjectName, viewName)%>\"\xFE";
    z += "    if !@jsb_bf.OpenTable(\"<%=viewModel.tableName%>\", \"<%=viewName%>\", fTable, rtnErrors) Then Return False\xFE";
    z += "    \xFE";
    z += "    For Each Cmd As JSON in Ops\xFE";
    z += "        If Cmd.op = \"delete\" Then\xFE";
    z += "            If Left(Cmd.id, 1) <> \"-\" Then \xFE";
    z += "                If @view_<%=niceViewName%>_deleteRow(Cmd.row[PKName], rtnErrors) Else Return False \xFE";
    z += "            End If\xFE";
    z += "        Else ;* Update or New\xFE";
    z += "            Dim Row As JSON = Cmd.updatedrow\xFE";
    z += "            Dim OldPKID As String = Cmd.originalrow[PKName]\xFE";
    z += "            \xFE";
    z += "            <%\xFE";
    z += "                // Validate Required Columns for new and update\xFE";
    z += "                for each Column As JSON in viewModel.columns\xFE";
    z += "                    if Column.required And Column.display <> \"hidden\" And Column.display <> \"gridhidden\" And (Column.canedit || Column.editable) Then\xFE";
    z += "                        cname = Column.name\xFE";
    z += "                        if !cname then cname = Column.field ;* field is required\xFE";
    z += "                        %>\xFE";
    z += "                        if Row[\"<%=CName%>\"] = \"\" Then\xFE";
    z += "                            rtnErrors = \"Column '<%=CName%>' is required for new rows.\"\xFE";
    z += "                            Return False\xFE";
    z += "                        End If\xFE";
    z += "                        <%\xFE";
    z += "                    End If\xFE";
    z += "                next\xFE";
    z += "            %>\xFE";
    z += "           \xFE";
    z += "            Dim PKID As String = Row[PKName]\xFE";
    z += "            If Cmd.op = \"new\" Then\xFE";
    z += "                 If @view_<%=niceViewName%>_writeRow(Row, PKID, rtnErrors) Else Return False\xFE";
    z += "              \xFE";
    z += "            Else If Cmd.op = \"update\" Then\xFE";
    z += "                // Put all tags from original row into the row we write\xFE";
    z += "                Dim OriginalRow As JSON\xFE";
    z += "                ReadJSON OriginalRow from fTable, OldPKID Then\xFE";
    z += "                    Row = clone(OriginalRow)\xFE";
    z += "                    Dim updatedRow As JSON = Cmd.updatedrow\xFE";
    z += "                    <%\xFE";
    z += "                    for each Column in viewModel.columns\xFE";
    z += "                        cname = Column.name\xFE";
    z += "                        if !cname then cname = Column.field\xFE";
    z += "                        if Column.display <> \"hidden\" And Column.display <> \"gridhidden\" And (Column.canedit || Column.editable) Then %>\xFE";
    z += "                            Row[\"<%=CName%>\"] = updatedRow[\"<%=CName%>\"]\xFE";
    z += "                            <%\xFE";
    z += "                        End If\xFE";
    z += "                    Next\xFE";
    z += "                %>\xFE";
    z += "                End If\xFE";
    z += "                \xFE";
    z += "                If Left(Cmd.id, 1) = \"-\" Then ;* New Row\xFE";
    z += "                     If @view_<%=niceViewName%>_writeRow(Row, PKID, rtnErrors) Else Return False\xFE";
    z += "                Else\xFE";
    z += "                    If OldPKID <> PKID And OldPKID <> \"\" Then ;*  Primary key change?\xFE";
    z += "                          If @view_<%=niceViewName%>_deleteRow(OldPKID, rtnErrors) Else Return False \xFE";
    z += "                    End If\xFE";
    z += "\xFE";
    z += "                    If @view_<%=niceViewName%>_writeRow(Row, PKID, rtnErrors) Else Return False\xFE";
    z += "                End If\xFE";
    z += "            End If\xFE";
    z += "        End If\xFE";
    z += "    Next\xFE";
    z += "    \xFE";
    z += "    Return True\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "<%$include _writeRow%>\xFE";
    z += "\xFE";
    z += "<%$include _deleteRow%>\xFE";
    z += "\xFE";
    z += "function view_<%=niceViewName%>_cancelEdits(ByVal pkID As String, ByRef rtnErrors As String) As Boolean\xFE";
    z += "   Return True\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "<%   \xFE";
    z += "    * update menu if needed\xFE";
    z += "    Call @Jsb_mdl.UpdateMenu(ProjectName)\xFE";
    z += "%>\xFE";
    z += "\xFE";
    z += "<%\xFE";
    z += "    // Generate an .aspx page for compiled versions\xFE";
    z += "    aspxSrc = []\xFE";
    z += "    aspxSrc[-1] = '<':'%@ Page Language=\"vb\" AutoEventWireup=\"false\" CodeBehind=\"':niceViewName:'.aspx.vb\" Inherits=\"WebApplication1.':niceViewName:'_AspxPage\" %':'>'\xFE";
    z += "    aspxSrc[-1] = '<':'%@ Register Assembly=\"DevExpress.Web.v19.1, Version=19.1.3.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a\" Namespace=\"DevExpress.Web\" TagPrefix=\"dx\" %':'>'\xFE";
    z += "    aspxSrc[-1] = '<!DOCTYPE html>'\xFE";
    z += "    aspxSrc[-1] = '<html>'\xFE";
    z += "    aspxSrc[-1] = '<head runat=\"server\">'\xFE";
    z += "    aspxSrc[-1] = '<asp:Literal ID=\"HeaderStuff\" runat=\"server\"></asp:Literal>'\xFE";
    z += "    aspxSrc[-1] = '</head>'\xFE";
    z += "    aspxSrc[-1] = '<body>'\xFE";
    z += "    aspxSrc[-1] = '    <asp:Literal ID=\"uptoForm\" runat=\"server\"></asp:Literal>'\xFE";
    z += "    aspxSrc[-1] = '        <form id=\"jsb\" method=\"post\" class=\"jsb\" action=\"\" enctype=\"multipart/form-data\" runat=\"server\">'\xFE";
    z += "    aspxSrc[-1] = '           <asp:Literal ID=\"upToMarker\" runat=\"server\"></asp:Literal>'\xFE";
    z += "    aspxSrc[-1] = '           <dx:ASPxGridView ID=\"':niceViewName:'\" runat=\"server\" Width=\"100%\">'\xFE";
    z += "    aspxSrc[-1] = '              <SettingsContextMenu Enabled=\"True\" EnableRowMenu=\"True\">'\xFE";
    z += "    aspxSrc[-1] = '              </SettingsContextMenu>'\xFE";
    z += "    aspxSrc[-1] = '              <SettingsPager AlwaysShowPager=\"True\" PageSize=\"15\">'\xFE";
    z += "    aspxSrc[-1] = '                  <PageSizeItemSettings Items=\"15, 30, 100, 500, 10000\" Position=\"Left\" ShowAllItem=\"True\">'\xFE";
    z += "    aspxSrc[-1] = '                  </PageSizeItemSettings>'\xFE";
    z += "    aspxSrc[-1] = '              </SettingsPager>'\xFE";
    z += "    aspxSrc[-1] = '              <Settings ColumnMaxWidth=\"2000\" HorizontalScrollBarMode=\"Auto\" ShowFilterBar=\"Visible\" ShowFilterRow=\"True\" ShowFooter=\"True\" ShowGroupPanel=\"True\" ShowHeaderFilterButton=\"True\" />'\xFE";
    z += "    aspxSrc[-1] = '              <SettingsBehavior EnableCustomizationWindow=\"True\" />'\xFE";
    z += "    aspxSrc[-1] = '              <SettingsResizing ColumnResizeMode=\"Control\" />'\xFE";
    z += "    aspxSrc[-1] = '              <SettingsExport EnableClientSideExportAPI=\"True\">'\xFE";
    z += "    aspxSrc[-1] = '              </SettingsExport>'\xFE";
    z += "    aspxSrc[-1] = '              <Toolbars>'\xFE";
    z += "    aspxSrc[-1] = '                  <dx:GridViewToolbar>'\xFE";
    z += "    aspxSrc[-1] = '                  </dx:GridViewToolbar>'\xFE";
    z += "    aspxSrc[-1] = '              </Toolbars>'\xFE";
    z += "    aspxSrc[-1] = '           </dx:ASPxGridView>'\xFE";
    z += "    aspxSrc[-1] = '           <asp:Literal ID=\"afterMarker\" runat=\"server\"></asp:Literal>'\xFE";
    z += "    aspxSrc[-1] = '        </form>'\xFE";
    z += "    aspxSrc[-1] = '    <asp:Literal ID=\"afterForm\" runat=\"server\"></asp:Literal>'\xFE";
    z += "    aspxSrc[-1] = '</body>'\xFE";
    z += "    aspxSrc[-1] = '</html>'\xFE";
    z += "    \xFE";
    z += "    Write aspxSrc On @fHandle(\"dict \":ProjectName), niceViewName:\".aspx\" Else Stop \"Form-\":System(28):\": \":@Errors\xFE";
    z += "%>"
    window.cached_jsb_viewtemplates["grid"] = z;
    var z = "{ index:20, label:'C.R.U.D' },\xFE";
    z += "\xFE";
    z += "{name:'attachdb', index: 21, label:'Attach DB', width:19, control:'dropDownBox', autopostback: true, canedit:true, required: false, addBlank: true, reffile:\"SYSTEM\", refpk:\"ItemID\" },\xFE";
    z += "{name:'tableName', index:22, label:'Table Name', datatype: 'string', width:90, control:'dropDownBox', required: false, addBlank: true, autopostback: true, canedit:true, reffile:\"{listfiles}\", pickfunction: \"picktable\"},\xFE";
    z += "{name:'header', index:22, label:'Header Text', required: false, datatype: 'string', width:90, control:'textbox', canedit:true, defaultvalue:\"{viewname}\" },\xFE";
    z += "{name:'adminBackgroundEdit', index:23, label:'Enable BK Edit', width:12, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'columns', index:24, label:'Columns', datatype: 'jsonarray', width:90, control:'json_popup', display: \"hidden\", canedit:true, reffile:\"jsb_jsondefs\", refpk:\"viewColumns\" },\xFE";
    z += "\xFE";
    z += "{name:'geninline', index:27, label:'Inline Generation', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{ index:25, label:'C.R.U.D' },\xFE";
    z += "{name:'newRecord', index:26, label:'Start w/NewRecord', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'allowNewRecord', index:27, label:'allow ID newRecord', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{ index:51, label:'CSS' },\xFE";
    z += "\xFE";
    z += "{name:'forecolor', index:52, label:'Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'backcolor', index:53, label:'Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{ index:55, label:'CSS' },\xFE";
    z += "\xFE";
    z += "{name:'font', index:56, label:'Font', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"Arial,Arial, Helvetica, sans-serif;Arial Black, 'Arial Black', Gadget, sans-serif;Comic Sans MS, 'Comic Sans MS', Textile, cursive;Courier New, 'Courier New', Courier, monospace;Georgia, Georgia, 'Times New Roman', Times, serif;Impact, Impact, Charcoal, sans-serif;Lucida Console, 'Lucida Console', Monaco, monospace;Lucida Sans Unicode, 'Lucida Sans Unicode', 'Lucida Grande', sans-serif;Palatino Linotype, 'Palatino Linotype', 'Book Antiqua', Palatino, serif;Tahoma, Tahoma, Geneva, sans-serif;Times New Roman, 'Times New Roman', Times, serif;Trebuchet MS, 'Trebuchet MS', Helvetica, sans-serif;Verdana, Verdana, Geneva, sans-serif;MS Sans Serif, 'MS Sans Serif', Geneva, sans-serif;MS Serif, 'MS Serif', 'New York', serif;\" },\xFE";
    z += "{name:'fontsize', index:57, label:'Font size', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"xx-small;x-small;small;medium;large;x-large;xx-large;smaller;larger;initial;inherit\" },\xFE";
    z += "\xFE";
    z += "{ index:60, label:'CSS' },\xFE";
    z += "{name:'boxed', index:61, label:'Boxed', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"none;solid;double;groove;ridge;inset;outset\"  },\xFE";
    z += "\xFE";
    z += "{name:'inputs', index:62, fullline: true, label:'Input Params', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add input selection', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"viewInputs\" },\xFE";
    z += "{name:'outputs', index:63, fullline: true, label:'Output Params', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add output parameter', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"viewOutputs\" },\xFE";
    z += "\xFE";
    z += "{name:'custombtns', fullline: true, index:64, label:'Custom Btns', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add custom button', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"customBtns\" },\xFE";
    z += "{name:'btnsonbot', index:65, label:'Btns on Bottom', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{name:'html', index: 70, label:'Html', width:19, control:'htmlbox', canedit:true, required: false, addBlank: true, fullline: true, defaultvalue: \"HTML text goes here\", linecnt: 20 }\xFE";
    z += "\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "************************************** <%=ProjectName%> view_<%=viewName%> HTML Block **********************************\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "* Does an substitution of {{columnNames}} into an HTML Block from @fHandle(\"DICT\", \"<%=ProjectName%>\"), \"<%=viewName%>.htm\"\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "<%\xFE";
    z += "   mayCRUD = false\xFE";
    z += "   hasDefaultValues = False\xFE";
    z += "   niceViewName = @NiceName(@DropIfRight(viewName, \".view\", true)) \xFE";
    z += "   nicEditID = \"ne_\":niceViewName\xFE";
    z += "%>\xFE";
    z += "*\xFE";
    z += "* To be compatable with the modeler and other views, we must implement these 4 routines:\xFE";
    z += "*\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON) // viewVars = { fromParentPage: '', parentMultiView: '', lastView: true }\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_checkCommands(viewVars, inCmd, ColumnID)\xFE";
    z += "*   function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "*\xFE";
    z += "\xFE";
    z += "<%$include _setup%>\xFE";
    z += "\xFE";
    z += "Function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "    <%$include _style%>\xFE";
    z += "\xFE";
    z += "    Dim Html As String = @Html('<div class=\"form-group row\"<%=Style%>>') \xFE";
    z += "    Dim Row As JSON = viewVars.Row\xFE";
    z += "    Dim RowData As JSON = viewVars.Row\xFE";
    z += "    Dim htmlBackDrop As String = viewVars.htmlBackDrop\xFE";
    z += "    <%\xFE";
    z += "    doKOBinding = false\xFE";
    z += "    For Each Column, CI In viewModel.columns\xFE";
    z += "        If Column.display <> \"hidden\" And Column.name <> \"\" Then \xFE";
    z += "            CName = Column.name\xFE";
    z += "            niceCName = @niceName(CName)\xFE";
    z += "            If doKOBinding Then niceCName = \"KO_\":niceCName\xFE";
    z += "            %>\xFE";
    z += "               Dim V As String = RowData[\"<%=CName%>\"]\xFE";
    z += "               If Left(V, 1) = \"=\" Then V = @Eval(V)\xFE";
    z += "               V = Replace(@HtmlEncode(V), CRLF(), \"<br />\")\xFE";
    z += "               htmlBackDrop = replace(htmlBackDrop, \"{{<%=CName%>}}\", V)\xFE";
    z += "               <%If CName <> niceCName Then %>\xFE";
    z += "                   htmlBackDrop = replace(htmlBackDrop, \"{{<%=niceCName%>}}\", V)\xFE";
    z += "               <%End If\xFE";
    z += "        End If\xFE";
    z += "    Next\xFE";
    z += "    %> \xFE";
    z += "    \xFE";
    z += "    If @IsAdmin Then htmlBackDrop = @jsb_mdl.enabledHtmlEditing(htmlBackDrop, \"<%=nicEditID%>\")\xFE";
    z += "    Html := htmlBackDrop\xFE";
    z += "    Html := @Html('</div>') \xFE";
    z += "\xFE";
    z += "    Html = display_<%=niceViewName%>_extras(viewVars, Html)\xFE";
    z += "    Html = @Html('<div class=\"container\">'):Html:@Html('</div>')\xFE";
    z += "    Return Html\xFE";
    z += "End Function\xFE";
    z += "\xFE";
    z += "<%$include _checkCommands%>\xFE";
    z += "\xFE";
    z += "<%$include _display_extras%>\xFE";
    z += "\xFE";
    z += "function view_<%=niceViewName%>_getPK(ByVal SqlFilter As String, ByRef pkID As String, ByRef rtnErrors As String) As Boolean\xFE";
    z += "   <%if viewModel.tableName then %>\xFE";
    z += "        Dim fTable As Table = Nothing\xFE";
    z += "        if !@jsb_bf.OpenTable(\"<%=viewModel.tableName%>\", \"<%=viewName%>\", fTable, rtnErrors) Then Return False\xFE";
    z += "        \xFE";
    z += "        Dim selectHandle As SelectList\xFE";
    z += "        select fTable to selectHandle Where SqlFilter Else\xFE";
    z += "            rtnErrors = \"Form-\":System(28):\"-Select-\":SqlFilter:\": \":@Errors\xFE";
    z += "            LogErr(rtnErrors)\xFE";
    z += "            Return False\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        ReadNext pkID From selectHandle ELse rtnErrors = \"No items found in table '<%=viewModel.tableName%>' Where \":SqlFilter\xFE";
    z += "        \xFE";
    z += "        Return True\xFE";
    z += "   <%Else%>\xFE";
    z += "        pkID = @UserName\xFE";
    z += "        Return True\xFE";
    z += "   <%End If%>\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "* Create a empty row with defaults\xFE";
    z += "function view_<%=niceViewName%>_newRow(ByRef rtnErrors As String) As JSON\xFE";
    z += "    return view_<%=niceViewName%>_setDefaults({})\xFE";
    z += "End Function\xFE";
    z += "\xFE";
    z += "<%$include _setDefaults%>\xFE";
    z += "\xFE";
    z += "<%$include _readrow%>\xFE";
    z += "\xFE";
    z += "Subroutine view_<%=niceViewName%>_Unload(viewVars As JSON)\xFE";
    z += "    * ReadJSon viewModel From @fHandle(\"DICT\", \"<%=ProjectName%>\"), \"<%=viewName%>\" Else viewModel = {}; Alert('Missing dict <%=ProjectName%>, <%=viewName%>', True)\xFE";
    z += "    * @jsb_mdl.standardUnload(viewModel.columns, viewVars.Row, false)\xFE";
    z += "End Subroutine\xFE";
    z += ""
    window.cached_jsb_viewtemplates["htmlblock"] = z;
    var z = "{ index:20, label:'C.R.U.D' },\xFE";
    z += "\xFE";
    z += "{name:'header', index:22, label:'Header Text', required: false, datatype: 'string', width:90, control:'textbox', canedit:true, defaultvalue:\"{viewname}\" },\xFE";
    z += "{name:'adminBackgroundEdit', index:23, label:'Enable BK Edit', width:12, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'columns', index:24, label:'Columns', datatype: 'jsonarray', width:90, control:'json_popup', display: \"hidden\", canedit:true, reffile:\"jsb_jsondefs\", refpk:\"viewColumns\" },\xFE";
    z += "\xFE";
    z += "{ index:51, label:'CSS' },\xFE";
    z += "{name:'useInlineHTML', index:25, label:'use inline HTML', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{name:'forecolor', index:52, label:'Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'backcolor', index:53, label:'Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{ index:55, label:'CSS' },\xFE";
    z += "\xFE";
    z += "{name:'font', index:56, label:'Font', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"Arial,Arial, Helvetica, sans-serif;Arial Black, 'Arial Black', Gadget, sans-serif;Comic Sans MS, 'Comic Sans MS', Textile, cursive;Courier New, 'Courier New', Courier, monospace;Georgia, Georgia, 'Times New Roman', Times, serif;Impact, Impact, Charcoal, sans-serif;Lucida Console, 'Lucida Console', Monaco, monospace;Lucida Sans Unicode, 'Lucida Sans Unicode', 'Lucida Grande', sans-serif;Palatino Linotype, 'Palatino Linotype', 'Book Antiqua', Palatino, serif;Tahoma, Tahoma, Geneva, sans-serif;Times New Roman, 'Times New Roman', Times, serif;Trebuchet MS, 'Trebuchet MS', Helvetica, sans-serif;Verdana, Verdana, Geneva, sans-serif;MS Sans Serif, 'MS Sans Serif', Geneva, sans-serif;MS Serif, 'MS Serif', 'New York', serif;\" },\xFE";
    z += "{name:'fontsize', index:57, label:'Font size', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"xx-small;x-small;small;medium;large;x-large;xx-large;smaller;larger;initial;inherit\" },\xFE";
    z += "\xFE";
    z += "{ index:60, label:'CSS' },\xFE";
    z += "{name:'boxed', index:61, label:'Boxed', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"none;solid;double;groove;ridge;inset;outset\"  },\xFE";
    z += "{name:'centercontents', index:61, label:'Center contents', width:12, control:'checkbox', canedit:true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{name:'outputs', index:63, fullline: true, label:'Output Params', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add output parameter', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"viewOutputs\" },\xFE";
    z += "\xFE";
    z += "{name:'custombtns', fullline: true, index:64, label:'Custom Btns', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add custom button', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"customBtns\" },\xFE";
    z += "{name:'btnsonbot', index:65, label:'Btns on Bottom', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" }\xFE";
    z += "\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "*********************************** <%=ProjectName%> view_<%=viewName%> MENU (NO_CRUD) ***********************************\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "<%\xFE";
    z += "    mayCRUD = False\xFE";
    z += "%>\xFE";
    z += "\xFE";
    z += "<%$include _form%>\xFE";
    z += ""
    window.cached_jsb_viewtemplates["nocrud_form"] = z;
    var z = "{ index:21,  name:'xCRUD', defaultvalue:'C.R.U.D', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;' },\xFE";
    z += "{name:'attachdb', index: 22, label:'Attach DB', width:19, control:'combobox', autopostback: true, canedit:true, required: false, addBlank: true, reffile:\"SYSTEM\", refpk:\"ItemID\" },\xFE";
    z += "{name:'tableName', index:23, label:'Table Name', datatype: 'string', width:90, control:'dropDownBox', required: false, addBlank: true, autopostback: true, canedit:true, reffile:\"{listfiles}\", pickfunction: \"picktable\"},\xFE";
    z += "{name:'orderby', index:24, label:'order by', datatype: 'string', suppresslabel: false, control:'textbox', canedit:true, required: false, addBlank: true, defaultvalue:\"\"},\xFE";
    z += "{name:'customSQL', index:22, label:'Custom SQL', datatype: 'string', width:90, control:'textbox', required: false, autopostback: true, canedit:true, pickfunction: \"pickcustomSQL\"},\xFE";
    z += "\xFE";
    z += "{name:'allowinserts', index:25, label:'Allow Inserts', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'allowupdates', index:26, label:'Allow Updates', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'allowdeletes', index:27, label:'Allow Deletes', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{name:'useajax', index:28, label:'use AJAX', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'usedevx', index:28, label:'use devX Pivot', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{ index: 30, name: 'xsclick', defaultvalue: 'Pivot Single Click', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;'   },\xFE";
    z += "{name:'pivotOpenTo', index:31, label:'Pivot Selection To', datatype: 'number', suppresslabel: false, control:'dropdownbox', canedit:true, required: true, addBlank: true, defaultvalue:\"10\", reflist: \"New Window,1;New Window Tab,2;Tab (name in Transfer Xtra),3;Frame (name in Transfer Xtra),4;Dialog (Title in Transfer Xtra),6;HTTP POST (Transfer Extra becomes formVar Name and contains SelectedID),7;HTTP GET,8;Current Window,10;JavaScript (in Transfer Extra),11;Top Window,12;Back,13;Next Tab,14;Previous Tab,15;Close Window,16;Return Pick Value,17\"},\xFE";
    z += "{name:'pivotOpenUrl', index:32, label:'Selection URL', datatype: 'string', suppresslabel: false, control:'combobox', canedit:true, required: false, addBlank: true, defaultvalue:\"\",  reffile:\"dict {projectname}\", refpk:\"ItemID\", refwhere:\"ItemID Like '%.page'\", pickfunction: 'edp_pick?projectName={projectname}' },\xFE";
    z += "{name:'pivotOpenExtra', index:33, label:'Transfer Xtra', datatype: 'string', suppresslabel: false, control:'textbox', canedit:true, required: false, addBlank: true, defaultvalue:\"\"},\xFE";
    z += "{name:'passThruParams', index:34, label:'pass Url Params', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'addFromUrl', index:35, label:'add From Url', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{ index: 40, name: 'xdclick', defaultvalue: 'Pivot Double Click', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;'  },\xFE";
    z += "{name:'pivotDblOpenTo', index:41, label:'dblClick Selection To', datatype: 'number', suppresslabel: false, control:'dropdownbox', canedit:true, required: false, addBlank: true, defaultvalue:\"\", reflist: \"New Window,1;New Window Tab,2;Tab (name in Transfer Xtra),3;Frame (name in Transfer Xtra),4;Dialog (Title in Transfer Xtra),6;HTTP POST (Transfer Extra becomes formVar Name and contains SelectedID),7;HTTP GET,8;Current Window,10;JavaScript (in Transfer Extra),11;Top Window,12;Back,13;Next Tab,14;Previous Tab,15;Close Window,16;Return Pick Value,17\"},\xFE";
    z += "{name:'pivotDblOpenUrl', index:42, label:'dblClick URL', datatype: 'string', suppresslabel: false, control:'combobox', canedit:true, required: false, addBlank: true, defaultvalue:\"\",  reffile:\"dict {projectname}\", refpk:\"ItemID\", refwhere:\"ItemID Like '%.page'\", pickfunction: 'edp_pick?projectName={projectname}' },\xFE";
    z += "{name:'pivotDblOpenExtra', index:43, label:'dblClick Xtra', datatype: 'string', suppresslabel: false, control:'textbox', canedit:true, required: false, addBlank: true, defaultvalue:\"\"},\xFE";
    z += "{name:'passDblThruParams', index:44, label:'dblClick pass Url Params', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'addDblFromUrl', index:45, label:'dblClick add From Url', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "\xFE";
    z += "{ index:50, name:'xuicss', defaultvalue:'UI CSS', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;' },\xFE";
    z += "\xFE";
    z += "{name:'header', index:51, label:'Header Text', required: false, datatype: 'string', width:90, control:'textbox', canedit:true, defaultvalue:\"{viewname}\" },\xFE";
    z += "\xFE";
    z += "{name:'headforecolor', index:52, label:'Header Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'headbackcolor', index:53, label:'Header Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{name:'forecolor', index:54, label:'Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'backcolor', index:52, label:'Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{name:'altforecolor', index:55, label:'Alt Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'altbackcolor', index:56, label:'Alt Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{name:'font', index:57, label:'Font', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"Arial,Arial, Helvetica, sans-serif;Arial Black, 'Arial Black', Gadget, sans-serif;Comic Sans MS, 'Comic Sans MS', Textile, cursive;Courier New, 'Courier New', Courier, monospace;Georgia, Georgia, 'Times New Roman', Times, serif;Impact, Impact, Charcoal, sans-serif;Lucida Console, 'Lucida Console', Monaco, monospace;Lucida Sans Unicode, 'Lucida Sans Unicode', 'Lucida Grande', sans-serif;Palatino Linotype, 'Palatino Linotype', 'Book Antiqua', Palatino, serif;Tahoma, Tahoma, Geneva, sans-serif;Times New Roman, 'Times New Roman', Times, serif;Trebuchet MS, 'Trebuchet MS', Helvetica, sans-serif;Verdana, Verdana, Geneva, sans-serif;MS Sans Serif, 'MS Sans Serif', Geneva, sans-serif;MS Serif, 'MS Serif', 'New York', serif;\" },\xFE";
    z += "{name:'fontsize', index:58, label:'Font size', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"xx-small;x-small;small;medium;large;x-large;xx-large;smaller;larger;initial;inherit\" },\xFE";
    z += "{name:'boxed', index:59, label:'Boxed', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"none;solid;double;groove;ridge;inset;outset\"  },\xFE";
    z += "\xFE";
    z += "{ index:70,  name:'xio', defaultvalue:'Input / Output Parameters', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;' },\xFE";
    z += "\xFE";
    z += "{name:'inputs', index:74, fullline: true, label:'Input Params', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add input selection', rmvrowtxt:'remove', form: 'pivot', reffile:\"jsb_jsondefs\", refpk:\"viewInputs\" },\xFE";
    z += "{name:'outputs', index:75, fullline: true, label:'Output Params', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add output parameter', rmvrowtxt:'remove', form: 'pivot', reffile:\"jsb_jsondefs\", refpk:\"viewOutputs\" },\xFE";
    z += "{name:'dynamicinputs', index:77, fullline: true, label:'Auto Ajax Filters', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add AJax Filter', rmvrowtxt:'remove', form: 'pivot', reffile:\"jsb_jsondefs\", refpk:\"viewInputs\" },\xFE";
    z += "\xFE";
    z += "{name:'custombtns', fullline: true, index:80, label:'Custom Btns', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add custom button', rmvrowtxt:'remove', form: 'pivot', reffile:\"jsb_jsondefs\", refpk:\"customBtns\" },\xFE";
    z += "{name:'btnsonbot', index:81, label:'Btns on Bottom', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{name:'devXPivotLayout', index:51, label:'devX Layout', required: false, datatype: 'string', width:90, control:'textbox', pickfunction: \"pickcustomFormat\"}\xFE";
    z += "\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "************************************************** <%=viewName%> Pivot View *********************************************\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "<%\xFE";
    z += "   ** Function genCodeStub(ProjectName, pageName, pageModel, viewName, viewModel, TemplateFileName) \xFE";
    z += "   ** We return the array GEN[]\xFE";
    z += "   **\xFE";
    z += "   niceViewName = @NiceName(@DropIfRight(viewName, \".view\", true)) \xFE";
    z += "   nicEditID = \"ne_\":niceViewName\xFE";
    z += "   mayCRUD = viewModel.allowNewRecord Or viewModel.allowupdates Or viewModel.allowdeletes Or viewModel.newRecord\xFE";
    z += "   doKOBinding = false\xFE";
    z += "   \xFE";
    z += "    if viewModel.tableName = \"\" Then\xFE";
    z += "        @Alert(\"You don't have a Table Name defined in your view : \" : viewName, True)\xFE";
    z += "        Return 0\xFE";
    z += "    End If\xFE";
    z += "   \xFE";
    z += "    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\xFE";
    z += "    // Verify viewModel for pivot selections [ * needs a URL: (>1 And <= 10) Or 12], or no need: >= 13 or  = 11\xFE";
    z += "    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\xFE";
    z += "    \xFE";
    z += "    //  * 1 open in a new window with ?xxx={id} (if containerName given then it is Url Extra)\xFE";
    z += "    //  * 2 open in a new window tab with ?containerName=idvalue (if containerName given then it is Url Extra)\xFE";
    z += "    //  * 3 open in a new jQuery Tab. Tab is is 4th parameter containerName\xFE";
    z += "    //  * 4 open in an new or existing IFRAME whose id is containerName\xFE";
    z += "    //  * 5 open in a DIV whose id is containerName\xFE";
    z += "    //  * 6 open in a jQuery Model DIalog (Title of dialog is containerName)\xFE";
    z += "    //  * 7 postback : \xFE";
    z += "    //               Makes a FormVar('postBackUrl') which is parentDataRow\xFE";
    z += "    //               Makes a FormVar('postBackTitle') which is eventName\xFE";
    z += "    //               Makes a FormVar(containerName) which is SelectedID\xFE";
    z += "    //               - create this with print @genEventHandler(eventName /* put into @FormVar('postBackTitle') */, Url /*unused*/, 7, 'containerName' /* FormVar(containerName) gets SelectedID */ ):\xFE";
    z += "    //  * 8 httpget from Url with {id} (if containerName given then it is Url Extra)\xFE";
    z += "    //  * 9 (Unused)\xFE";
    z += "    //  * 10 open in current window (if containerName given then it is Url Extra)\xFE";
    z += "    //    11 pure javascript in containerName\xFE";
    z += "    //  * 12 open in top window (if containerName given then it is Url Extra)\xFE";
    z += "    //    13 Back Page: due window history back (uses fromPage if it exists)\xFE";
    z += "    //    14 Next Tab\xFE";
    z += "    //    15 Previous Tab\xFE";
    z += "    //    16 Close Window\xFE";
    z += "    //    17 Return a PICK value\xFE";
    z += "    //    18 Force jqPivot to reload (containerName is jqPivotID) - does $('#':jqPivotID).trigger( 'reloadPivot' );\xFE";
    z += "\xFE";
    z += "    pivotOpenUrl = Trim(@DropIfRight(viewModel.pivotOpenUrl, '.page'))\xFE";
    z += "    if pivotOpenUrl Then \xFE";
    z += "        If InStr(pivotOpenUrl, \"//\") = 0 And Left(pivotOpenUrl, 1) = \"/\" Then pivotOpenUrl = Mid(pivotOpenUrl, 2)\xFE";
    z += "        op = @jsb_mdl.UrlOutputParams(viewModel.outputs) \xFE";
    z += "        if instr(pivotOpenUrl, \"?\") then op = replace(op, \"?\", \"&\")\xFE";
    z += "        pivotOpenUrl := op\xFE";
    z += "\xFE";
    z += "        If viewModel.pivotOpenTo = 11  Or viewModel.pivotOpenTo >= 13 Then // No need for URL\xFE";
    z += "            If MsgBox(\"Your pivot (\":niceViewName:\") has a Non-URL 'Pivot Selection To' action (\":eventHandlerType(viewModel.pivotOpenTo):\") and a URL defined (\":pivotOpenUrl:\").  Remove the URL?\", \"Yes,*No\") = \"Yes\" Then\xFE";
    z += "                remove viewModel, \"pivotOpenUrl\"\xFE";
    z += "                ReadJSON testExistance from fhandle('dict', ProjectName), viewName Then WriteJSON viewModel On fhandle('dict', ProjectName), viewName\xFE";
    z += "            End If\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "    ElseIf (viewModel.pivotOpenTo >= 1 And viewModel.pivotOpenTo < 10) Or viewModel.pivotOpenTo = 12 Then // Need a URL\xFE";
    z += "        If MsgBox(\"Your pivot (\":niceViewName:\") has a 'Pivot Selection To' action (\":eventHandlerType(viewModel.pivotOpenTo):\"), but no URL defined.  Remove the click action?\", \"Yes,*No\") = \"Yes\" Then\xFE";
    z += "            remove viewModel, \"pivotOpenTo\"\xFE";
    z += "            ReadJSON testExistance from fhandle('dict', ProjectName), viewName Then WriteJSON viewModel On fhandle('dict', ProjectName), viewName Else MsgBox(\"Could not find model\"); Debug\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "   pivotDblOpenUrl = Trim(@DropIfRight(viewModel.pivotDblOpenUrl, '.page'))\xFE";
    z += "   if pivotDblOpenUrl then\xFE";
    z += "        If InStr(pivotDblOpenUrl, \"//\") = 0 And Left(pivotDblOpenUrl, 1) = \"/\" Then pivotDblOpenUrl = Mid(pivotDblOpenUrl, 2)\xFE";
    z += "        op = @jsb_mdl.UrlOutputParams(viewModel.outputs) \xFE";
    z += "        if instr(pivotDblOpenUrl, \"?\") then op = replace(op, \"?\", \"&\")\xFE";
    z += "        pivotDblOpenUrl := op\xFE";
    z += "            \xFE";
    z += "        if viewModel.pivotDblOpenTo = 11 Or viewModel.pivotDblOpenTo >= 13 Then // No need for URL\xFE";
    z += "            If MsgBox(\"Your pivot (\":niceViewName:\") has a Non-URL 'dblClick Selection To' action (\":eventHandlerType(viewModel.pivotDblOpenTo):\") and a URL defined (\":pivotDblOpenUrl:\").  Remove the URL?\", \"Yes,*No\") = \"Yes\" Then\xFE";
    z += "                remove viewModel, \"pivotDblOpenUrl\"\xFE";
    z += "                ReadJSON testExistance from fhandle('dict', ProjectName), viewName Then WriteJSON viewModel On fhandle('dict', ProjectName), viewName Else MsgBox(\"Could not find model\"); Debug\xFE";
    z += "            End If\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "    ElseIf (viewModel.pivotDblOpenTo >= 1 And viewModel.pivotDblOpenTo < 10) Or viewModel.pivotDblOpenTo = 12 Then // Need a URL\xFE";
    z += "        If MsgBox(\"Your pivot (\":niceViewName:\") has a 'dblClick Selection To' action (\":eventHandlerType(viewModel.pivotDblOpenTo):\"), but no URL defined.  Remove the dblClick action?\", \"Yes,*No\") = \"Yes\" Then\xFE";
    z += "            remove viewModel, \"pivotDblOpenTo\"\xFE";
    z += "            ReadJSON testExistance from fhandle('dict', ProjectName), viewName Then WriteJSON viewModel On fhandle('dict', ProjectName), viewName Else MsgBox(\"Could not find model\"); Debug\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "   \xFE";
    z += "    // C)ontainerName parameter (Required by 3,4,5,6,7,11 & 18, Optional for 1,2,8,10, & 12)\xFE";
    z += "    if !viewModel.pivotOpenExtra Then\xFE";
    z += "        If (viewModel.pivotOpenTo >= 3 And viewModel.pivotOpenTo < 7) Or (viewModel.pivotOpenTo = 11 Or viewModel.pivotOpenTo = 18) Then\xFE";
    z += "            MsgBox(\"You must specify more information in the 'Transfer Xtra' metadata field for action (\":eventHandlerType(viewModel.pivotOpenTo):\"; view: \":viewName)\xFE";
    z += "        ElseIf viewModel.pivotOpenTo = 7 Then\xFE";
    z += "            MsgBox(\"You must specify a your javascript in the 'Transfer Xtra' metadata field for action (\":eventHandlerType(viewModel.pivotOpenTo):\"; view: \":viewName)\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    if !viewModel.pivotDblOpenExtra Then\xFE";
    z += "        If (viewModel.pivotDblOpenTo >= 3 And viewModel.pivotDblOpenTo < 7) Or (viewModel.pivotDblOpenTo = 11 Or viewModel.pivotDblOpenTo = 18) Then\xFE";
    z += "            MsgBox(\"You must specify more information in the 'dblClick Xtra' metadata field for action (\":eventHandlerType(viewModel.pivotDblOpenTo):\"; view: \":viewName)\xFE";
    z += "        ElseIf viewModel.pivotDblOpenTo = 7 Then\xFE";
    z += "            MsgBox(\"You must specify a your javascript in the 'dblClick Xtra' metadata field for action (\":eventHandlerType(viewModel.pivotDblOpenTo):\"; view: \":viewName)\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    hasSpecialOutputs = False\xFE";
    z += "    for each Column in viewModel.outputs\xFE";
    z += "        If Column.scope = \"SessionVar\" Or Column.scope = \"ApplicationVar\" Or Column.scope = \"ProfileVar\" Then\xFE";
    z += "            hasSpecialOutputs = True\xFE";
    z += "            break\xFE";
    z += "        End If\xFE";
    z += "    next\xFE";
    z += "            \xFE";
    z += "%>\xFE";
    z += "*\xFE";
    z += "* To be compatable with the modeler and other views, we must implement these 4 routines:\xFE";
    z += "*\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON) // viewVars = { fromParentPage: '', parentMultiView: '', lastView: true }\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_checkCommands(viewVars, inCmd, ColumnID)\xFE";
    z += "*   function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "*\xFE";
    z += "Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON)\xFE";
    z += "    <% if viewModel.attachdb then %>\xFE";
    z += "        AttachDB \"<%=viewModel.attachdb%>\" else Stop @Errors\xFE";
    z += "    <% end if %>\xFE";
    z += "    \xFE";
    z += "    if !viewVars.devXPivotLayout Then\xFE";
    z += "        Read devXPivotLayout From fHandle('tmp'), @UserName:\"_<%=pageName%>_<%=viewName%>\" Then\xFE";
    z += "            viewVars.devXPivotLayout = devXPivotLayout\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "    if viewVars.devXPivotLayout = \"null\" or !viewVars.devXPivotLayout Then viewVars.devXPivotLayout = \"\"\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "    <%if viewModel.usedevx then%>\xFE";
    z += "        Cmd = @formVar('Btn')\xFE";
    z += "        If Cmd = \"Reset Layout\" Then\xFE";
    z += "            viewVars.devXPivotLayout = \"\"\xFE";
    z += "            Write viewVars.devXPivotLayout On fHandle('tmp'), @UserName:\"_<%=pageName%>_<%=viewName%>\" Else Null\xFE";
    z += "        Else\xFE";
    z += "            myPage = System(29)\xFE";
    z += "            if myPage Then viewVars.devXPivotLayout = myPage.myLastLayout\xFE";
    z += "            Write viewVars.devXPivotLayout On fHandle('tmp'), @UserName:\"_<%=pageName%>_<%=viewName%>\" Else Null\xFE";
    z += "        End If\xFE";
    z += "    <%Else%>\xFE";
    z += "        <% if hasSpecialOutputs Then %>\xFE";
    z += "           postBackCmd = @formvar(\"postBackTitle\")\xFE";
    z += "           if postBackCmd then\xFE";
    z += "              postBackRow = JSON(@formvar(\"postBackUrl\"))\xFE";
    z += "              <%\xFE";
    z += "                    // If we have any parameters for Session, Application or Profile, save them\xFE";
    z += "                    for each Column in viewModel.outputs\xFE";
    z += "                        If Column.name = \"\" Then Column.name = Column.field\xFE";
    z += "                        Select Case Column.scope \xFE";
    z += "                           case \"SessionVar\"\xFE";
    z += "                              %> @Session[\"<%=Column.name%>\"] = postBackRow[\"<%=Column.field%>\"] \xFE";
    z += "                              <%\xFE";
    z += "                              \xFE";
    z += "                           case \"ApplicationVar\"\xFE";
    z += "                              %> @Application[\"<%=Column.name%>\"] = postBackRow[\"<%=Column.field%>\"] \xFE";
    z += "                              <%\xFE";
    z += "                              \xFE";
    z += "                           case \"ProfileVar\"\xFE";
    z += "                              %> @profilevar(\"<%=Column.name%>\", postBackRow[\"<%=Column.field%>\"])\xFE";
    z += "                              <%\xFE";
    z += "                        end select\xFE";
    z += "                    next\xFE";
    z += "                %>\xFE";
    z += "            End If\xFE";
    z += "        <% End If %>\xFE";
    z += "        \xFE";
    z += "        viewVars.PivotOperations = @formvar(\"<%=niceViewName%>_ops\")\xFE";
    z += "    <%End If%>\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "function view_<%=niceViewName%>_isDirty(ByRef viewVars As JSON) As String\xFE";
    z += "   Return False\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "<%$include _checkCommands%>\xFE";
    z += "\xFE";
    z += "Function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "    * Get our column definitions from the Model Designer (from table Views and !items in Dict of <%=viewModel.tableName%>)\xFE";
    z += "    ReadJSON viewModel From @fHandle(\"DICT\", \"<%=ProjectName%>\"), \"<%=viewName%>\" Else viewModel = @jsb_mdl.createNewView(\"<%=viewName%>\")\xFE";
    z += "   \xFE";
    z += "    <%if viewModel.useajax and !viewModel.usedevx then%>\xFE";
    z += "        <%= @jsb_mdl.UrlPassThrough(viewModel) ; // This will setup UrlParams %>\xFE";
    z += "        DataSource = \"pivotFetch_<%=niceViewName%>\":UrlParams\xFE";
    z += "    <%Else%>\xFE";
    z += "        DataSource = pivotFetch_<%=niceViewName%>(@FormVars, rtnErrors)\xFE";
    z += "        If rtnErrors Then\xFE";
    z += "            Return rtnErrors:crlf():@Button('backErr', \"Back\", { onclick: \"window.history.go(-2);\" } )\xFE";
    z += "        End If\xFE";
    z += "    <%End If%>\xFE";
    z += "   \xFE";
    z += "    <%if viewModel.usedevx then %>\xFE";
    z += "        // ToolBar := @Submitbtn(\"Btn\", \"Save Layout\")\xFE";
    z += "        ToolBar := @Submitbtn(\"Btn\", \"Reset Layout\")\xFE";
    z += "        ToolBar := @Button('BtnShowdd', \"Column Drag & Drop\", {\xFE";
    z += "            onclick:'if (<%=niceViewName%>.IsCustomizationWindowVisible()) <%=niceViewName%>.ShowCustomizationWindow($(\"#BtnShowdd\")[0]); else <%=niceViewName%>.ShowCustomizationWindow()'\xFE";
    z += "        } )\xFE";
    z += "        \xFE";
    z += "        Print @(-1): // Reset page\xFE";
    z += "    \xFE";
    z += "        // Load last layout\xFE";
    z += "        myPage = System(29)\xFE";
    z += "        If myPage Then\xFE";
    z += "            devXPivot = myPage.getControl(pivotID)\xFE";
    z += "            If devXPivot Then devXPivot.LoadLayoutFromString(viewVars.devXPivotLayout)\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        HtmlPivot = @jsb_html.devXPivot(\"<%=niceViewName%>\", DataSource, viewModel.devXPivotLayout)\xFE";
    z += "        Html = Rows2(\"%\", HtmlPivot, \"40px\", ToolBar, \"overflow:hidden\", \"overflow:hidden\")\xFE";
    z += "        \xFE";
    z += "    <%else%>\xFE";
    z += "    \xFE";
    z += "        pivotOptions = {\xFE";
    z += "            HeadForeColor: \"<%=viewModel.headforecolor%>\", HeadBackColor: \"<%=viewModel.headbackcolor%>\",  \xFE";
    z += "            RowForeColor: \"<%=viewModel.forecolor%>\", RowBackColor: \"<%=viewModel.backcolor%>\",              \xFE";
    z += "            AltForeColor: \"<%=viewModel.altforecolor%>\", AltBackColor: \"<%=viewModel.altbackcolor%>\",\xFE";
    z += "            allowInserts: <%=viewModel.allowinserts+0%>, allowUpdates: <%=viewModel.allowupdates + 0%>, allowDeletes: <%=viewModel.allowdeletes + 0%>,         \xFE";
    z += "            WidthMultiplier: 12,\xFE";
    z += "            width100percent: UBound(viewModel.columns) < 6        \xFE";
    z += "            /*  noFilterBar: false, addRowNumbers: false, doPaging: UBound(viewModel.columns) >300, caption: \"\", addRowNumbers: false, sortname: \"colname,colname\", sortorder: \"desc,asc\", sortablerows: false */\xFE";
    z += "        }\xFE";
    z += "        \xFE";
    z += "       Html = @jsb_html.jqPivot(\"<%=niceViewName%>\", DataSource, viewModel.columns, pivotOptions)\xFE";
    z += "    <% End If %>\xFE";
    z += "    \xFE";
    z += "    \xFE";
    z += "   <% if viewModel.pivotOpenTo And pivotOpenUrl Then %>\xFE";
    z += "      SelectUrl = \"<%=pivotOpenUrl%>\"\xFE";
    z += "      <% if viewModel.passThruParams Then %>\xFE";
    z += "         if InStr(SelectUrl, \"?\") Then UrlC = \"&\" Else UrlC = \"?\"\xFE";
    z += "         SelectUrl = SelectUrl:Replace(Replace(UrlC:@QueryString, \"newRecord=1\", \"\"), \"&&\", \"&\") ;* Don't pass thru newRecord\xFE";
    z += "      <% End If %>               \xFE";
    z += "      <% // If we have any parameters other than URL, then we must post back here to save them %>\xFE";
    z += "      <% If @jsb_mdl.hasServerSideParams(viewModel) Then %>\xFE";
    z += "            Html := @genEventHandler(\"rowSelected\", Null, 7 /* PostBack */, \"selectedID\") ;* selectedID = FormVar(\"selectedID\") and postBackRow = JSON(@formvar(\"postBackUrl\"))\xFE";
    z += "      <% Else %> \xFE";
    z += "            Html := @genEventHandler(\"rowSelected\", SelectUrl, <%=viewModel.pivotOpenTo+0%> /* <%=eventHandlerType(viewModel.pivotOpenTo+0) %> */, \"<%=viewModel.pivotOpenExtra%>\", <%=viewModel.addFromUrl+0%>, <%=viewModel.passThruParams+0%>) \xFE";
    z += "      <% End If %>\xFE";
    z += "   <%Else%>\xFE";
    z += "      <%\xFE";
    z += "        // If we have outputs that are memoryVars, we need to create the memoryVar\xFE";
    z += "        firstMemoryVar = True\xFE";
    z += "        jScript = []\xFE";
    z += "        for each Column in viewModel.outputs\xFE";
    z += "            if Column.scope = \"memoryVar\" Then\xFE";
    z += "                cname = Column.name\xFE";
    z += "                if !cname then cname = Column.field\xFE";
    z += "                if firstMemoryVar Then firstMemoryVar = False\xFE";
    z += "                jScript[-1] = 'storeVal(\"memoryVar_':niceName(cname):'\", parentDataRow[\"':Column.field:'\"])'\xFE";
    z += "                jScript[-1] = '$(\"#memoryVar_':niceName(cname):'\").trigger(\"change\")'\xFE";
    z += "                %>\xFE";
    z += "                    Html := @HIDDEN('memoryVar_<%=niceName(cname)%>')\xFE";
    z += "                <%\xFE";
    z += "            End If\xFE";
    z += "        next\xFE";
    z += "        If !FirstMemoryVar Then\xFE";
    z += "            jScript = Replace(Join(jScript, \";\"), \"'\", \"\\\\'\")\xFE";
    z += "            %>\xFE";
    z += "                // Update memoryVars on select\xFE";
    z += "                Html := @genEventHandler(\"rowSelected\", \"\", 11 /* pure javacript */, '<%=jScript%>')\xFE";
    z += "            <%\xFE";
    z += "        End If\xFE";
    z += "      %>\xFE";
    z += "   <% End If %>\xFE";
    z += "\xFE";
    z += "   <% If viewModel.pivotDblOpenTo And pivotDblOpenUrl Then %>\xFE";
    z += "      dblSelectUrl = \"<%=pivotDblOpenUrl%>\"\xFE";
    z += "      <% if viewModel.passDblThruParams Then %>\xFE";
    z += "         if InStr(dblSelectUrl, \"?\") Then UrlC = \"&\" Else UrlC = \"?\"\xFE";
    z += "         dblSelectUrl = dblSelectUrl:UrlC:@QueryString\xFE";
    z += "      <% End If %>               \xFE";
    z += "      <%\xFE";
    z += "            If @jsb_mdl.hasServerSideParams(viewModel) Then\xFE";
    z += "      %>\xFE";
    z += "            Html := @genEventHandler(\"dblClickRow\", \"postBackDblClick\", 7, \"selectedID\") ;* will have hidden variables url and selectedID\xFE";
    z += "      <% Else %> \xFE";
    z += "            Html := @genEventHandler(\"dblClickRow\", dblSelectUrl, <%=viewModel.pivotDblOpenTo+0%> /* <%=eventHandlerType(viewModel.pivotDblOpenTo+0)%> */, \"<%=viewModel.pivotDblOpenExtra%>\", <%=viewModel.addDblFromUrl+0%>, <%=viewModel.passDblThruParams+0%>) \xFE";
    z += "      <% End If %>  \xFE";
    z += "   <% End If %> \xFE";
    z += "\xFE";
    z += "   Html = display_<%=niceViewName%>_extras(viewVars, Html)\xFE";
    z += "   Return Html\xFE";
    z += "End Function\xFE";
    z += "\xFE";
    z += "<%$include _display_extras%>\xFE";
    z += "\xFE";
    z += "\xFE";
    z += "<%if viewModel.useajax and !viewModel.usedevx then%>\xFE";
    z += "    *\xFE";
    z += "    * This is the <%=niceViewName%> AJAX callback function for the pivot ( jspivot )\xFE";
    z += "    *\xFE";
    z += "    Restful Function pivotFetch_<%=niceViewName%>(ByVal formVars As JSON, _search, nd, rows As Integer, page As Integer, sidx As Integer, sord As String, searchField As String, searchOper As String, searchString As String) As JSON\xFE";
    z += "       Dim rtnErrors As String = \"\"\xFE";
    z += "       if !pivotFetch_<%=niceViewName%>(formVars, rtnErrors) Else\xFE";
    z += "            Rec = {}\xFE";
    z += "            <% For Each Column In viewModel.columns\xFE";
    z += "                If Column.name And Column.display <> \"hidden\" Then \xFE";
    z += "                    %>Rec[\"<%=Column.name%>\"] = rtnErrors\xFE";
    z += "                    <%\xFE";
    z += "                End If\xFE";
    z += "            Next\xFE";
    z += "            %>\xFE";
    z += "            \xFE";
    z += "            Return { page: 1, total: 1, records: 1, rows: [Rec] }\xFE";
    z += "       End If\xFE";
    z += "    *\xFE";
    z += "       Dim PageSize As Integer = rows\xFE";
    z += "       If PageSize < 1 Then PageSize = 1\xFE";
    z += "    \xFE";
    z += "       If sidx Then dataSet = @SortJsonArray(dataSet, Field(sidx, \"+\", 1), sord=\"asc\")\xFE";
    z += "       RowCount = Len(dataSet)\xFE";
    z += "       Dim TotalPages As Integer = CInt((RowCount / PageSize) + .99999)\xFE";
    z += "       If Page > TotalPages Then Page = TotalPages\xFE";
    z += "       If Page < 1 Then Page = 1\xFE";
    z += "       StartRow = PageSize * (Page -1) ;* Page is 1..N\xFE";
    z += "       Dim returnRows As Array = []\xFE";
    z += "       For I = 1 To PageSize\xFE";
    z += "          If StartRow + I > RowCount Then Exit For\xFE";
    z += "          returnRows[I] = dataSet[StartRow+I]\xFE";
    z += "       Next\xFE";
    z += "    \xFE";
    z += "       Dim R As JSON = { }\xFE";
    z += "       R.page = Page\xFE";
    z += "       R.total = TotalPages ;* pages\xFE";
    z += "       R.records = RowCount\xFE";
    z += "       R.rows = returnRows\xFE";
    z += "    \xFE";
    z += "       Return R\xFE";
    z += "    End Function\xFE";
    z += "<%End If%>\xFE";
    z += "\xFE";
    z += "Function pivotFetch_<%=niceViewName%>(ByVal formVars As JSON, ByRef rtnErrors As String) As Array\xFE";
    z += "    Dim selectHandle As SelectList, SqlFilter As String = \"\", SqlColumns As String = \"\"\xFE";
    z += "    \xFE";
    z += "    <% if viewModel.attachdb Then %>\xFE";
    z += "    AttachDB \"<%=viewModel.attachdb%>\" else rtnErrors = @Errors; Return Null\xFE";
    z += "    <%End If%>\xFE";
    z += "   \xFE";
    z += "    <%= @jsb_mdl.buildSqlSelect(viewModel, true)%>\xFE";
    z += "    \xFE";
    z += "    If rtnErrors Then Return Null\xFE";
    z += "   \xFE";
    z += "    <% if viewModel.customSQL Then\xFE";
    z += "        I = InStrI(viewModel.customSQL, \" from \":viewModel.tableName)\xFE";
    z += "        if I then\xFE";
    z += "            Columns = RTrim(LTrim(Left(viewModel.customSQL, I-1)))\xFE";
    z += "            SqlFilter = mid(viewModel.customSQL, I + Len(\" from \":viewModel.tableName))\xFE";
    z += "            if lcase(fieldLeft(Columns, ' ')) = 'select' then Columns = LTrim(DropLeft(Columns, ' '))\xFE";
    z += "            if Columns And Columns <> \"*\" Then \xFE";
    z += "            %>SqlColumns = \"<%=Replace(Columns, '\"', '\\\\\"')%>\"\xFE";
    z += "            <%\xFE";
    z += "            End If\xFE";
    z += "            if SqlFilter Then  \xFE";
    z += "            %>\xFE";
    z += "               SqlFilter := \"<%=Replace(SqlFilter, '\"', '\\\\\"')%>\"\xFE";
    z += "            <% \xFE";
    z += "            End If \xFE";
    z += "        %>\xFE";
    z += "            if !@jsb_bf.OpenTable(\"<%=viewModel.tableName%>\", \"<%=viewName%>\", fTable, rtnErrors) Then Return Null\xFE";
    z += "            Select SqlColumns From fTable to selectHandle Where SqlFilter Then\xFE";
    z += "        <%Else%>\xFE";
    z += "            SqlSelect \"<%=Replace(viewModel.customSQL, '\"', '\\\\\"')%>\":Iff(SqlFilter, \" Where \":SqlFilter, \"\") To selectHandle Then\xFE";
    z += "        <%End If%>\xFE";
    z += "    <%Else%>\xFE";
    z += "        if !SqlColumns Then SqlColumns = \"*\"\xFE";
    z += "        if !@jsb_bf.OpenTable(\"<%=viewModel.tableName%>\", \"<%=viewName%>\", fTable, rtnErrors) Then Return Null\xFE";
    z += "        Select SqlColumns From fTable to selectHandle Where SqlFilter Then\xFE";
    z += "    <%End If%>\xFE";
    z += "    <%if viewModel.usedevx then%>\xFE";
    z += "         Return selectHandle  // Return SelectHandle as datasourc for devX components\xFE";
    z += "    <%else%>\xFE";
    z += "        dataSet = GetList(selectHandle)\xFE";
    z += "        Return dataSet\xFE";
    z += "    <%End If%>\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    rtnErrors = \"Pivot-\":System(28):\": \":@Errors\xFE";
    z += "    LogErr(rtnErrors)\xFE";
    z += "    Return Null\xFE";
    z += "end function\xFE";
    z += ""
    window.cached_jsb_viewtemplates["pivot"] = z;
    var z = "{ index:20, label:'C.R.U.D' },\xFE";
    z += "\xFE";
    z += "{name:'attachdb', index: 21, label:'Attach DB', width:19, control:'dropDownBox', autopostback: true, canedit:true, required: false, addBlank: true, reffile:\"SYSTEM\", refpk:\"ItemID\" },\xFE";
    z += "{name:'tableName', index:22, label:'Table Name', datatype: 'string', width:90, control:'dropDownBox', required: false, addBlank: true, autopostback: true, canedit:true, reffile:\"{listfiles}\", pickfunction: \"picktable\"},\xFE";
    z += "{name:'orderby', index:24, label:'order by', datatype: 'string', suppresslabel: false, control:'textbox', canedit:true, required: false, addBlank: true, defaultvalue:\"\"},\xFE";
    z += "{name:'customSQL', index:22, label:'Custom SQL', datatype: 'string', width:90, control:'textbox', required: false, autopostback: true, canedit:true, pickfunction: \"pickcustomSQL\"},\xFE";
    z += "\xFE";
    z += "{name:'header', index:22, label:'Header Text', required: false, datatype: 'string', width:90, control:'textbox', canedit:true, defaultvalue:\"{viewname}\" },\xFE";
    z += "{name:'columns', index:24, label:'Columns', datatype: 'jsonarray', width:90, control:'json_popup', display: \"hidden\", canedit:true, reffile:\"jsb_jsondefs\", refpk:\"viewColumns\" },\xFE";
    z += "\xFE";
    z += "{ index:60, label:'CSS' },\xFE";
    z += "{name:'boxed', index:61, label:'Boxed', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"none;solid;double;groove;ridge;inset;outset\"  },\xFE";
    z += "\xFE";
    z += "\xFE";
    z += "{name:'custombtns', fullline: true, index:64, label:'Custom Btns', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add custom button', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"customBtns\" },\xFE";
    z += "{name:'btnsonbot', index:65, label:'Btns on Bottom', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" }\xFE";
    z += "\xFE";
    z += "\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "************************************** <%=ProjectName%> view_<%=viewName%> Pivot Setup **********************************\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "<%\xFE";
    z += "   ** Function genCodeStub(ProjectName, pageName, pageModel, viewName, viewModel, TemplateFileName) \xFE";
    z += "   ** We return the array GEN[]\xFE";
    z += "   **\xFE";
    z += "   mayCRUD = false\xFE";
    z += "   niceViewName = @NiceName(@DropIfRight(viewName, \".view\", true)) \xFE";
    z += "   nicEditID = \"ne_\":niceViewName\xFE";
    z += "   nicePageName = @niceName(@DropIfRight(pageName, \".page\", True));\xFE";
    z += "%>\xFE";
    z += "*\xFE";
    z += "* To be compatable with the modeler and other views, we must implement these 4 routines:\xFE";
    z += "*\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON) // viewVars = { fromParentPage: '', parentMultiView: '', lastView: true }\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_checkCommands(viewVars, inCmd, ColumnID)\xFE";
    z += "*   function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "*\xFE";
    z += "\xFE";
    z += "Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON)\xFE";
    z += "    <% if viewModel.attachdb then %>\xFE";
    z += "        AttachDB \"<%=viewModel.attachdb%>\" else Stop @Errors\xFE";
    z += "    <% end if %>\xFE";
    z += "    \xFE";
    z += "    pivotLayout = @urlParam('pivotLayout')\xFE";
    z += "    if pivotLayout Then viewVars.pivotLayout = CJson(pivotLayout) Else viewVars.pivotLayout = { ShowPivotTable: true, Title:\"<%=viewModel.viewName%>\" }\xFE";
    z += "    viewVars.Row = {}\xFE";
    z += "End Sub\xFE";
    z += "\xFE";
    z += "Function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "    <%  \xFE";
    z += "        SqlColumns = \"\"\xFE";
    z += "        if viewModel.customSQL Then\xFE";
    z += "            tblOrSql = viewModel.customSQL\xFE";
    z += "            I = InStrI(tblOrSql, \" from \":viewModel.tableName)\xFE";
    z += "            if I then\xFE";
    z += "                SqlColumns = RTrim(LTrim(Left(tblOrSql, I-1)))\xFE";
    z += "                if lcase(fieldLeft(SqlColumns, ' ')) = 'select' then SqlColumns = LTrim(DropLeft(SqlColumns, ' '))\xFE";
    z += "            End If \xFE";
    z += "        Else\xFE";
    z += "            tblOrSql = viewModel.tableName\xFE";
    z += "        End If\xFE";
    z += "    %>\xFE";
    z += "    \xFE";
    z += "    pivotLayout = viewVars.pivotLayout\xFE";
    z += "    Html = devxPivotSetup(\"\" /* tabID */, \"<%=viewModel.attachdb%>\", \"<%=SqlColumns%>\", \"<%=viewModel.tableName%>\",\"<%=viewModel.viewName%>\", pivotLayout)\xFE";
    z += "\xFE";
    z += "    Html = display_<%=niceViewName%>_extras(viewVars, Html)\xFE";
    z += "    Return Html\xFE";
    z += "End Function\xFE";
    z += "\xFE";
    z += "<%$include _display_extras%>\xFE";
    z += "\xFE";
    z += "<%$include _checkCommands%>\xFE";
    z += "\xFE";
    z += "Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "    ReadJSon viewModel From @fHandle(\"DICT\", \"<%=ProjectName%>\"), \"<%=viewName%>\" Else viewModel = {}; Alert('Missing dict <%=ProjectName%>, <%=viewName%>', True)\xFE";
    z += "\xFE";
    z += "    Call devxUnloadPivot(pivotLayout)\xFE";
    z += "    \xFE";
    z += "    viewVars.pivotLayout = pivotLayout\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine view_<%=niceViewName%>_ReQueryMeta(ByRef viewVars As JSON, ByRef rtnErrors As String)\xFE";
    z += "    pivotLayout = viewVars.pivotLayout\xFE";
    z += "    if !pivotLayout Then pivotLayout = {}\xFE";
    z += "    pivotLayout.AvailFlds = \"\"\xFE";
    z += "    viewVars.pivotLayout = pivotLayout\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine view_<%=niceViewName%>_Next(ByRef viewVars As JSON, ByRef rtnErrors As String)\xFE";
    z += "    // We need to transfer to <%=nicePageName%>, and we need to pass viewVars.pivotLayout\xFE";
    z += "<% \xFE";
    z += "    Url = \"\"\xFE";
    z += "    for each Btn in viewModel.custombtns\xFE";
    z += "        if Btn.customcall = \"view_\":niceViewName:\"_Next\" Then Url = Btn.url\xFE";
    z += "    next\xFE";
    z += "    if Url Then \xFE";
    z += "        if instr(url, \"/\") then \xFE";
    z += "%>\xFE";
    z += "            Url = :\"<%=Url%>\"\xFE";
    z += "        <% else %>\xFE";
    z += "            Url = @jsbRootAct():\"<%=Url%>\"\xFE";
    z += "        <%End If%>\xFE";
    z += "<% else %>\xFE";
    z += "        Url = @url\xFE";
    z += "        Url = Replace(Url, \"/<%=nicePageName%>\", \"/<%=nicePageName%>_Pivot\")\xFE";
    z += "<%End If%>\xFE";
    z += "\xFE";
    z += "    if InStr(Url, \"?\") Then Sep = \"&\" Else Sep = \"?\"\xFE";
    z += "\xFE";
    z += "    pivotLayout = viewVars.pivotLayout\xFE";
    z += "    if pivotLayout.GrpRows Then Url := Sep:\"_Pvt_Rows=\":@UrlEncode(pivotLayout.GrpRows); Sep = \"&\"\xFE";
    z += "    if pivotLayout.GrpCols Then Url := Sep:\"_Pvt_Cols=\":@UrlEncode(pivotLayout.GrpCols); Sep = \"&\"\xFE";
    z += "    if pivotLayout.Sums Then Url := Sep:\"_Pvt_Tots=\":@UrlEncode(pivotLayout.Sums); Sep = \"&\"\xFE";
    z += "    if pivotLayout.Counts Then Url := Sep:\"_Pvt_Cnts=\":@UrlEncode(pivotLayout.Counts); Sep = \"&\"\xFE";
    z += "    if pivotLayout.Averages Then Url := Sep:\"_Pvt_Avgs=\":@UrlEncode(pivotLayout.Averages); Sep = \"&\"\xFE";
    z += "    if pivotLayout.StdDevs Then Url := Sep:\"_Pvt_Stds=\":@UrlEncode(pivotLayout.StdDevs); Sep = \"&\"\xFE";
    z += "    if pivotLayout.Mins Then Url := Sep:\"_Pvt_Mins=\":@UrlEncode(pivotLayout.Mins); Sep = \"&\"\xFE";
    z += "    if pivotLayout.Maxs Then Url := Sep:\"_Pvt_Maxs=\":@UrlEncode(pivotLayout.Maxs); Sep = \"&\"\xFE";
    z += "    if pivotLayout.Title Then Url := Sep:\"_Pvt_Title=\":@UrlEncode(pivotLayout.Title); Sep = \"&\"\xFE";
    z += "    if pivotLayout.XAxisCaption Then Url := Sep:\"_Pvt_XCap=\":@UrlEncode(pivotLayout.XAxisCaption); Sep = \"&\"\xFE";
    z += "    if pivotLayout.YAxisCaption Then Url := Sep:\"_Pvt_YCap=\":@UrlEncode(pivotLayout.YAxisCaption); Sep = \"&\"\xFE";
    z += "    if pivotLayout.ChartType Then Url := Sep:\"_Pvt_Chart=\":@UrlEncode(pivotLayout.ChartType); Sep = \"&\"\xFE";
    z += "    if pivotLayout.ShowPivotTable Then Url := Sep:\"_Pvt_ShwTbl=\":@UrlEncode(pivotLayout.ShowPivotTable); Sep = \"&\"\xFE";
    z += "    if pivotLayout.ShowRowGrandTotals Then Url := Sep:\"_Pvt_ShwGndTot=\":@UrlEncode(pivotLayout.ShowRowGrandTotals); Sep = \"&\"\xFE";
    z += "    if pivotLayout.ShowGraph Then Url := Sep:\"_Pvt_ShwGrf=\":@UrlEncode(pivotLayout.ShowGraph); Sep = \"&\"\xFE";
    z += "    if pivotLayout.PointLabels Then Url := Sep:\"_Pvt_PntLbl=\":@UrlEncode(pivotLayout.PointLabels); Sep = \"&\"\xFE";
    z += "    if pivotLayout.ChartDataVertical Then Url := Sep:\"_Pvt_Vert=\":@UrlEncode(pivotLayout.ChartDataVertical); Sep = \"&\"\xFE";
    z += "\xFE";
    z += "    @Response.Redirect(Url)\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += ""
    window.cached_jsb_viewtemplates["pivotsetup"] = z;
    var z = "{ index:21,  name:'xCRUD', defaultvalue:'C.R.U.D', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;' },\xFE";
    z += "\xFE";
    z += "{name:'attachdb', index: 22, label:'Attach DB', width:19, control:'combobox', autopostback: true, canedit:true, required: false, addBlank: true, reffile:\"SYSTEM\", refpk:\"ItemID\" },\xFE";
    z += "{name:'tableName', index:23, label:'Table Name', datatype: 'string', width:90, control:'dropDownBox', required: false, addBlank: true, autopostback: true, canedit:true, reffile:\"{listfiles}\", pickfunction: \"picktable\"},\xFE";
    z += "{name:'orderby', index:24, label:'order by', datatype: 'string', suppresslabel: false, control:'textbox', canedit:true, required: false, addBlank: true, defaultvalue:\"\"},\xFE";
    z += "{name:'customSQL', index:22, label:'Custom SQL', datatype: 'string', width:90, control:'textbox', required: false, autopostback: true, canedit:true, pickfunction: \"pickcustomSQL\"},\xFE";
    z += "\xFE";
    z += "{name:'allowinserts', index:25, label:'Allow Inserts', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'allowupdates', index:26, label:'Allow Updates', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'allowdeletes', index:27, label:'Allow Deletes', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{name:'useajax', index:28, label:'use AJAX', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{ index: 30, name: 'xsclick', defaultvalue: 'Tree Single Click', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;'   },\xFE";
    z += "{name:'gridOpenTo', index:31, label:'Tree Selection To', datatype: 'number', suppresslabel: false, control:'dropdownbox', canedit:true, required: true, addBlank: true, defaultvalue:\"10\", reflist: \"New Window,1;New Window Tab,2;Tab (name in Transfer Xtra),3;Frame (name in Transfer Xtra),4;Dialog (Title in Transfer Xtra),6;HTTP POST (Transfer Extra becomes formVar Name and contains SelectedID),7;HTTP GET,8;Current Window,10;JavaScript (in Transfer Extra),11;Top Window,12;Back,13;Next Tab,14;Previous Tab,15;Close Window,16;Return Pick Value,17\"},\xFE";
    z += "{name:'gridOpenUrl', index:32, label:'Selection URL', datatype: 'string', suppresslabel: false, control:'combobox', canedit:true, required: false, addBlank: true, defaultvalue:\"\",  reffile:\"dict {projectname}\", refpk:\"ItemID\", refwhere:\"ItemID Like '%.page'\", pickfunction: 'edp_pick?projectName={projectname}' },\xFE";
    z += "{name:'gridOpenExtra', index:33, label:'Transfer Xtra', datatype: 'string', suppresslabel: false, control:'textbox', canedit:true, required: false, addBlank: true, defaultvalue:\"\"},\xFE";
    z += "{name:'passThruParams', index:34, label:'pass Url Params', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "{name:'addFromUrl', index:35, label:'add From Url', width:12, control:'checkbox', canedit:true, required: false, notblank: true, defaultvalue:0, reflist: \"false,0;true,1\" },\xFE";
    z += "\xFE";
    z += "{ index:50, name:'xuicss', defaultvalue:'UI CSS', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;' },\xFE";
    z += "\xFE";
    z += "{name:'header', index:51, label:'Header Text', required: false, datatype: 'string', width:90, control:'textbox', canedit:true, defaultvalue:\"{viewname}\" },\xFE";
    z += "\xFE";
    z += "{name:'headforecolor', index:52, label:'Header Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'headbackcolor', index:53, label:'Header Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{name:'forecolor', index:54, label:'Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'backcolor', index:52, label:'Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{name:'altforecolor', index:55, label:'Alt Forecolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "{name:'altbackcolor', index:56, label:'Alt Backcolor', width:30, control:'colorpicker', required: false, addBlank: true, canedit:true },\xFE";
    z += "\xFE";
    z += "{name:'font', index:57, label:'Font', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"Arial,Arial, Helvetica, sans-serif;Arial Black, 'Arial Black', Gadget, sans-serif;Comic Sans MS, 'Comic Sans MS', Textile, cursive;Courier New, 'Courier New', Courier, monospace;Georgia, Georgia, 'Times New Roman', Times, serif;Impact, Impact, Charcoal, sans-serif;Lucida Console, 'Lucida Console', Monaco, monospace;Lucida Sans Unicode, 'Lucida Sans Unicode', 'Lucida Grande', sans-serif;Palatino Linotype, 'Palatino Linotype', 'Book Antiqua', Palatino, serif;Tahoma, Tahoma, Geneva, sans-serif;Times New Roman, 'Times New Roman', Times, serif;Trebuchet MS, 'Trebuchet MS', Helvetica, sans-serif;Verdana, Verdana, Geneva, sans-serif;MS Sans Serif, 'MS Sans Serif', Geneva, sans-serif;MS Serif, 'MS Serif', 'New York', serif;\" },\xFE";
    z += "{name:'fontsize', index:58, label:'Font size', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"xx-small;x-small;small;medium;large;x-large;xx-large;smaller;larger;initial;inherit\" },\xFE";
    z += "{name:'boxed', index:59, label:'Boxed', width:30, control:'dropdownbox', required: false, addBlank: true, canedit:true, reflist: \"none;solid;double;groove;ridge;inset;outset\"  },\xFE";
    z += "\xFE";
    z += "{ index:70,  name:'xio', defaultvalue:'Input / Output Parameters', control:'label', suppresslabel: true, fullline: true, ctlstyle: 'text-align: center; border: none; line-height: 2.5;box-shadow: none; font-style: italic; font-weight: 900;' },\xFE";
    z += "\xFE";
    z += "{name:'inputs', index:74, fullline: true, label:'Input Params', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add input selection', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"viewInputs\" },\xFE";
    z += "{name:'outputs', index:75, fullline: true, label:'Output Params', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add output parameter', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"viewOutputs\" },\xFE";
    z += "{name:'dynamicinputs', index:77, fullline: true, label:'Auto Ajax Filters', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add AJax Filter', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"viewInputs\" },\xFE";
    z += "\xFE";
    z += "{name:'custombtns', fullline: true, index:80, label:'Custom Btns', datatype: 'jsonarray', width:90, control:'json_inline', canedit:true, addrowtxt: 'add custom button', rmvrowtxt:'remove', form: 'grid', reffile:\"jsb_jsondefs\", refpk:\"customBtns\" },\xFE";
    z += "{name:'btnsonbot', index:81, label:'Btns on Bottom', width:12, control:'checkbox', canedit:true, defaultvalue:true, reflist: \"false,0;true,1\" }\xFE";
    z += "\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "************************************************** <%=viewName%> Tree View *********************************************\xFE";
    z += "**************************************************************************************************************************\xFE";
    z += "<%\xFE";
    z += "   ** Function genCodeStub(ProjectName, pageName, pageModel, viewName, viewModel, TemplateFileName) \xFE";
    z += "   ** We return the array GEN[]\xFE";
    z += "   **\xFE";
    z += "   niceViewName = @NiceName(@DropIfRight(viewName, \".view\", true)) \xFE";
    z += "   nicEditID = \"ne_\":niceViewName\xFE";
    z += "   mayCRUD = viewModel.allowNewRecord Or viewModel.allowupdates Or viewModel.allowdeletes Or viewModel.newRecord\xFE";
    z += "   doKOBinding = false\xFE";
    z += "   \xFE";
    z += "   if viewModel.tableName = \"\" Then\xFE";
    z += "      @Alert(\"You don't have a Table Name defined in your view : \" : viewName, True)\xFE";
    z += "      Return 0\xFE";
    z += "   End If\xFE";
    z += "   \xFE";
    z += "   treeOpenUrl = Trim(DropIfRight(viewModel.gridOpenUrl, '.page'))\xFE";
    z += "   if treeOpenUrl then\xFE";
    z += "       If !InStr(treeOpenUrl, \"//\") Then\xFE";
    z += "          If Left(treeOpenUrl, 1) = \"/\" Then treeOpenUrl = Mid(treeOpenUrl, 2)\xFE";
    z += "          // treeOpenUrl = @jsbRootExecute(treeOpenUrl) ;* can't do this at compiletime, as code may run on different platform\xFE";
    z += "       End If\xFE";
    z += "       op = @jsb_mdl.UrlOutputParams(viewModel.outputs) \xFE";
    z += "       if instr(gridDblOpenUrl, \"?\") then op = replace(op, \"?\", \"&\")\xFE";
    z += "       treeOpenUrl := op\xFE";
    z += "   end if\xFE";
    z += "   \xFE";
    z += "   if viewModel.gridOpenTo >= 3 And viewModel.gridOpenTo <=7 And !viewModel.gridOpenExtra Then\xFE";
    z += "       MsgBox(\"You must specify a container name in the 'Url/Selection Xtra' metadata field for view: \":viewName)\xFE";
    z += "    end if\xFE";
    z += "    \xFE";
    z += "    if viewModel.gridOpenTo = 7 And !viewModel.gridOpenExtra Then\xFE";
    z += "       MsgBox(\"You must specify a your javascript in the 'Url/Selection Xtra' metadata field for view: \":viewName)\xFE";
    z += "    end if\xFE";
    z += "%>\xFE";
    z += "*\xFE";
    z += "* To be compatable with the modeler and other views, we must implement these 4 routines:\xFE";
    z += "*\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON) // viewVars = { fromParentPage: '', parentMultiView: '', lastView: true }\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_checkCommands(viewVars, inCmd, ColumnID)\xFE";
    z += "*   function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "*\xFE";
    z += "Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON)\xFE";
    z += "    <% if viewModel.attachdb then %>\xFE";
    z += "        AttachDB \"<%=viewModel.attachdb%>\" else Stop @Errors\xFE";
    z += "    <% end if %>\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "function view_<%=niceViewName%>_isDirty(ByRef viewVars As JSON) As String\xFE";
    z += "   Return False\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "<%$include _checkCommands%>\xFE";
    z += "\xFE";
    z += "Function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "    * Get our column definitions from the Model Designer (from table Views and !items in Dict of <%=viewModel.tableName%>)\xFE";
    z += "    ReadJSon viewModel From @fHandle(\"DICT\", \"<%=ProjectName%>\"), \"<%=viewName%>\" Else viewModel = @jsb_mdl.createNewView(\"<%=viewName%>\")\xFE";
    z += "   \xFE";
    z += "    DataSource = treeFetch_<%=niceViewName%>(@FormVars, rtnErrors)\xFE";
    z += "    If rtnErrors Then\xFE";
    z += "        Return rtnErrors:crlf():@Button('backErr', \"Back\", { onclick: \"window.history.go(-2);\" } )\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    <%if viewModel.useajax then%>\xFE";
    z += "        <%= @jsb_mdl.UrlPassThrough(viewModel) ; // This will setup UrlParams %>\xFE";
    z += "        Html = @jsb_html.jsonTree(\"<%=niceViewName%>\", DataSource, \"treeFetch_<%=niceViewName%>\":UrlParams) \xFE";
    z += "    <%Else%>\xFE";
    z += "        Html = @jsb_html.jsonTree(\"<%=niceViewName%>\", DataSource) \xFE";
    z += "    <%End If%>\xFE";
    z += "   \xFE";
    z += "   <% if viewModel.gridOpenTo And treeOpenUrl Then %>\xFE";
    z += "      SelectUrl = \"<%=treeOpenUrl%>\"\xFE";
    z += "      <% if viewModel.passThruParams Then %>\xFE";
    z += "         if InStr(SelectUrl, \"?\") Then UrlC = \"&\" Else UrlC = \"?\"\xFE";
    z += "         SelectUrl = SelectUrl:Replace(Replace(UrlC:@QueryString, \"newRecord=1\", \"\"), \"&&\", \"&\") ;* Don't pass thru newRecord\xFE";
    z += "      <% End If %>               \xFE";
    z += "      \xFE";
    z += "      <%  // If we have any parameters other than URL, then we must post back here to save them %>\xFE";
    z += "      <% If @jsb_mdl.hasServerSideParams(viewModel) Then %>\xFE";
    z += "            Html := @genEventHandler(\"leafSelected\", NULL, 7 /* <%=EventHandlerType(7) %> */, \"selectedID\") ;* selectedID = FormVar(\"selectedID\") and postBackRow = JSON(@formvar(\"postBackUrl\"))\xFE";
    z += "      <% Else %> \xFE";
    z += "            Html := @genEventHandler(\"leafSelected\", SelectUrl, <%=viewModel.gridOpenTo+0%> /* <%=EventHandlerType(viewModel.gridOpenTo)%> */, \"<%=viewModel.gridOpenExtra%>\", <%=viewModel.addFromUrl+0%>, <%=viewModel.passThruParams+0%>) \xFE";
    z += "      <% End If %>\xFE";
    z += "   <%Else%>\xFE";
    z += "      <%\xFE";
    z += "        // For all output memoryVars, create the hidden variable.  Attach to the control and publish changes\xFE";
    z += "        firstMemoryVar = True\xFE";
    z += "        jScript = []\xFE";
    z += "        for each Column in viewModel.outputs\xFE";
    z += "            if Column.scope = \"memoryVar\" Then\xFE";
    z += "                cname = Column.name\xFE";
    z += "                if !cname then cname = Column.field\xFE";
    z += "                if firstMemoryVar Then firstMemoryVar = False\xFE";
    z += "                jScript[-1] = 'storeVal(\"memoryVar_':niceName(cname):'\", parentDataRow[\"':Column.field:'\"])'\xFE";
    z += "                jScript[-1] = '$(\"#memoryVar_':niceName(cname):'\").trigger(\"change\")'\xFE";
    z += "                %>\xFE";
    z += "                    Html := @HIDDEN('memoryVar_<%=niceName(cname)%>')\xFE";
    z += "                <%\xFE";
    z += "            end If\xFE";
    z += "        next\xFE";
    z += "        If !FirstMemoryVar Then\xFE";
    z += "            jScript = Replace(Join(jScript, \";\"), \"'\", \"\\\\'\")\xFE";
    z += "            %>\xFE";
    z += "                // Tree View generates leafSelected and folderSelected genEventHandler(ByVal Cmd, Byval Url, ByVal containerType, ByVal containerName, optional byval addFromPage, optional byval passthruParams)\xFE";
    z += "                Html := @genEventHandler(\"leafSelected\", \"\", 11 /* pure javacript  */, '<%=jScript%>')\xFE";
    z += "            <%\xFE";
    z += "        End If\xFE";
    z += "      %>\xFE";
    z += "   <% End If %>\xFE";
    z += "\xFE";
    z += "   Html = display_<%=niceViewName%>_extras(viewVars, Html)\xFE";
    z += "   Return Html\xFE";
    z += "End Function\xFE";
    z += "\xFE";
    z += "<%$include _display_extras%>\xFE";
    z += "\xFE";
    z += "<%if viewModel.useajax then%>\xFE";
    z += "*\xFE";
    z += "* This is the <%=niceViewName%> AJAX callback function for the jsonTree\xFE";
    z += "*\xFE";
    z += "Restful Function treeFetch_<%=niceViewName%>(formVars)\xFE";
    z += "   return treeFetch_<%=niceViewName%>(formVars)\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "Function treeFetch_<%=niceViewName%>(formVars)\xFE";
    z += "   dataSet = treeFetch_<%=niceViewName%>(formVars, rtnErrors) \xFE";
    z += "   if !dataSet Then\xFE";
    z += "        ErrRec = {}\xFE";
    z += "        <% For Each Column In viewModel.columns\xFE";
    z += "            If Column.name And Column.display <> \"hidden\" Then \xFE";
    z += "                %>ErrRec[\"<%=Column.name%>\"] = rtnErrors\xFE";
    z += "                <%\xFE";
    z += "            End If\xFE";
    z += "        Next\xFE";
    z += "        %>\xFE";
    z += "        \xFE";
    z += "        Return ErrRec\xFE";
    z += "   End If\xFE";
    z += "*\xFE";
    z += "   Return dataSet\xFE";
    z += "End Function\xFE";
    z += "<%End If%>\xFE";
    z += "\xFE";
    z += "Function treeFetch_<%=niceViewName%>(ByVal formVars As JSON, ByRef rtnErrors As String) As Array\xFE";
    z += "    Dim selectHandle As SelectList, SqlFilter As String = \"\", SqlColumns As String = \"\"\xFE";
    z += "    \xFE";
    z += "   <% if viewModel.attachdb Then %>\xFE";
    z += "       AttachDB \"<%=viewModel.attachdb%>\" else rtnErrors = @Errors; Return Null\xFE";
    z += "   <%End If%>\xFE";
    z += "   \xFE";
    z += "   <%= @jsb_mdl.buildSqlSelect(viewModel, true)%>\xFE";
    z += "   \xFE";
    z += "   If rtnErrors Then Return Null\xFE";
    z += "\xFE";
    z += "   if !@jsb_bf.OpenTable(\"<%=viewModel.tableName%>\", \"<%=viewName%>\", fTable, rtnErrors) Then Return Null\xFE";
    z += "   \xFE";
    z += "   <%if viewModel.tableName then %>\xFE";
    z += "      if !SqlColumns Then SqlColumns = \"*\"\xFE";
    z += "      Select SqlColumns From fTable to selectHandle Where SqlFilter Then\xFE";
    z += "         dataSet = GetList(selectHandle)\xFE";
    z += "         Return @jsb_bf.dataset2json(dataSet, \"<%=viewModel.groupon%>\", \"<%=viewModel.valuefield%>\")\xFE";
    z += "      End If\xFE";
    z += "   <%Else%>\xFE";
    z += "       ReadJson dRec From fTable, @UserName Then\xFE";
    z += "          urec = {}\xFE";
    z += "          urec[@UserName] = { data: dRec }\xFE";
    z += "          return { user: urec }\xFE";
    z += "       end if\xFE";
    z += "   <%End If%>\xFE";
    z += "\xFE";
    z += "   rtnErrors = \"Tree-\":System(28):\": \":@Errors\xFE";
    z += "   LogErr(rtnErrors)\xFE";
    z += "   Return Null\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "function view_<%=niceViewName%>_gridUpdateRows(Ops, rtnErrors)\xFE";
    z += "    Return True\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "<%$include _writeRow%>\xFE";
    z += "\xFE";
    z += "<%$include _deleteRow%>\xFE";
    z += "\xFE";
    z += "function view_<%=niceViewName%>_cancelEdits(pkID, rtnErrors)\xFE";
    z += "   Return True\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += ""
    window.cached_jsb_viewtemplates["tree"] = z;
    var z = "function script_<%=niceViewName%>_additionalJS(ByRef viewVars As JSON) As String\xFE";
    z += "    Dim script As Array = []\xFE";
    z += "    Dim Attachments As Array = []\xFE";
    z += "    <%\xFE";
    z += "    For Each Column in viewModel.columns\xFE";
    z += "        cName = Column.name\xFE";
    z += "        If cName Then\xFE";
    z += "            If Len(Column.jsconditionals) > 0 Then\xFE";
    z += "                emptyList = true\xFE";
    z += "                lastBlock = \"zzz\"\xFE";
    z += "                \xFE";
    z += "                For Each condition in Column.jsconditionals\xFE";
    z += "                    allany = condition.allany\xFE";
    z += "                    block = condition.block\xFE";
    z += "                    jsfunction = condition.jsfunction\xFE";
    z += "                    field = condition.field\xFE";
    z += "                    operator = condition.operator\xFE";
    z += "                    tovalue = condition.tovalue\xFE";
    z += "                    jsparameter = condition.jsparameter\xFE";
    z += "                    \xFE";
    z += "                    // Changing blocks?\xFE";
    z += "                    if block <> lastblock then\xFE";
    z += "                        // previous block?\xFE";
    z += "                        If !emptyList then\xFE";
    z += "                            %>\xFE";
    z += "                            script[-1] = \"<%=lastjsfunction%>('<%=cName%>', <%=lastblock%>_AllPass, parent_element, parentValue, '<%=lastjsparameter%>')\"\xFE";
    z += "                            script[-1] = \"}\"\xFE";
    z += "                            <%\xFE";
    z += "                        End if\xFE";
    z += "                        emptylist = true\xFE";
    z += "                        lastblock = block\xFE";
    z += "                        lastjsparameter = jsparameter\xFE";
    z += "                        lastjsfunction = jsfunction\xFE";
    z += "                    end if\xFE";
    z += "                    \xFE";
    z += "                    // first entry for a new block?\xFE";
    z += "                    if emptyList then\xFE";
    z += "                        emptyList = false\xFE";
    z += "                        %>\xFE";
    z += "                        script[-1] = \"function <%=niceViewName%>_<%=cName%>_<%=jsFunction%>(parent_element, parentValue) {\"\xFE";
    z += "                        <%\xFE";
    z += "                        if allany = \"Any\" then\xFE";
    z += "                            %>script[-1] = \" var <%=block%>_AllPass = false;\"\xFE";
    z += "                            <%\xFE";
    z += "                        else\xFE";
    z += "                            %>script[-1] = \" var <%=block%>_AllPass = true;\"\xFE";
    z += "                            <%\xFE";
    z += "                        end if\xFE";
    z += "                    end if\xFE";
    z += "                    \xFE";
    z += "                    if operator = 'InList' then \xFE";
    z += "                        Cond = \"inList(formVar('\":field:\"'), \":tovalue:\", true) != -1\"\xFE";
    z += "                        \xFE";
    z += "                    elseif operator = 'Not InList' then \xFE";
    z += "                        Cond = \"inList(formVar('\":field:\"'), \":tovalue:\", true) == -1\"\xFE";
    z += "                        \xFE";
    z += "                    else\xFE";
    z += "                        if operator = \"=\" then operator = \"==\"\xFE";
    z += "                        if operator = \"<>\" then operator = \"!=\"\xFE";
    z += "                        Cond = \"formVar('\":field:\"') \":operator:\" \":tovalue\xFE";
    z += "                    end if\xFE";
    z += "                \xFE";
    z += "                    if allany = \"Any\" then\xFE";
    z += "                        %>script[-1] = \"if (<%=Cond%>) <%=block%>_AllPass = true\"\xFE";
    z += "                        <%\xFE";
    z += "                    else\xFE";
    z += "                        %>script[-1] = \"if (<%=Cond%>) ; else <%=block%>_AllPass = false\"\xFE";
    z += "                        <%\xFE";
    z += "                    end if\xFE";
    z += "                    \xFE";
    z += "                    %>Attachments[-1] = \"attachToElementChange('<%=field%>', <%=niceViewName%>_<%=cName%>_<%=jsFunction%>)\"\xFE";
    z += "                    <%\xFE";
    z += "                Next\xFE";
    z += "                \xFE";
    z += "                If !emptyList then\xFE";
    z += "                    %>script[-1] = \"<%=lastjsfunction%>('<%=cName%>', <%=lastblock%>_AllPass, parent_element, parentValue, '<%=lastjsparameter%>')\"\xFE";
    z += "                    script[-1] = \"}\"\xFE";
    z += "                    <%\xFE";
    z += "                End if\xFE";
    z += "            End If\xFE";
    z += "        End If\xFE";
    z += "    Next\xFE";
    z += "    %>\xFE";
    z += "    \xFE";
    z += "    if Len(script) = 0 Then Return \"\"\xFE";
    z += "    return @Script(Join(script, Chr(13)):Chr(13):Join(Attachments, Chr(13)))\xFE";
    z += "end function\xFE";
    z += ""
    window.cached_jsb_viewtemplates["_additionaljs"] = z;
    var z = "* From parent is either another .view file, or a .page file, or empty\xFE";
    z += "*\xFE";
    z += "Subroutine view_<%=niceViewName%>_checkCommands(ByRef viewVars As JSON, ByVal PageBtn As String, ByVal ColumnID As String)\xFE";
    z += "   * What button did the user click? \xFE";
    z += "   Dim Btn As String = PageBtn:@formvar(\"formBtn_<%=niceViewName%>\"):@formVar(\"<%=nicEditID%>_formBtn\"):@formvar(\"contextMenuCmd\")\xFE";
    z += "   Dim rtnErrors As String = \"\", pkID As String = \"\", TransferHtml As String = \"\", UrlParams As String = \"\", buff As String, Tag As String\xFE";
    z += "   \xFE";
    z += "<% If viewTemplateName = \"grid\" Then %>\xFE";
    z += "   Dim postBackCmd As String = @formvar(\"postBackTitle\")\xFE";
    z += "   \xFE";
    z += "   if postBackCmd then\xFE";
    z += "        <% If viewModel.gridOpenTo Then\xFE";
    z += "            UrlOutputs = @jsb_mdl.UrlOutputParams(viewModel.outputs) \xFE";
    z += "        %>\xFE";
    z += "            If postBackCmd = \"rowSelected\" Then\xFE";
    z += "               UrlParams = \"<%=UrlOutputs%>\"\xFE";
    z += "               <%if viewModel.passThruParams Then%>\xFE";
    z += "                  UrlParams = UrlParams:Replace(Replace(IFF(UrlParams, \"&\", \"?\"):@QueryString, \"newRecord=1\", \"\"), \"&&\", \"&\")\xFE";
    z += "               <%End If%>\xFE";
    z += "               <%if viewModel.addnewrec Then%>\xFE";
    z += "                  UrlParams = UrlParams:IFF(UrlParams, \"&\", \"?\"):\"newRecord=1\"\xFE";
    z += "               <%End If%>\xFE";
    z += "            \xFE";
    z += "               <% if viewModel.gridOpenTo = 13 /* back page */ then %>\xFE";
    z += "                   Dim fromPage As String = @formVar(\"fromPage\")\xFE";
    z += "                   If fromPage Then \xFE";
    z += "                        If InStr(fromPage, \"?\") And Left(UrlParams, 1) = \"?\" Then UrlParams = \"&\":Mid(UrlParams, 2)\xFE";
    z += "                        @Response.Redirect(fromPage:UrlParams)\xFE";
    z += "                    End If\xFE";
    z += "               <%End If%>\xFE";
    z += "               \xFE";
    z += "               // Create an immediate transfer and send to the browser\xFE";
    z += "               TransferHtml = @genEventHandler(\"Transfer\", \"<%=@DropIfRight(viewModel.gridOpenUrl, '.page')%>\":UrlParams, <%=viewModel.gridOpenTo+0%> /* <%=eventHandlerType(viewModel.gridOpenTo)%> */, \"<%=viewModel.gridOpenExtra%>\" /* Container Name */, <%=viewModel.addFromUrl+0%> /* addFromUrl */, False /* passthruParams already hhandled */)\xFE";
    z += "               if viewVars.ParentRefresh Then TransferHtml := @Script(\"if (parent.refreshData) parent.refreshData();\")\xFE";
    z += "               \xFE";
    z += "               // Execute transfer\xFE";
    z += "               TransferHtml := @Script('window.eventHandler_Transfer(jsbFormVars(), \"<%=@jsb_mdl.pkColumnID(viewModel, ProjectName, viewName)%>\");')\xFE";
    z += "            end if\xFE";
    z += "        <% End If %>\xFE";
    z += "       \xFE";
    z += "       <% if viewModel.gridDblOpenTo Then \xFE";
    z += "            UrlOutputs = @jsb_mdl.UrlOutputParams(viewModel.outputs) \xFE";
    z += "        %>\xFE";
    z += "            If postBackCmd = \"dblClickRow\" Then\xFE";
    z += "                UrlParams = \"<%=UrlOutputs%>\"\xFE";
    z += "                <%if viewModel.passDblThruParams Then%>\xFE";
    z += "                    UrlParams = UrlParams:Replace(Replace(IFF(UrlParams, \"&\", \"?\"):@QueryString, \"newRecord=1\", \"\"), \"&&\", \"&\")\xFE";
    z += "                <%End If%>\xFE";
    z += "                <%if viewModel.addnewrec Then%>\xFE";
    z += "                    UrlParams = UrlParams:IFF(UrlParams, \"&\", \"?\"):\"newRecord=1\"\xFE";
    z += "                <%End If%>\xFE";
    z += "                \xFE";
    z += "                <% if viewModel.gridDblOpenTo = 13 then %>\xFE";
    z += "                    fDim fromPage As String = @formVar(\"fromPage\")\xFE";
    z += "                    If fromPage Then \xFE";
    z += "                        If InStr(fromPage, \"?\") And Left(UrlParams, 1) = \"?\" Then UrlParams = \"&\":Mid(UrlParams, 2)\xFE";
    z += "                        @Response.Redirect(fromPage:UrlParams)\xFE";
    z += "                    End If\xFE";
    z += "                <%End If%>\xFE";
    z += "                \xFE";
    z += "                // Create an immediate transfer and send to the browser\xFE";
    z += "                TransferHtml = @genEventHandler(\"dblClickRow\", \"<%=@DropIfRight(viewModel.gridDblOpenUrl, '.page')%>\":UrlParams, <%=viewModel.gridDblOpenTo+0%> /* <%=eventHandlerType(viewModel.gridDblOpenTo)%> */, \"<%=viewModel.gridDblOpenExtra%>\" /* Container Name */, <%=viewModel.addDblFromUrl+0%> /* addDblFromUrl */, False /* passthruParams already handled */)\xFE";
    z += "                if viewVars.ParentRefresh Then TransferHtml := @Script(\"if (parent.refreshData) parent.refreshData();\")\xFE";
    z += "                \xFE";
    z += "                // Execute transfer\xFE";
    z += "                TransferHtml := @Script('window.eventHandler_DblClick(jsbFormVars(), \"<%=@jsb_mdl.pkColumnID(viewModel, ProjectName, viewName)%>\");')\xFE";
    z += "               \xFE";
    z += "            end if\xFE";
    z += "        <% End If %>\xFE";
    z += "       \xFE";
    z += "        Dim postBackRow As JSON = JSON(@formvar(\"postBackUrl\"))\xFE";
    z += "        For Each Tag As String in viewVars.Row\xFE";
    z += "           TransferHtml = @HIDDEN(Tag, postBackRow[Tag]):TransferHtml\xFE";
    z += "        Next\xFE";
    z += "            \xFE";
    z += "        Buff = @response.buffer\xFE";
    z += "        Print @(-1):TransferHtml:\xFE";
    z += "        Stop\xFE";
    z += "   End If\xFE";
    z += "<%End If%>\xFE";
    z += "\xFE";
    z += "   Call @jsb_bf.checkStandardCommands(Btn, \"<%=ProjectName%>\", \"<%=viewName%>\", ColumnID, \"<%=nicEditID%>\", False /* mustCompile */, viewVars.fromParentPage, viewVars.parentMultiView, viewVars.htmlBackDrop, null)\xFE";
    z += "   Dim SuccessOp As Boolean\xFE";
    z += "   \xFE";
    z += "   Select Case Btn\xFE";
    z += "    <%if mayCRUD Then%>\xFE";
    z += "       Case \"C\", \"B\", \"Q\" ;* Page cancel\xFE";
    z += "         Dim Ans As String\xFE";
    z += "         If @view_<%=niceViewName%>_isDirty(viewVars) Then\xFE";
    z += "            Ans = @MsgBox(\"Warning!\", @Language(\"You are about to lose any edits you have made. Continue?\"), \"Yes,No\")\xFE";
    z += "         Else\xFE";
    z += "            Ans = \"Yes\"\xFE";
    z += "         End If\xFE";
    z += "         If Ans = \"Yes\" Then \xFE";
    z += "            If @view_<%=niceViewName%>_cancelEdits(viewVars.currentID, rtnErrors) Then\xFE";
    z += "               Call view_<%=niceViewName%>_Setup(viewVars)\xFE";
    z += "            ElseIf rtnErrors Then\xFE";
    z += "               Alert(rtnErrors, False)\xFE";
    z += "            End If\xFE";
    z += "         End If\xFE";
    z += "\xFE";
    z += "       Case \"C!\", \"B!\", \"Q!\"\xFE";
    z += "         Call view_<%=niceViewName%>_Setup(viewVars)\xFE";
    z += "      \xFE";
    z += "       Case \"D\"  ;* multi-form delete\xFE";
    z += "         <%If viewModel.allowdeletes Then%>\xFE";
    z += "            If @view_<%=niceViewName%>_deleteRow(viewVars.currentID, rtnErrors) Then\xFE";
    z += "               viewVars.ParentRefresh = true\xFE";
    z += "            ElseIf rtnErrors Then\xFE";
    z += "               @Alert(rtnErrors, False)\xFE";
    z += "            End If\xFE";
    z += "         <% Else %>\xFE";
    z += "            * Deletes prohibited by view Model\xFE";
    z += "         <% End If %>\xFE";
    z += "\xFE";
    z += "       Case \"S\" ;* This is a multi-form Save\xFE";
    z += "         <%If viewModel.allowupdates Then%>\xFE";
    z += "            pkID = viewVars.currentID\xFE";
    z += "            If @view_<%=niceViewName%>_writeRow(viewVars.Row, pkID, rtnErrors) Then \xFE";
    z += "               viewVars.currentID = pkID\xFE";
    z += "               viewVars.ParentRefresh = true\xFE";
    z += "\xFE";
    z += "            ElseIf rtnErrors Then \xFE";
    z += "               @Alert(rtnErrors, False)\xFE";
    z += "            End If\xFE";
    z += "         <% Else %>\xFE";
    z += "            * Updates not part of this Model\xFE";
    z += "         <% End If %>\xFE";
    z += "    <%End If\xFE";
    z += "    \xFE";
    z += "    for each Btn in viewModel.custombtns%>\xFE";
    z += "        <% customCall = Btn.customcall %>\xFE";
    z += "        <% If (mayCRUD And (Btn.saveform Or Btn.deleteform)) Or customCall or Btn.addoutputs Then%>\xFE";
    z += "          Case \"<%=Btn.buttontxt%>\" ;* A Server Side required button\xFE";
    z += "            <%\xFE";
    z += "                needSuccessfulOp = True\xFE";
    z += "                If mayCRUD And viewTemplateName = \"grid\" Then %>\xFE";
    z += "                SuccessOp = @view_<%=niceViewName%>_gridUpdateRows(viewVars.GridOperations, rtnErrors)\xFE";
    z += "                viewVars.ParentRefresh = true \xFE";
    z += "            <%Else%>\xFE";
    z += "                <%If mayCRUD And Btn.deleteform Then%>\xFE";
    z += "                   SuccessOp = @view_<%=niceViewName%>_deleteRow(viewVars.currentID, rtnErrors) \xFE";
    z += "                   If SuccessOp Then viewVars.currentID = \"\"; viewVars.ParentRefresh = true \xFE";
    z += "                <% ElseIf mayCRUD And Btn.saveform Then%>\xFE";
    z += "                   pkID = viewVars.currentID\xFE";
    z += "                   SuccessOp = @view_<%=niceViewName%>_writeRow(viewVars.Row, pkID, rtnErrors)\xFE";
    z += "                   If SuccessOp Then viewVars.currentID = pkID; viewVars.ParentRefresh = true \xFE";
    z += "                <% Else %>\xFE";
    z += "                    <% If customCall Then%>\xFE";
    z += "                        SuccessOp = @<%=@nicename(customCall)%>(viewVars, rtnErrors)\xFE";
    z += "                        If SuccessOp Then viewVars.ParentRefresh = true \xFE";
    z += "                        <% customCall = False %>\xFE";
    z += "                    <% Else\xFE";
    z += "                        needSuccessfulOp = False\xFE";
    z += "                    End If %>  \xFE";
    z += "                <% End If%>\xFE";
    z += "            <% End If %>\xFE";
    z += "            <% If customCall Then%>\xFE";
    z += "                <% if needSuccessfulOp Then %>\xFE";
    z += "                    if SuccessOp Then SuccessOp = @<%=@nicename(customCall)%>(viewVars, rtnErrors)\xFE";
    z += "                <% ELse \xFE";
    z += "                    needSuccessfulOp = True%>\xFE";
    z += "                    SuccessOp = @<%=@nicename(customCall)%>(viewVars, rtnErrors)\xFE";
    z += "                <% End If %>\xFE";
    z += "                If SuccessOp Then viewVars.ParentRefresh = true \xFE";
    z += "            <% End If %>\xFE";
    z += "            <% if needSuccessfulOp Then %>\xFE";
    z += "            If SuccessOp Then \xFE";
    z += "            <% End If %>\xFE";
    z += "                <% if Btn.url = \"\" And Btn.opento > 0 And Btn.opento < 13 And Btn.opento <> 11 And Btn.opento <> 7 And Btn.opento <> 3 Then\xFE";
    z += "                      If customCall = \"\" Then \xFE";
    z += "                          alert(\"You have a Btn Click URL transfer without a URL specified: \":Btn.buttontxt:' view:':niceViewName:'; opento:':Btn.opento)\xFE";
    z += "                          debug \xFE";
    z += "                          remove Btn, \"opento\"\xFE";
    z += "                          readjson testExistance from fhandle('dict', ProjectName), viewName Then writejson viewModel On fhandle('dict', ProjectName), viewName\xFE";
    z += "                      End If\xFE";
    z += "                      \xFE";
    z += "                ElseIf Btn.opento Then\xFE";
    z += "                    // This include is only used by it CheckCommand\xFE";
    z += "                    if Btn.addoutputs And viewModel.outputs Then\xFE";
    z += "                        If Right(LCase(viewModel.templateName),4) = \"form\" Then\xFE";
    z += "                            // If we have any parameters other than URL, then we must post back here to save them\xFE";
    z += "                            for each Column in viewModel.outputs\xFE";
    z += "                                If Column.name = \"\" Then Column.name = Column.field\xFE";
    z += "                                If Column.field = \"\" Then Column.field = Column.name\xFE";
    z += "                                \xFE";
    z += "                                Select Case Column.scope \xFE";
    z += "                                   case \"SessionVar\" %> \xFE";
    z += "                                      @Session[\"<%=Column.name%>\"] = viewVars.Row[\"<%=Column.field%>\"] \xFE";
    z += "                                   <%\xFE";
    z += "                                   \xFE";
    z += "                                   case \"ApplicationVar\" %> \xFE";
    z += "                                      @Application[\"<%=Column.name%>\"] = viewVars.Row[\"<%=Column.field%>\"] \xFE";
    z += "                                    <%\xFE";
    z += "                                      \xFE";
    z += "                                   case \"ProfileVar\" %> \xFE";
    z += "                                      @profilevar(\"<%=Column.name%>\", viewVars.Row[\"<%=Column.field%>\"]) \xFE";
    z += "                                    <%\xFE";
    z += "                                end select\xFE";
    z += "                            next\xFE";
    z += "                        End If\xFE";
    z += "                    End If\xFE";
    z += "                   %>\xFE";
    z += "                   UrlParams = \"<%= @jsb_mdl.UrlOutputParams(viewModel.outputs)%>\"\xFE";
    z += "                   <%if Btn.passparams Then%>\xFE";
    z += "                      UrlParams = UrlParams:Replace(Replace(IFF(UrlParams, \"&\", \"?\"):@QueryString, \"newRecord=1\", \"\"), \"&&\", \"&\")\xFE";
    z += "                   <%End If\xFE";
    z += "                   if Btn.addnewrec Then%>\xFE";
    z += "                      UrlParams = UrlParams:IFF(UrlParams, \"&\", \"?\"):\"newRecord=1\"\xFE";
    z += "                   <%End If  \xFE";
    z += "                   if Btn.opento = 13 Then %>\xFE";
    z += "                       Dim fromPage As String = @formVar(\"fromPage\")\xFE";
    z += "                       If fromPage Then \xFE";
    z += "                            If InStr(fromPage, \"?\") And Left(UrlParams, 1) = \"?\" Then UrlParams = \"&\":Mid(UrlParams, 2)\xFE";
    z += "                            @Response.Redirect(fromPage:UrlParams)\xFE";
    z += "                        End If\xFE";
    z += "                   <% End If\xFE";
    z += "                   If Btn.url <> \"\" And Btn.opento > 13 Then @Alert(\"You have defined a URL and used a Non-URL option in button: \":Btn.buttontxt:' view:':niceViewName:'; opento:':Btn.opento:'; url:':Btn.url) %>\xFE";
    z += "                   TransferHtml = @genEventHandler(\"Transfer\", \"<%=@DropIfRight(Btn.url,\".page\")%>\":UrlParams, <%=Btn.opento + 0%> /* <%=eventHandlerType(Btn.opento+0)%> */, \"<%= Btn.onParentExtra%>\", <%= Btn.addfrompage + 0%> /* add fromPage */, False /* passthruParams */)\xFE";
    z += "                   if viewVars.ParentRefresh Then TransferHtml := @Script(\"if (parent.refreshData) parent.refreshData();\")\xFE";
    z += "                   TransferHtml := @Script('window.eventHandler_Transfer(jsbFormVars(), \"<%=@jsb_mdl.pkColumnID(viewModel, ProjectName, viewName)%>\");')\xFE";
    z += "                \xFE";
    z += "                   // Push all our values into a hidden tag to be used by the transfer\xFE";
    z += "                   For Each Tag in viewVars.Row\xFE";
    z += "                      TransferHtml = @HIDDEN(Tag, viewVars.Row[Tag]):TransferHtml\xFE";
    z += "                   Next\xFE";
    z += "                       \xFE";
    z += "                   Stop @(-1):TransferHtml\xFE";
    z += "           \xFE";
    z += "                <%End If%>\xFE";
    z += "            <% if needSuccessfulOp Then %>\xFE";
    z += "            ElseIf rtnErrors Then \xFE";
    z += "                @Alert(rtnErrors, False)\xFE";
    z += "            End If\xFE";
    z += "            <% End If \xFE";
    z += "        End If %> \xFE";
    z += "        \xFE";
    z += "     <%Next%>\xFE";
    z += "<% \xFE";
    z += "    // Check addPostBackPick (addpick) commands\xFE";
    z += "    For Each Column, CI In viewModel.columns\xFE";
    z += "        If Column.pickpbfunction Then \xFE";
    z += "            If Column.display <> \"hidden\" And Column.name <> \"\" Then\xFE";
    z += "                niceColumnName = @niceName(Column.name)\xFE";
    z += "                If doKOBinding Then niceColumnName = \"KO_\":niceColumnName\xFE";
    z += "            \xFE";
    z += "                %>\xFE";
    z += "                Case \"pickBtn_<%=niceColumnName%>\"\xFE";
    z += "                    Call <%=Column.pickpbfunction%>(viewVars, \"<%=Column.name%>\", rtnErrors)\xFE";
    z += "                    If rtnErrors Then @Alert(rtnErrors, False)\xFE";
    z += "                <%\xFE";
    z += "            End If\xFE";
    z += "        End If\xFE";
    z += "    Next\xFE";
    z += "%>\xFE";
    z += "\xFE";
    z += "      Case \"Cancel\", \"\"\xFE";
    z += "\xFE";
    z += "      Case Else\xFE";
    z += "         * @Alert(\"Form <%=viewName%> got a '\":Btn:\"' on column \":ColumnID)\xFE";
    z += "   End Select\xFE";
    z += "End Sub"
    window.cached_jsb_viewtemplates["_checkcommands"] = z;
    window.cached_jsb_viewtemplates["_deleterow"] = "function view_<%=niceViewName%>_deleteRow(ByVal pkID As String, ByRef rtnErrors As String) As Boolean\xFE   Dim fTable As Table\xFE   \xFE   if !@jsb_bf.OpenTable(\"<%=viewModel.tableName%>\", \"<%=viewName%>\", fTable, rtnErrors) Then Return False\xFE   if pkID = \"\" Then rtnErrors = \"No primary key defined.  Delete failed\"; Return False\xFE\xFE   Delete fTable, pkID Else\xFE       rtnErrors = @Errors\xFE       LogErr(rtnErrors)\xFE       Return False\xFE   End If\xFE   \xFE   Return True\xFEend function";
    var z = "\xFE";
    z += "Function display_<%=niceViewName%>_extras(ByRef viewVars As JSON, ByVal Html As String) As String\xFE";
    z += "    Dim ToolBar As String = \"\", AdditionalAttributes As JSON, btnHtml As String\xFE";
    z += "    Dim Confirm As String, UrlParams As String, jsCode As String, jsCall As String, contextMenus As String\xFE";
    z += "    \xFE";
    z += "   <%if viewModel.custombtns Then\xFE";
    z += "       lastBtnWhen = 0\xFE";
    z += "       for each Btn in viewModel.custombtns\xFE";
    z += "            safeBtnText = Replace(Btn.buttontxt, '\"', '\\\\\"')\xFE";
    z += "            btnCss = Btn.buttoncss\xFE";
    z += "            if !btnCss And Btn.inPlace Then BtnCss = \"width: 99%; height: 50px; display: block; margin: auto; max-width: 300px\"\xFE";
    z += "            if Btn.showwhen <> lastBtnWhen Then\xFE";
    z += "                if lastBtnWhen Then %>\xFE";
    z += "                    End If\xFE";
    z += "                    \xFE";
    z += "                <% lastBtnWhen = 0\xFE";
    z += "                End If\xFE";
    z += "                If Btn.showwhen = 1 Then %>\xFE";
    z += "                     If !viewVars.currentID Then ;* New Record\xFE";
    z += "                <% lastBtnWhen = 1\xFE";
    z += "                ElseIf Btn.showwhen = 2 Then %>\xFE";
    z += "                     If viewVars.currentID Then ;* Existing Record\xFE";
    z += "                <% lastBtnWhen = 2\xFE";
    z += "                End If\xFE";
    z += "            End If\xFE";
    z += "            needsConfirmation = Btn.opento = 10 Or Btn.opento = 12 Or Btn.opento = 13 Or Btn.opento = 16\xFE";
    z += "            if Btn.confirmop = 1 Then\xFE";
    z += "                // 1-Always\xFE";
    z += "                \xFE";
    z += "            Elseif Btn.confirmop >= 2 And needsConfirmation Then\xFE";
    z += "                // 2-ifDirty %>\xFE";
    z += "                Confirm = 'if (window._isDirty && !confirm(\"Your changes will be lost. Are you sure you want to <%=safeBtnText%> this record?\")) return false; '\xFE";
    z += "            <%End If\xFE";
    z += "            If (mayCRUD And (Btn.saveform Or Btn.deleteform)) Or Btn.customcall or Btn.addoutputs Then %>\xFE";
    z += "            \xFE";
    z += "                * Setup server-side button: <%=Btn.buttontxt%>\xFE";
    z += "                <% if Btn.confirmop = 1 Then\xFE";
    z += "                   // 1-Always %>\xFE";
    z += "                   Confirm = 'if (!confirm(\"Are you sure you want to <%=safeBtnText%> this record?\")) return false; '\xFE";
    z += "                   AdditionalAttributes = { onclick: Confirm, style: \"<%=BtnCss%>\", name: \"formBtn_<%=niceViewName%>\" }\xFE";
    z += "                <% Elseif Btn.confirmop >= 2 And needsConfirmation Then\xFE";
    z += "                   // 2-ifDirty %>\xFE";
    z += "                   AdditionalAttributes = { onclick: Confirm, style: \"<%=BtnCss%>\" , name: \"formBtn_<%=niceViewName%>\"}\xFE";
    z += "                <%Else%>\xFE";
    z += "                   AdditionalAttributes = { style: \"<%=BtnCss%>\", name: \"formBtn_<%=niceViewName%>\" }\xFE";
    z += "                <%End If\xFE";
    z += "                if Btn.opento = 11 Then\xFE";
    z += "                %>AdditionalAttributes.onclick = \"<%=Btn.onParentExtra%>\"\xFE";
    z += "                <%End If\xFE";
    z += "                If Btn.verifyform And MayCRUD Then %>\xFE";
    z += "                   btnHtml = @SaveBtn('formBtn_<%=niceName(Btn.buttontxt)%>', \"<%=safeBtnText%>\", \"<%=safeBtnText%>\", AdditionalAttributes)\xFE";
    z += "                <% Else %>\xFE";
    z += "                   btnHtml = @SubmitBtn('formBtn_<%=niceName(Btn.buttontxt)%>', \"<%=safeBtnText%>\", \"<%=safeBtnText%>\", AdditionalAttributes)\xFE";
    z += "                <% End If\xFE";
    z += "             Else %>\xFE";
    z += "             \xFE";
    z += "                * Setup client-side button: <%=Btn.buttontxt%>\xFE";
    z += "                <% * this code is almost identical to code in _checkCommands\xFE";
    z += "                   if Btn.addoutputs And viewModel.outputs Then%>\xFE";
    z += "                       UrlParams = \"<%= @jsb_mdl.UrlOutputParams(viewModel.outputs)%>\"\xFE";
    z += "                       <%if Btn.passparams Then%>\xFE";
    z += "                          if UrlParams = \"\" Then UrlC = \"?\" Else UrlC = \"&\"\xFE";
    z += "                          UrlParams := UrlC:@QueryString\xFE";
    z += "                       <%End If\xFE";
    z += "                       if Btn.addnewrec Then%>\xFE";
    z += "                          if UrlParams = \"\" Then UrlC = \"?\" Else UrlC = \"&\"\xFE";
    z += "                          UrlParams := UrlC:\"newRecord=1\"\xFE";
    z += "                       <%End If\xFE";
    z += "                   Else If Btn.passparams Then%>\xFE";
    z += "                      UrlParams = \"?\":@QueryString<%if Btn.addnewrec Then%>:\"&newRecord=1\"<%End If%>\xFE";
    z += "                   <%Else%>\xFE";
    z += "                      <%if Btn.addnewrec Then%>UrlParams = \"?newRecord=1\"<%Else%>UrlParams = \"\"<%End If%>\xFE";
    z += "                   <%End If%>\xFE";
    z += "                   \xFE";
    z += "                   jsCode = @genEventHandler(\"<%=@NiceName(Btn.buttontxt)%>\", \"<%=@DropIfRight(Btn.url,\".page\")%>\":UrlParams, <%=Btn.opento + 0%> /* <%=eventHandlerType(Btn.opento+0)%> */, \"<%= Btn.onParentExtra%>\", <%= Btn.addfrompage + 0%> /* add fromPage */, False /* passthruParams */)\xFE";
    z += "                   jsCall = 'window.eventHandler_<%=@NiceName(Btn.buttontxt)%>(jsbFormVars(), \"<%=@jsb_mdl.pkColumnID(viewModel, ProjectName, viewName)%>\");'\xFE";
    z += "                <% if Btn.verifyform Then %>\xFE";
    z += "                   jsCall = 'if (!$(\"form\").parsley(\"validate\")) return false; ':jsCall\xFE";
    z += "                <%End If\xFE";
    z += "                if Btn.confirmop = 1 And !needsConfirmation Then\xFE";
    z += "                     // 1-Always (genEventHandler will will do the prompt) %>\xFE";
    z += "                     Confirm = 'if (!confirm(\"Are you sure you want to <%=safeBtnText%> this record?\")) return false; _isDirty = false; '\xFE";
    z += "                     jsCall = Confirm:jsCall\xFE";
    z += "                <% Elseif Btn.confirmop >= 2 And needsConfirmation Then\xFE";
    z += "                     // 2-ifDirty - handled already by genEventHander\xFE";
    z += "                End If\xFE";
    z += "                if !Btn.verifyform Then %>\xFE";
    z += "                   jsCall = '$(\"form\").parsley().destroy(); ':jsCall\xFE";
    z += "                <%End If%>\xFE";
    z += "                btnHtml = @Button('formBtn_<%=niceName(Btn.buttontxt)%>', \"<%=safeBtnText%>\", { onclick: jsCall, style: \"<%=BtnCss%>\" } ):jsCode\xFE";
    z += "           <% End If\xFE";
    z += "           if !noModelingStuff Then %>\xFE";
    z += "           contextMenus := @jsb_bf.adminButtonContextMenu(\"<%=niceViewName%>\", \"formBtn_<%=niceName(Btn.buttontxt)%>\")\xFE";
    z += "           <% End If\xFE";
    z += "           If Btn.inPlace Then %>\xFE";
    z += "              Html := btnHtml\xFE";
    z += "           <% Else %>\xFE";
    z += "              ToolBar := btnHtml\xFE";
    z += "           <% End If\xFE";
    z += "       next\xFE";
    z += "       \xFE";
    z += "       if lastBtnWhen Then%>\xFE";
    z += "          End If\xFE";
    z += "       <% End If\xFE";
    z += "    End If // custom buttons%>\xFE";
    z += "    \xFE";
    z += "    ToolBar := viewVars.extraToolBarHtml\xFE";
    z += "   \xFE";
    z += "   <%If viewModel.header Then%>\xFE";
    z += "         Dim Header As String = @Html(\"<div id='header_<%=niceViewName%>' class='HeaderStyle'>\"):\"<%=viewModel.header%>\":@Html(\"</div>\")\xFE";
    z += "         Html = @Rows2(\"46px\", Header, \"%\", Html, \"overflow: hidden\", \"overflow: auto\")\xFE";
    z += "   <%End If%>\xFE";
    z += "   <%\xFE";
    z += "   if !noModelingStuff Then %>\xFE";
    z += "   If @IsManager Then\xFE";
    z += "        <% If Right(LCase(viewModel.templateName),4) = \"form\" Then \xFE";
    z += "            For Each Column In viewModel.columns\xFE";
    z += "                If Column.display <> \"hidden\" And Column.name <> \"\" Then%>\xFE";
    z += "                   contextMenus := @adminControlContextMenu(\"<%=niceViewName%>\", \"<%=Column.name%>\", \"<%=Column.control%>\", <%=Column.required + 0%>, <%=Column.canedit + 0%>, <%=Column.newlineprefix + 0%>, <%=Column.fullline + 0%>, <%=Column.suppresslabel + 0%> )\xFE";
    z += "                <% End If\xFE";
    z += "            Next\xFE";
    z += "        Else If Right(LCase(viewModel.templateName), 4) = \"grid\" Then\xFE";
    z += "            if Right(viewTemplateName, 4) <> \"grid\" Then debug\xFE";
    z += "            \xFE";
    z += "            For Each Column In viewModel.columns\xFE";
    z += "                If Column.display <> \"hidden\" And Column.name <> \"\" Then%>\xFE";
    z += "                   contextMenus := @adminGridContextMenu(\"<%=niceViewName%>\", \"<%=Column.name%>\", \"<%=Column.control%>\", <%=Column.required + 0%>, <%=Column.canedit + 0%> )\xFE";
    z += "                <%End If\xFE";
    z += "            Next\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        If viewModel.header Then%>\xFE";
    z += "            contextMenus := @adminViewContextMenu(\"<%=niceViewName%>\", viewVars.showAddRmvViews + 0)\xFE";
    z += "        <%end if%>\xFE";
    z += "        Html := @Hidden('contextMenuText'):@Hidden('contextMenuID')\xFE";
    z += "   End If\xFE";
    z += "   Html := @Script(contextMenus)\xFE";
    z += "   <% End If %>\xFE";
    z += "   \xFE";
    z += "   <%$include _style%>\xFE";
    z += "\xFE";
    z += "    Call ?view_<%=niceViewName%>_Display_cc(viewVars, Html, ToolBar)\xFE";
    z += "\xFE";
    z += "   If ToolBar Then \xFE";
    z += "      ToolBar = @Html(\"<div class='BOBlock_ToolBar'>\"):ToolBar:@Html(\"</div>\")\xFE";
    z += "      If viewVars.parentMultiView Then \xFE";
    z += "          <% If viewModel.btnsonbot Then %>\xFE";
    z += "              Html = @Html('<div class=\"BOBlock <%=niceViewName%>\"<%=Style%>>':CRLF()):Html:ToolBar:@Html(\"</div>\":CRLF())\xFE";
    z += "          <% Else %>\xFE";
    z += "              Html = @Html('<div class=\"BOBlock <%=niceViewName%>\"<%=Style%>>':CRLF()):ToolBar:Html:@Html(\"</div>\":CRLF())\xFE";
    z += "          <% End If %>\xFE";
    z += "      Else \xFE";
    z += "          <% If viewModel.btnsonbot Then %>\xFE";
    z += "              Html = @Html('<div class=\"BOBlock FullHeight <%=niceViewName%>\"<%=Style%>>':CRLF()):@Rows2(\"%\", Html, \"66px\", ToolBar, \"overflow-y:auto\", \"overflow:hidden\"):@Html(\"</div>\":CRLF())\xFE";
    z += "          <% Else %>\xFE";
    z += "              Html = @Html('<div class=\"BOBlock FullHeight <%=niceViewName%>\"<%=Style%>>':CRLF()):@Rows2(\"66px\", ToolBar, \"%\", Html, \"overflow:hidden\", \"overflow-y:auto\"):@Html(\"</div>\":CRLF())\xFE";
    z += "          <% End If %>\xFE";
    z += "      End If\xFE";
    z += "   Else\xFE";
    z += "      Html = @Html('<div class=\"BOBlock <%=niceViewName%>\"<%=Style%>>':CRLF()):Html:@Html(\"</div>\":CRLF())\xFE";
    z += "   End If\xFE";
    z += "\xFE";
    z += "   * Output Refresh if needed\xFE";
    z += "   if viewVars.masterview Then\xFE";
    z += "        * Output Code that will enable us to refresh() if needed by our childer\xFE";
    z += "        Html := @Script(\"function refreshData() { if (window.<%=niceViewName%>_refresh) window.<%=niceViewName%>_refresh() }\")\xFE";
    z += "              \xFE";
    z += "   elseIf viewVars.ParentRefresh Then\xFE";
    z += "        viewVars.ParentRefresh = false\xFE";
    z += "        Html := @Script(\"if (parent.refreshData) parent.refreshData();\")\xFE";
    z += "   End If\xFE";
    z += "\xFE";
    z += "    <%  needAJax = False\xFE";
    z += "        for each Column in viewModel.inputs\xFE";
    z += "            if Column.scope = \"memoryVar\" Then needAJax = True\xFE";
    z += "        next\xFE";
    z += "        for each Row in viewModel.inputs\xFE";
    z += "            If row.name = \"\" Then row.name = row.field\xFE";
    z += "            if row.name <> \"\" and row.scope = \"memoryVar\" Then\xFE";
    z += "                cname = nicename(row.name)\xFE";
    z += "                If doKOBinding Then cname = \"KO_\":cname\xFE";
    z += "                \xFE";
    z += "                If needAJax Then\xFE";
    z += "                    If viewTemplateName = \"grid\" Then%>\xFE";
    z += "                        Html := attachtoevent('#<%=cname%>', 'change', \"function () { debugger; $('#jqGrid_<%=niceViewName%>').trigger( 'reloadGrid' );  }\")\xFE";
    z += "                    <% End  If\xFE";
    z += "                Else%>\xFE";
    z += "                    Html := attachtoevent('#<%=cname%>', 'change', \"function () { alert('I changed <%=cname%> in display_<%=niceViewName%>'); debugger;  }\") ;* doJsbSubmit()\xFE";
    z += "                <% End If\xFE";
    z += "            End If\xFE";
    z += "        next %>\xFE";
    z += "        \xFE";
    z += "    Return Html\xFE";
    z += "End Function\xFE";
    z += "\xFE";
    z += "Subroutine view_<%=niceViewName%>_Display_cc(ByRef viewVars As JSON, ByRef Html As String, ByRef ToolBar As String)\xFE";
    z += "   * Any extra setup needed\xFE";
    z += "End Sub\xFE";
    z += ""
    window.cached_jsb_viewtemplates["_display_extras"] = z;
    var z = "<%\xFE";
    z += "    ** Function genCodeStub(ProjectName, pageName, pageModel, viewName, viewModel, TemplateFileName) \xFE";
    z += "    ** We return the array GEN[]\xFE";
    z += "    **\xFE";
    z += "    niceViewName = @NiceName(@DropIfRight(viewName, \".view\", true)) \xFE";
    z += "    nicEditID = \"ne_\":niceViewName\xFE";
    z += "    doKOBinding = false\xFE";
    z += "    \xFE";
    z += "    Dim visibleColumns = @jsb_mdl.DropGridColumns(viewModel.columns)\xFE";
    z += "    lastNiceColumnName = \"\"\xFE";
    z += "    columnList = []\xFE";
    z += "    hasJavaScriptConditions = False\xFE";
    z += "    \xFE";
    z += "    For Each Column, CI In visibleColumns\xFE";
    z += "        If Column.name And Column.display <> \"hidden\" Then\xFE";
    z += "            If Column.display <> \"hidden\" Then columnList[-1] = Column\xFE";
    z += "        End If\xFE";
    z += "        If Column.jsconditionals Then hasJavaScriptConditions = True\xFE";
    z += "    Next\xFE";
    z += "    \xFE";
    z += "    hasDefaultValues = False\xFE";
    z += "    for Each Column In viewModel.columns\xFE";
    z += "        if Column.defaultvalue Then hasDefaultValues = True\xFE";
    z += "    next\xFE";
    z += "    \xFE";
    z += "    \xFE";
    z += "    // For all memoryVar INPUT's, force loading via AJAX\xFE";
    z += "    needAJax = False\xFE";
    z += "    for each Column in viewModel.inputs\xFE";
    z += "        if Column.scope = \"memoryVar\" Then needAJax = True\xFE";
    z += "    next\xFE";
    z += "        \xFE";
    z += "        \xFE";
    z += "    if mayCRUD Then\xFE";
    z += "%>\xFE";
    z += "<%$include _setup%>\xFE";
    z += "<%\xFE";
    z += "Else\xFE";
    z += "%>\xFE";
    z += "    Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON)\xFE";
    z += "    <% if viewModel.attachdb then %>\xFE";
    z += "        AttachDB \"<%=viewModel.attachdb%>\" else Stop @Errors\xFE";
    z += "    <% end if %>\xFE";
    z += "        viewVars.Row = {}\xFE";
    z += "<% if hasDefaultValues Then %>\xFE";
    z += "        viewVars.Row = view_<%=niceViewName%>_setDefaults(viewVars.Row)\xFE";
    z += "<% End If %>\xFE";
    z += "    End Sub\xFE";
    z += "<%\xFE";
    z += "    End If       \xFE";
    z += "%>\xFE";
    z += "\xFE";
    z += "Function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "<%$include _style%>\xFE";
    z += "\xFE";
    z += "<% if viewModel.useInlineHTML Then\xFE";
    z += "    Dim aryHTML As Array = ['<div class=\"container\">']\xFE";
    z += "\xFE";
    z += "    startedFormGroupRow = False\xFE";
    z += "    startedCollaspe = False\xFE";
    z += "    For Each Column, CI In columnList\xFE";
    z += "        callName = LCase(Column.control)\xFE";
    z += "        If callName = \"\" Then callName = \"textbox\"\xFE";
    z += "        \xFE";
    z += "        CtlLabel = Column.label\xFE";
    z += "        If !CtlLabel Then CtlLabel = Column.name\xFE";
    z += "        niceColumnName = @niceName(Column.name)\xFE";
    z += "    \xFE";
    z += "        if left(CallName, 4) <> \"ctl_\" then CallName = \"ctl_\":CallName\xFE";
    z += "        CallName = \"jsb_ctls.\":CallName\xFE";
    z += "\xFE";
    z += "        if Column.ctlstyle then additionalAttrs = { style: Column.ctlstyle } Else  additionalAttrs = []\xFE";
    z += "        \xFE";
    z += "        // Needs to happen post - ajax\xFE";
    z += "        // if Column.encrypt Then DataRef = 'decode(xts(Row[\"':Column.name:'\"]))' \xFE";
    z += "        Call @CallName(ProjectName, niceColumnName, Column, {} /* DataRef */, ByRef ctlHtml, False, additionalAttrs, False /* gencode */, viewName)\xFE";
    z += "        \xFE";
    z += "        if Column.collaspestart Then\xFE";
    z += "            // Close Row\xFE";
    z += "            if startedFormGroupRow Then\xFE";
    z += "               aryHTML[-1] = '</div><!-- end of form-group row -->' // end of form-group row\xFE";
    z += "               \xFE";
    z += "               startedFormGroupRow = False\xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            // Close collase_block\xFE";
    z += "            If startedCollaspe Then \xFE";
    z += "                aryHTML[-1] = \"</div><!-- end of collase_content -->\" ;* collase_content \xFE";
    z += "                aryHTML[-1] = \"</div><!-- end of collase_block -->\" ;* collase_block\xFE";
    z += "                startedCollaspe = false     \xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            aryHTML[-1] = '<div id=\"':niceName(Column.collaspestart):'_block\" class=\"collase_block\"><div id=\"':niceName(Column.collaspestart):'_header\" class=\"collase_header\" onclick=\"$(this).next().slideToggle();\">&#8681;&nbsp;':HtmlEncode(Column.collaspestart):'&nbsp;&#8681;</div>'\xFE";
    z += "            If Column.collaspopen Then\xFE";
    z += "                aryHTML[-1] = '<div id=\"':niceName(Column.collaspestart):'_content\" class=\"collase_content\">'\xFE";
    z += "            Else\xFE";
    z += "                aryHTML[-1] = '<div id=\"':niceName(Column.collaspestart):'_content\" class=\"collase_content\" style=\"display: none\">'\xFE";
    z += "            End If\xFE";
    z += "            startedCollaspe = True ;* 2 DIVS now open\xFE";
    z += "            \xFE";
    z += "        ElseIf Column.newlineprefix Or Column.fullline Then \xFE";
    z += "            if startedFormGroupRow Then\xFE";
    z += "                aryHTML[-1] = '</div><!-- end of form-group row -->' // end of form-group row\xFE";
    z += "                startedFormGroupRow = False\xFE";
    z += "            End If \xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        if !startedFormGroupRow Then\xFE";
    z += "            aryHTML[-1] = '<div class=\"form-group row\"':Style:'>'  // start of form-group row\xFE";
    z += "            startedFormGroupRow = True\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        // Need javascript to remove this\xFE";
    z += "        //If Column.minimumRole And LCase(Column.minimumRole) != \"anonymous\" Then\xFE";
    z += "        //   If @is<.=Column.minimumRole.> Then \xFE";
    z += "\xFE";
    z += "        If Column.pickfunction Then \xFE";
    z += "            if InStr(Column.pickfunction, \".page\") then PickURL = @DropIfRight(Column.pickfunction, \".page\") Else PickURL = Column.pickfunction\xFE";
    z += "            PickURL = Replace(PickURL, \"{projectname}\", @UrlEncode(ProjectName))\xFE";
    z += "            ctlHtml = @jsb_html.addPick(ctlHtml, \"niceColumnName:\", PickURL, \"80%\", \"60%\", PickURL, Column.autopostback)\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        If Column.pickpbfunction Then\xFE";
    z += "            ctlHtml = @jsb_html.addPostBackPick(ctlHtml, \"formBtn_\":niceViewName, \"pickBtn_\":niceColumnName, Column.pickpbfunction)\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        If callName = \"ctl_json_inline\" Then\xFE";
    z += "            ctlHtml = Replace(ctlHtml, \"mdlctl\", \"nstctl\")\xFE";
    z += "            ctlHtml = Replace(ctlHtml, ' id=\"LBL_', ' id=\"lbln_')\xFE";
    z += "            if Column.suppresslabel Then\xFE";
    z += "                ctlHtml = @Html(\"<mdlctl id='ctl_\":niceColumnName:\"' style='width: 100%'>\"):ctlHtml:@Html(\"</mdlctl>\")\xFE";
    z += "                \xFE";
    z += "            Else\xFE";
    z += "                ctlHtml = @lblCtlSet(CtlLabel, ctlHtml, niceColumnName, Column.fullline, Column.suppresslabel, Column.lblstyle)\xFE";
    z += "                \xFE";
    z += "            End If\xFE";
    z += "        Else\xFE";
    z += "            ctlHtml = @lblCtlSet(CtlLabel, ctlHtml, niceColumnName, Column.fullline, Column.suppresslabel, Column.lblstyle)\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        aryHTML[-1] = Convert2Html(ctlHtml)\xFE";
    z += "                \xFE";
    z += "        //If Column.minimumRole And LCase(Column.minimumRole) != \"anonymous\" Then\xFE";
    z += "        //   End If\xFE";
    z += "        // End If\xFE";
    z += "        \xFE";
    z += "        if Column.collaspeend And startedCollaspe Then\xFE";
    z += "            if startedFormGroupRow Then\xFE";
    z += "               aryHTML[-1] = '</div> <!-- end of form-group row -->'\xFE";
    z += "               \xFE";
    z += "               startedFormGroupRow = False\xFE";
    z += "            End If\xFE";
    z += "            aryHTML[-1] = \"</div><!-- end of collase_content -->\" ;* collase_content \xFE";
    z += "            aryHTML[-1] = \"</div><!-- end of collase_block -->\" ;* collase_block\xFE";
    z += "            \xFE";
    z += "            startedCollaspe = False\xFE";
    z += "        End If\xFE";
    z += "    Next\xFE";
    z += "    \xFE";
    z += "    If startedFormGroupRow Then\xFE";
    z += "       aryHTML[-1] = '</div> <!-- end of form-group row -->'\xFE";
    z += "       startedFormGroupRow = False\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    if startedCollaspe Then\xFE";
    z += "        aryHTML[-1] = \"</div><!-- end of collase_content -->\" ;* collase_content \xFE";
    z += "        aryHTML[-1] = \"</div><!-- end of collase_block -->\" ;* collase_block\xFE";
    z += "        startedCollaspe = False\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "   aryHTML[-1] = '</div><!-- end of container-->'\xFE";
    z += "\xFE";
    z += "   \xFE";
    z += "   aryHTML[-1] = [\"<script>\"]\xFE";
    z += "   \xFE";
    z += "    // For all memoryVar OUTPUT's, create the hidden variable.  Attach to the control and publish changes\xFE";
    z += "    for each Column As JSON in viewModel.outputs\xFE";
    z += "        if Column.scope = \"memoryVar\" Then\xFE";
    z += "            cname = Column.name\xFE";
    z += "            if !cname then cname = Column.field ;* field is required\xFE";
    z += "            aryHTML[-1] = Convert2Html(@HIDDEN('memoryVar_':niceName(cname)))\xFE";
    z += "            aryHTML[-1] = attachtoevent('#':niceName(cname), 'change', 'function () { storeVal(\"memoryVar_':niceName(cname):'>\", formVar(this)); $(\"#memoryVar_':niceName(cname):'\").trigger(\"change\") }')\xFE";
    z += "        end If\xFE";
    z += "    next\xFE";
    z += "    \xFE";
    z += "    for each Column in viewModel.inputs\xFE";
    z += "        if Column.scope = \"memoryVar\" Then\xFE";
    z += "            cname = Column.name\xFE";
    z += "            if !cname then cname = Column.field ;* field is required\xFE";
    z += "            // For all input memoryVars, monitor changes and reload by aJAX as necessary\xFE";
    z += "            aryHTML[-1] = attachtoevent('#memoryVar_':niceName(cname), 'change', 'function () { ':niceViewName:'_ajaxFormRequery() }')\xFE";
    z += "        End If\xFE";
    z += "    next\xFE";
    z += "\xFE";
    z += "    // for AJAX call to fetch current row\xFE";
    z += "    QuotedURL = '\"':@jsbRestCall('view_':niceViewName:'_readRow'):'\"'\xFE";
    z += "    jsSuccess = \" if (json._rtnErrors) alert(json._rtnErrors); else \":niceViewName:\"_reloadForm(json) \" \xFE";
    z += "    jsFailure = \" alert(errorThrown); \" \xFE";
    z += "    \xFE";
    z += "    \xFE";
    z += "    \xFE";
    z += "    aryHTML[-1] = \"function \":niceViewName:\"_ajaxFormRequery() {\"\xFE";
    z += "    aryHTML[-1] = \"   var formVars = urlEncode(json2string(jsbFormVars()))\"\xFE";
    z += "    aryHTML[-1] = \"   passthruParams = Field(myLocation(), '?', 2)\"\xFE";
    z += "    aryHTML[-1] = \"   if (passthruParams) formVars += '&' + passthruParams;\"\xFE";
    z += "    aryHTML[-1] =     Replace(@jsb_bf.AJax(QuotedUrl, jsSuccess, jsFailure, '\"sFormVars=\" + formVars'), CRLF(), CRLF():Space(4))\xFE";
    z += "    aryHTML[-1] = \"}\"\xFE";
    z += "    aryHTML[-1] = \"\"\xFE";
    z += "    aryHTML[-1] = \"function \":niceViewName:\"_reloadForm(newRow) {\"\xFE";
    z += "                for each Column in viewModel.outputs\xFE";
    z += "                    if Column.scope = \"memoryVar\" Then\xFE";
    z += "                        cname = Column.name\xFE";
    z += "                        if !cname then cname = Column.field ;* field is required\xFE";
    z += "                        aryHTML[-1] = \"   storeVal('[name=\\\"memoryVar_\":niceName(cname):\"\\\"]', newRow[\\'\":cname:\"\\'])\"\xFE";
    z += "                    end If\xFE";
    z += "                next\xFE";
    z += "                For Each Column, CI In visibleColumns\xFE";
    z += "                    If Column.display <> \"hidden\" And Column.name <> \"\" Then \xFE";
    z += "                        aryHTML[-1] = \"   storeVal('[name=\\\"\":niceName(Column.name):\"\\\"]', newRow[\\'\":Column.name:\"\\'])\"\xFE";
    z += "                        if Column.control = \"label\" then aryHTML[-1] = \"   $('[id=\\\"ctllbl_\":niceName(Column.name):\"\\\"]').html(htmlEncode(newRow[\\'\":Column.name:\"\\']))\"\xFE";
    z += "                    End If\xFE";
    z += "                Next\xFE";
    z += "    aryHTML[-1] = \"   _isDirty = false;\"\xFE";
    z += "    aryHTML[-1] = \"}\"\xFE";
    z += "    aryHTML[-1] = \"\"\xFE";
    z += "    if hasJavaScriptConditions Then\xFE";
    z += "       aryHTML[-1] =  Chr(96):\":\":niceViewName:\"_additionalJS(viewVars):\":Chr(96)\xFE";
    z += "    End if\xFE";
    z += "    aryHTML[-1] = \"   _isDirty = \":Chr(96):\":view_\":niceViewName:\"_isDirty(viewVars):\":Chr(96)\xFE";
    z += "    aryHTML[-1] = \"</script>\"\xFE";
    z += "    \xFE";
    z += "       HTML = Join(aryHTML, CRLF():Space(8))\xFE";
    z += "\xFE";
    z += "    %>\xFE";
    z += "    \xFE";
    z += "    Html = @Html(<%=Chr(96):Html:Chr(96)%>)\xFE";
    z += "    return display_<%=niceViewName%>_extras(viewVars, HTML:Script)\xFE";
    z += "End Function\xFE";
    z += "\xFE";
    z += "<% Else %>\xFE";
    z += "\xFE";
    z += "    Dim aryHTML As Array = [@Html('<div class=\"container\">')], Row As JSON = viewVars.Row, ctlHtml As String = \"\"\xFE";
    z += "\xFE";
    z += "    <% \xFE";
    z += "    startedFormGroupRow = False\xFE";
    z += "    startedCollaspe = False\xFE";
    z += "    For Each Column, CI In columnList\xFE";
    z += "        callName = LCase(Column.control)\xFE";
    z += "        If callName = \"\" Then callName = \"textbox\"\xFE";
    z += "        \xFE";
    z += "        CtlLabel = Column.label\xFE";
    z += "        If !CtlLabel Then CtlLabel = Column.name\xFE";
    z += "        niceColumnName = @niceName(Column.name)\xFE";
    z += "    \xFE";
    z += "        if left(CallName, 4) <> \"ctl_\" then CallName = \"ctl_\":CallName\xFE";
    z += "        CallName = \"jsb_ctls.\":CallName\xFE";
    z += "\xFE";
    z += "        if Column.ctlstyle then additionalAttrs = { style: Column.ctlstyle } Else  additionalAttrs = []\xFE";
    z += "        if Column.encrypt Then DataRef = 'decode(xts(Row[\"':Column.name:'\"]))' Else DataRef = 'Row[\"':Column.name:'\"]'\xFE";
    z += "      \xFE";
    z += "        If needAJax then \xFE";
    z += "            Call @CallName(ProjectName, niceColumnName, Column, {} /* DataRef */, ByRef ctlHtml, False, additionalAttrs, False /* gencode */, viewName)\xFE";
    z += "            if Left(ctlHtml, 1) = Chr(28) and Right(ctlHtml, 1) = Chr(29) Then\xFE";
    z += "                ctlHtml = Mid(ctlHtml, 2, len(ctlHtml)-2)\xFE";
    z += "                ctlHtml = Replace(ctlHtml, chr(28), \"\\\\x1C\")\xFE";
    z += "                ctlHtml = Replace(ctlHtml, chr(29), \"\\\\x1D\")\xFE";
    z += "            else\xFE";
    z += "                ctlHtml = Replace(ctlHtml, chr(28), \"\\\\x1C\")\xFE";
    z += "                ctlHtml = Replace(ctlHtml, chr(29), \"\\\\x1D\")\xFE";
    z += "            end if\xFE";
    z += "            ctlHtml = Replace(ctlHtml, \"\\\\x1D\\\\x1C\", \"\")\xFE";
    z += "            ctlHtml = \"ctlHtml = @Html(\":Chr(96):ctlHtml:Chr(96):\")\"\xFE";
    z += "            \xFE";
    z += "        Else        \xFE";
    z += "            Call @CallName(ProjectName, niceColumnName, Column, DataRef, ByRef ctlHtml, False, additionalAttrs, True /* gencode */, viewName)\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        if Column.collaspestart Then\xFE";
    z += "            // Close Row\xFE";
    z += "            if startedFormGroupRow Then %>\xFE";
    z += "               aryHTML[-1] = @Html('</div>') // end of form-group row\xFE";
    z += "               \xFE";
    z += "               <%startedFormGroupRow = False\xFE";
    z += "            End If\xFE";
    z += "            \xFE";
    z += "            // Close collase_block\xFE";
    z += "            If startedCollaspe Then %>\xFE";
    z += "                aryHTML[-1] = @Html(\"</div>\") ;* collase_content\xFE";
    z += "                aryHTML[-1] = @Html(\"</div>\") ;* collase_block \xFE";
    z += "                \xFE";
    z += "            <%End If%>\xFE";
    z += "            aryHTML[-1] = @Html('<div id=\"<%=niceName(Column.collaspestart)%>_block\" class=\"collase_block\"><div id=\"<%=niceName(Column.collaspestart)%>_header\" class=\"collase_header\" onclick=\"$(this).next().slideToggle();\">&#8681;&nbsp;<%=HtmlEncode(Column.collaspestart)%>&nbsp;&#8681;</div>') \xFE";
    z += "            <%If Column.collaspopen Then%>\xFE";
    z += "                aryHTML[-1] = @Html('<div id=\"<%=niceName(Column.collaspestart)%>_content\" class=\"collase_content\">') \xFE";
    z += "            <%Else%>\xFE";
    z += "                aryHTML[-1] = @Html('<div id=\"<%=niceName(Column.collaspestart)%>_content\" class=\"collase_content\" style=\"display: none\">') \xFE";
    z += "            <%End If\xFE";
    z += "            startedCollaspe = True ;* 2 DIVS now open\xFE";
    z += "            \xFE";
    z += "        ElseIf Column.newlineprefix Or Column.fullline Then \xFE";
    z += "            if startedFormGroupRow Then%>\xFE";
    z += "                aryHTML[-1] = @Html('</div>') // end of form-group row\xFE";
    z += "                <%startedFormGroupRow = False\xFE";
    z += "            End If \xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        if !startedFormGroupRow Then%>\xFE";
    z += "            aryHTML[-1] = @Html('<div class=\"form-group row\"<%=Style%>>')  // start of form-group row\xFE";
    z += "            \xFE";
    z += "            <%startedFormGroupRow = True\xFE";
    z += "        End If\xFE";
    z += "        If Column.minimumRole And LCase(Column.minimumRole) != \"anonymous\" Then%>\xFE";
    z += "           If @is<%=Column.minimumRole%> Then \xFE";
    z += "        <%End If%>\xFE";
    z += "        <%=ctlHtml%>\xFE";
    z += "        <%If Column.pickfunction Then \xFE";
    z += "            if InStr(Column.pickfunction, \".page\") then PickURL = @DropIfRight(Column.pickfunction, \".page\") Else PickURL = Column.pickfunction\xFE";
    z += "            PickURL = Replace(PickURL, \"{projectname}\", @UrlEncode(ProjectName))%>\xFE";
    z += "            ctlHtml = @jsb_html.addPick(ctlHtml, \"<%=niceColumnName%>\", \"<%=PickURL%>\", \"80%\", \"60%\", \"<%=PickURL%>\", <%=Column.autopostback + 0%>)\xFE";
    z += "            <%\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        If Column.pickpbfunction Then%>\xFE";
    z += "            ctlHtml = @jsb_html.addPostBackPick(ctlHtml, \"formBtn_<%=niceViewName%>\", \"pickBtn_<%=niceColumnName%>\", \"<%=Column.pickpbfunction%>\")\xFE";
    z += "        <%End If\xFE";
    z += "        If callName = \"ctl_json_inline\" Then%>\xFE";
    z += "            ctlHtml = Replace(ctlHtml, \"mdlctl\", \"nstctl\")\xFE";
    z += "            ctlHtml = Replace(ctlHtml, ' id=\"LBL_', ' id=\"lbln_')\xFE";
    z += "            <%if Column.suppresslabel Then%>\xFE";
    z += "                aryHTML[-1] = @Html(\"<mdlctl id='ctl_<%=niceColumnName%>' style='width: 100%'>\"):ctlHtml:@Html(\"</mdlctl>\")\xFE";
    z += "                \xFE";
    z += "            <%Else%>\xFE";
    z += "                aryHTML[-1] = @lblCtlSet(\"<%=CtlLabel%>\", ctlHtml, \"<%=niceColumnName%>\", <%=Column.fullline+0%>, <%=Column.suppresslabel+0%>, \"<%=Column.lblstyle%>\")\xFE";
    z += "                \xFE";
    z += "            <%End If\xFE";
    z += "        Else%>\xFE";
    z += "            aryHTML[-1] = @lblCtlSet(\"<%=CtlLabel%>\", ctlHtml, \"<%=niceColumnName%>\", <%=Column.fullline+0%>, <%=Column.suppresslabel+0%>, \"<%=Column.lblstyle%>\")\xFE";
    z += "            \xFE";
    z += "        <%End If\xFE";
    z += "        If Column.minimumRole And LCase(Column.minimumRole) != \"anonymous\" Then%>\xFE";
    z += "           End If\xFE";
    z += "        <%End If\xFE";
    z += "        if Column.collaspeend And startedCollaspe Then\xFE";
    z += "            if startedFormGroupRow Then%>\xFE";
    z += "               aryHTML[-1] = @Html('</div>') // end of form-group row\xFE";
    z += "               \xFE";
    z += "               <%startedFormGroupRow = False\xFE";
    z += "            End If%>\xFE";
    z += "            aryHTML[-1] = @Html(\"</div>\") ;* collase_content \xFE";
    z += "            aryHTML[-1] = @Html(\"</div>\") ;* collase_block\xFE";
    z += "            \xFE";
    z += "            <%startedCollaspe = False\xFE";
    z += "        End If\xFE";
    z += "    Next\xFE";
    z += "    \xFE";
    z += "    If startedFormGroupRow Then%>\xFE";
    z += "       aryHTML[-1] = @Html('</div>') // end of form-group row\xFE";
    z += "       <%startedFormGroupRow = False\xFE";
    z += "    End If\xFE";
    z += "    \xFE";
    z += "    if startedCollaspe Then %> \xFE";
    z += "        aryHTML[-1] = @Html(\"</div>\") ;* collase_content\xFE";
    z += "        aryHTML[-1] = @Html(\"</div>\") ;* collase_block \xFE";
    z += "        <%startedCollaspe = False\xFE";
    z += "    End If\xFE";
    z += "    %>\xFE";
    z += "   aryHTML[-1] = @Html('</div>') // end of container\xFE";
    z += "   <% if hasJavaScriptConditions Then %>\xFE";
    z += "   aryHTML[-1] = script_<%=niceViewName%>_additionalJS(viewVars)\xFE";
    z += "   <% End if\xFE";
    z += "\xFE";
    z += "    // For all memoryVar OUTPUT's, create the hidden variable.  Attach to the control and publish changes\xFE";
    z += "    for each Column As JSON in viewModel.outputs\xFE";
    z += "        if Column.scope = \"memoryVar\" Then\xFE";
    z += "            cname = Column.name\xFE";
    z += "            if !cname then cname = Column.field ;* field is required %>\xFE";
    z += "            aryHTML[-1] = @HIDDEN('memoryVar_<%=niceName(cname)%>')\xFE";
    z += "            aryHTML[-1] = attachtoevent('#<%=niceName(cname)%>', 'change', 'function () { storeVal(\"memoryVar_<%=niceName(cname)%>\", formVar(this)); $(\"#memoryVar_<%=niceName(cname)%>\").trigger(\"change\") }')\xFE";
    z += "            <% end If\xFE";
    z += "    next\xFE";
    z += "\xFE";
    z += "    If needAJax then\xFE";
    z += "        for each Column in viewModel.inputs\xFE";
    z += "            if Column.scope = \"memoryVar\" Then\xFE";
    z += "                cname = Column.name\xFE";
    z += "                if !cname then cname = Column.field ;* field is required\xFE";
    z += "                // For all input memoryVars, monitor changes and reload by aJAX as necessary%>\xFE";
    z += "                aryHTML[-1] = attachtoevent('#memoryVar_<%=niceName(cname)%>', 'change', 'function () { <%=niceViewName%>_ajaxFormRequery() }')\xFE";
    z += "                <% end If\xFE";
    z += "        next\xFE";
    z += "        \xFE";
    z += "        // for AJAX call to fetch current row\xFE";
    z += "        \xFE";
    z += "        QuotedURL = '\"':@jsbRestCall('view_':niceViewName:'_readRow'):'\"'\xFE";
    z += "        jsSuccess = \" if (json._rtnErrors) alert(json._rtnErrors); else \":niceViewName:\"_reloadForm(json) \" \xFE";
    z += "        jsFailure = \" alert(errorThrown); \" \xFE";
    z += "        \xFE";
    z += "        S = []\xFE";
    z += "        S[-1] = \"\"\xFE";
    z += "        S[-1] = \"function \":niceViewName:\"_ajaxFormRequery() {\"\xFE";
    z += "        S[-1] = \"   var formVars = urlEncode(json2string(jsbFormVars()))\"\xFE";
    z += "        S[-1] = \"   passthruParams = Field(myLocation(), '?', 2)\"\xFE";
    z += "        S[-1] = \"   if (passthruParams) formVars += '&' + passthruParams;\"\xFE";
    z += "        S[-1] =     Replace(@jsb_bf.AJax(QuotedUrl, jsSuccess, jsFailure, '\"sFormVars=\" + formVars'), CRLF(), CRLF():Space(4))\xFE";
    z += "        S[-1] = \"}\"\xFE";
    z += "        S[-1] = \"\"\xFE";
    z += "        S[-1] = \"function \":niceViewName:\"_reloadForm(newRow) {\"\xFE";
    z += "                    for each Column in viewModel.outputs\xFE";
    z += "                        if Column.scope = \"memoryVar\" Then\xFE";
    z += "                            cname = Column.name\xFE";
    z += "                            if !cname then cname = Column.field ;* field is required\xFE";
    z += "                            S[-1] = \"   storeVal('[name=\\\"memoryVar_\":niceName(cname):\"\\\"]', newRow[\\'\":cname:\"\\'])\"\xFE";
    z += "                        end If\xFE";
    z += "                    next\xFE";
    z += "                    For Each Column, CI In visibleColumns\xFE";
    z += "                        If Column.display <> \"hidden\" And Column.name <> \"\" Then \xFE";
    z += "                            S[-1] = \"   storeVal('[name=\\\"\":niceName(Column.name):\"\\\"]', newRow[\\'\":Column.name:\"\\'])\"\xFE";
    z += "                            if Column.control = \"label\" then S[-1] = \"   $('[id=\\\"ctllbl_\":niceName(Column.name):\"\\\"]').html(htmlEncode(newRow[\\'\":Column.name:\"\\']))\"\xFE";
    z += "                        End If\xFE";
    z += "                    Next\xFE";
    z += "        S[-1] = \"   _isDirty = false;\"\xFE";
    z += "        S[-1] = \"}\"\xFE";
    z += "        S[-1] = \"\"\xFE";
    z += "        \xFE";
    z += "        Gen[-1] = \"aryHTML[-1] = @Script(\":Chr(96):Join(S, CRLF():Space(8)):Chr(96):\")\"\xFE";
    z += "    End If        \xFE";
    z += "   %>\xFE";
    z += "   \xFE";
    z += "   aryHtml[-1] = @Script('_isDirty = ':LCase(view_<%=niceViewName%>_isDirty(viewVars))) ;* Some of the defaults may have made the page dirty\xFE";
    z += "   \xFE";
    z += "   return display_<%=niceViewName%>_extras(viewVars, Join(aryHtml, \"\"))\xFE";
    z += "End Function\xFE";
    z += "<% End if %>\xFE";
    z += "\xFE";
    z += "\xFE";
    z += "* view_<%=niceViewName%>_Unload(ByRef viewVars As JSON) - can be done genericaly with:\xFE";
    z += "*     ReadJSon viewModel From @fHandle(\"DICT\", \"<%=ProjectName%>\"), \"<%=viewName%>\" Else viewModel = {}; Alert('Missing dict <%=ProjectName%>, <%=viewName%>', True)\xFE";
    z += "*     @jsb_mdl.standardUnload(viewModel.columns, viewVars.Row, false)\xFE";
    z += "*\xFE";
    z += "Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "    * Unload the submitted form fields (@FormVars) into the edit row (viewvars.row)\xFE";
    z += "    Dim Row As JSON = ViewVars.Row\xFE";
    z += "    Dim unloadedValue As String\xFE";
    z += "    \xFE";
    z += "    <%\xFE";
    z += "    columnNames = []\xFE";
    z += "    For Each Column in viewModel.columns\xFE";
    z += "        CN = Column.name\xFE";
    z += "        IF CN And Column.canedit And Column.display <> \"hidden\" THEN\xFE";
    z += "            If LCase(Column.control) = \"uploadbox\" Then %>\xFE";
    z += "               * Upload a file  \xFE";
    z += "                Dim unloadedFileName As String = unload_UploadBox('<%=@NiceName(Column.name)%>', '<%=Column.storagelocation%>', <%=Column.registeraccount + 0%> /* Register in System */,  '<%=Column.filenameprefix%>' /* prefix */,  <%=IIF(Column.appenddate, \"'NiceName(Chr(95):Datetime())'\", \"''\")%> /* suffix */, shortName)\xFE";
    z += "                If !unloadedFileName Then\xFE";
    z += "                    If @Errors Then Alert(@Errors, False)\xFE";
    z += "                Else\xFE";
    z += "                    Row[\"<%=Column.name%>\"] = unloadedFileName\xFE";
    z += "                    <%if Column.registeraccount And Column.appenddate Then%>\xFE";
    z += "                        NeedMerge = ViewVars.OriginalRow('<%=@NiceName(Column.name)%>') <> \"\"\xFE";
    z += "                        If NeedMerge Then\xFE";
    z += "                           // Attach unloadedValue and \"x\":unloadedValue\xFE";
    z += "                           // Contrast and compare the tables, output the result to a new database\xFE";
    z += "                        End If\xFE";
    z += "                    <%End If%>\xFE";
    z += "                End If\xFE";
    z += "            <% else %>\xFE";
    z += "                unloadedValue = @FormVar(\"<%=@NiceName(Column.name)%>\")\xFE";
    z += "                <%if Column.encrypt Then%>\xFE";
    z += "                    unloadedValue = STX(Encode(unloadedValue))\xFE";
    z += "                <%End If%>\xFE";
    z += "                <%If LCase(Column.defaultvalue) = \"{lastvalue}\" Then %>\xFE";
    z += "                    if Left(unloadedValue, 1) <> \"{\" Then @session[\"LastValue:<%=CN%>\"] = unloadedValue; @application[\"LastValue:<%=CN%>\"] = unloadedValue\xFE";
    z += "                <%End If%>\xFE";
    z += "                <%\xFE";
    z += "                columnNames[-1] = Column.name\xFE";
    z += "            \xFE";
    z += "                if Column.control = \"json_inline\" Or Column.control = \"json_popup\" then Column.datatype = \"jsonarray\"\xFE";
    z += "                if Column.control = \"datebox\" then Column.datatype = \"date\"\xFE";
    z += "                if Column.control = \"datatimebox\" then Column.datatype = \"datetime\"\xFE";
    z += "                if Column.control = \"timebox\" then Column.datatype = \"time\"\xFE";
    z += "                if Column.control = \"checkbox\" then Column.datatype = \"boolean\"\xFE";
    z += "    \xFE";
    z += "                select case Column.datatype\xFE";
    z += "                    case \"autointeger\", \"integer\": \xFE";
    z += "                        %>\xFE";
    z += "                        if Len(unloadedValue) Then Row[\"<%=CN%>\"] = CInt(Val(unloadedValue))\xFE";
    z += "                        <%\xFE";
    z += "                    case \"double\": \xFE";
    z += "                        %>\xFE";
    z += "                        if Len(unloadedValue) Then Row[\"<%=CN%>\"] = Val(unloadedValue)\xFE";
    z += "                        <%\xFE";
    z += "                    case \"boolean\": \xFE";
    z += "                        %>\xFE";
    z += "                        if LCase(unloadedValue) = \"false\" or unloadedValue = \"\" Or unloadedValue = \"0\" Then Row[\"<%=CN%>\"] = False Else Row[\"<%=CN%>\"] = True\xFE";
    z += "                        <%\xFE";
    z += "                    case \"jsonarray\": \xFE";
    z += "                        %>\xFE";
    z += "                        If unloadedValue Then Row[\"<%=CN%>\"] = JSON(unloadedValue)\xFE";
    z += "                        <%\xFE";
    z += "                    case \"date\": \xFE";
    z += "                        %>\xFE";
    z += "                        If unloadedValue Then \xFE";
    z += "                            Dim FVN As String = Date(Date(unloadedValue))\xFE";
    z += "                            If FVN Then Row[\"<%=CN%>\"] = FVN\xFE";
    z += "                        End If\xFE";
    z += "                        <%\xFE";
    z += "                    case \"datetime\": \xFE";
    z += "                        %>\xFE";
    z += "                        If unloadedValue Then \xFE";
    z += "                            FVN = DateTime(DateTime(unloadedValue))\xFE";
    z += "                            If FVN Then Row[\"<%=CN%>\"] = FVN\xFE";
    z += "                        End If\xFE";
    z += "                        <%\xFE";
    z += "                    case \"time\": \xFE";
    z += "                        %>\xFE";
    z += "                        If unloadedValue Then \xFE";
    z += "                            Dim FVN As String = Time(Time(unloadedValue))\xFE";
    z += "                            If FVN Then Row[\"<%=CN%>\"] = FVN\xFE";
    z += "                        End If\xFE";
    z += "                        <%\xFE";
    z += "                    case else\xFE";
    z += "                        %>\xFE";
    z += "                        If unloadedValue <> Row[\"<%=CN%>\"] Then Row[\"<%=CN%>\"] = unloadedValue\xFE";
    z += "                        <%\xFE";
    z += "                end select\xFE";
    z += "                %>\xFE";
    z += "                <%            \xFE";
    z += "            end if\xFE";
    z += "        End If\xFE";
    z += "    Next\xFE";
    z += "    %>\xFE";
    z += "End Subroutine\xFE";
    z += "\xFE";
    z += "<%\xFE";
    z += "if mayCRUD Then\xFE";
    z += "%>\xFE";
    z += "function view_<%=niceViewName%>_isDirty(ByRef viewVars As JSON) As Boolean\xFE";
    z += "    Dim currentRow As JSON = viewVars.Row\xFE";
    z += "    Dim originalRow As JSON = viewVars.OriginalRow\xFE";
    z += "    <%  For Each column in viewModel.columns \xFE";
    z += "        if column.name then %>\xFE";
    z += "        If currentRow['<%=column.name%>'] <> originalRow['<%=column.name%>'] Then Return True\xFE";
    z += "        <% \xFE";
    z += "        End If\xFE";
    z += "        Next %>\xFE";
    z += "    Return False\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "* Create a empty row with defaults\xFE";
    z += "function view_<%=niceViewName%>_newRow(ByRef rtnErrors As String) As JSON\xFE";
    z += "<% if hasDefaultValues Then %>\xFE";
    z += "    Return view_<%=niceViewName%>_setDefaults({})\xFE";
    z += "<% Else %>\xFE";
    z += "    Return {}\xFE";
    z += "<% End If %>\xFE";
    z += "End Function\xFE";
    z += "\xFE";
    z += "function view_<%=niceViewName%>_getPK(ByVal SqlFilter As String, ByRef pkID As String, ByRef rtnErrors As String) As Boolean\xFE";
    z += "   <%if viewModel.tableName then %>\xFE";
    z += "        Dim selectHandle As SelectList\xFE";
    z += "        Dim fTable As Table\xFE";
    z += "        \xFE";
    z += "        if !@jsb_bf.OpenTable(\"<%=viewModel.tableName%>\", \"<%=viewName%>\", fTable, rtnErrors) Then Return False\xFE";
    z += "\xFE";
    z += "        select fTable to selectHandle Where SqlFilter Else\xFE";
    z += "            rtnErrors = \"Form-\":System(28):\"-Select-\":SqlFilter:\": \":@Errors\xFE";
    z += "            LogErr(rtnErrors)\xFE";
    z += "            Return False\xFE";
    z += "        End If\xFE";
    z += "\xFE";
    z += "        <%if viewModel.newRecord Then%>\xFE";
    z += "            ReadNext pkID From selectHandle ELse pkID = Null\xFE";
    z += "        <%Else%>\xFE";
    z += "            ReadNext pkID From selectHandle ELse rtnErrors = \"No items found in table '<%=viewModel.tableName%>' Where \":SqlFilter\xFE";
    z += "        <%End If%>\xFE";
    z += "        \xFE";
    z += "        Return True\xFE";
    z += "   <%Else%>\xFE";
    z += "        pkID = @UserName\xFE";
    z += "        Return True\xFE";
    z += "   <%End If%>\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "<%if needAJax then%>\xFE";
    z += "    *\xFE";
    z += "    * This is the <%=niceViewName%> AJAX callback function\xFE";
    z += "    *\xFE";
    z += "    Restful Function view_<%=niceViewName%>_readRow(sFormVars As String) As JSON\xFE";
    z += "        Dim formVars As JSON = JSON(sFormVars)\xFE";
    z += "        dim rtnErrors As String = \"\"\xFE";
    z += "        Dim SqlColumns As String = \"\"\xFE";
    z += "        Dim SqlFilter As String = \"\"\xFE";
    z += "        Dim currentID As String = \"\"\xFE";
    z += "        Dim Row As JSON\xFE";
    z += "        \xFE";
    z += "        <%= @jsb_mdl.buildSqlSelect(viewModel, true)%>\xFE";
    z += "        \xFE";
    z += "        If rtnErrors Then Goto RtnErrors\xFE";
    z += "        \xFE";
    z += "        * Based on current filtering (SqlFilter), Get a record ID (PrimaryKey)\xFE";
    z += "        If !@view_<%=niceViewName%>_getPK(SqlFilter, currentID, rtnErrors) Then Goto RtnErrors\xFE";
    z += "    \xFE";
    z += "        If currentID = \"\" Then\xFE";
    z += "            <%If viewModel.allowNewRecord Then%>\xFE";
    z += "                 rtnErrors = \"\"\xFE";
    z += "                 Row = @view_<%=niceViewName%>_newRow(rtnErrors)\xFE";
    z += "                 If rtnErrors Then Goto RtnErrors\xFE";
    z += "            <%Else%>\xFE";
    z += "                 rtnErrors = 'No records found'\xFE";
    z += "                 Goto RtnErrors\xFE";
    z += "            <%End if%>\xFE";
    z += "         \xFE";
    z += "        Else If @view_<%=niceViewName%>_readRow(currentID, Row, rtnErrors) Then\xFE";
    z += "            <% if hasDefaultValues Then %>\xFE";
    z += "                Row = view_<%=niceViewName%>_setDefaults(Row)\xFE";
    z += "            <% End If %>\xFE";
    z += "        Else\xFE";
    z += "            * Didn't find record \xFE";
    z += "            if !Row Then Row = {}\xFE";
    z += "            If rtnErrors Then Goto RtnErrors\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        Row._rtnErrors = \"\"\xFE";
    z += "        Return Row\xFE";
    z += "       \xFE";
    z += "    RtnErrors:\xFE";
    z += "        Dim R As JSON = { }\xFE";
    z += "        R.rtnErrors = rtnErrors\xFE";
    z += "        Return R\xFE";
    z += "        \xFE";
    z += "    End Function\xFE";
    z += "<%End If%>\xFE";
    z += "\xFE";
    z += "<%$include _readRow%>\xFE";
    z += "\xFE";
    z += "\xFE";
    z += "<%$include _writeRow%>\xFE";
    z += "\xFE";
    z += "\xFE";
    z += "<%$include _deleteRow%>\xFE";
    z += "\xFE";
    z += "\xFE";
    z += "function view_<%=niceViewName%>_cancelEdits(ByVal pkID As String, ByRef rtnErrors As String) As Boolean\xFE";
    z += "   Return True\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "<%\xFE";
    z += "Else // MayCrud\xFE";
    z += "%>\xFE";
    z += "function view_<%=niceViewName%>_isDirty(ByRef viewVars As JSON) As Boolean\xFE";
    z += "    Return False\xFE";
    z += "end function\xFE";
    z += "\xFE";
    z += "<%\xFE";
    z += "End If // MayCrud\xFE";
    z += "%>\xFE";
    z += "\xFE";
    z += "<%$include _checkCommands%>\xFE";
    z += "\xFE";
    z += "<%$include _display_extras%>\xFE";
    z += "\xFE";
    z += "<% if hasDefaultValues Then %>\xFE";
    z += "    <%$include _setDefaults%>\xFE";
    z += "<% End If %>\xFE";
    z += "\xFE";
    z += "<% if hasJavaScriptConditions Then %>\xFE";
    z += "    <%$include _additionalJS%>\xFE";
    z += "<% End If %>\xFE";
    z += "            "
    window.cached_jsb_viewtemplates["_form"] = z;
    var z = "function view_<%=niceViewName%>_readRow(ByVal pkID As String, ByRef rtnRow As JSON, ByRef rtnErrors As String) As Boolean\xFE";
    z += "   <% modelColumns = @jsb_mdl.DropGridColumns(viewModel.columns) %>\xFE";
    z += "   <%if viewModel.tableName then %>\xFE";
    z += "        <% if viewModel.attachdb Then %>\xFE";
    z += "        AttachDB \"<%=viewModel.attachdb%>\" else rtnErrors = @Errors; Return Null\xFE";
    z += "        <%End If%>\xFE";
    z += "       \xFE";
    z += "        Dim fTable As Table\xFE";
    z += "        if !@jsb_bf.OpenTable(\"<%=viewModel.tableName%>\", \"<%=viewName%>\", fTable, rtnErrors) Then Return False\xFE";
    z += "        If pkID = \"\" Then Return @view_<%=niceViewName%>_newRow(rtnErrors)\xFE";
    z += "       \xFE";
    z += "        ReadJSon rtnRow From fTable, pkID Else\xFE";
    z += "           rtnErrors = @Errors\xFE";
    z += "           if rtnErrors = \"\" Then rtnErrors =  \"Item '\":pkID:\"' in '<%=viewName%>' not found.\"\xFE";
    z += "           LogErr(rtnErrors)\xFE";
    z += "           Return False\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        if rtnRow.ItemID And hasTag(rtnRow, \"ItemContent\") Then\xFE";
    z += "            Dim sItem As String = rtnRow.ItemContent\xFE";
    z += "            Dim Item As Array\xFE";
    z += "            if instr(sItem, crlf()) then item = split(sItem, crlf()) else item = split(sItem, AM())\xFE";
    z += "            rtnRow = { isA_CrlF_TextFile: true }\xFE";
    z += "            <%\xFE";
    z += "                For Each Column, CI In modelColumns\xFE";
    z += "                    If LCase(left(Column.name, 2)) = \"*a\" Then \xFE";
    z += "                    %> rtnRow[\"<%=Column.name%>\"] = Item[<%=Val(mid(Column.name, 3))%>] \xFE";
    z += "                    <%\xFE";
    z += "                    End If\xFE";
    z += "                Next\xFE";
    z += "            %>\xFE";
    z += "        end if\xFE";
    z += "    \xFE";
    z += "        <%\xFE";
    z += "            WantItemId = \"\"\xFE";
    z += "            For Each Column, CI In modelColumns\xFE";
    z += "                If LCase(Column.name) = \"itemid\" Then\xFE";
    z += "                    WantItemId = Column.name\xFE";
    z += "                    break\xFE";
    z += "                End If\xFE";
    z += "            Next\xFE";
    z += "        %>\xFE";
    z += "        <%if WantItemId Then%>\xFE";
    z += "            rtnRow[\"<%=WantItemID%>\"] = pkID\xFE";
    z += "        <%End If%>\xFE";
    z += "\xFE";
    z += "    <%Else%>\xFE";
    z += "        rtnRow = {}\xFE";
    z += "    <%End If%>\xFE";
    z += "    Return True\xFE";
    z += "End Function"
    window.cached_jsb_viewtemplates["_readrow"] = z;
    var z = "function view_<%=niceViewName%>_setDefaults(ByVal rtnRow As JSON) As JSON\xFE";
    z += "    <%\xFE";
    z += "    For Each Column in viewModel.columns\xFE";
    z += "        cName = Column.name\xFE";
    z += "        if cName Then\xFE";
    z += "            dValue = Column.defaultvalue\xFE";
    z += "            If dValue Then\xFE";
    z += "                if left(dValue, 2) = \"[{\" and right(dValue, 2) = \"}]\" Then\xFE";
    z += "                    %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = JSON(dValue)\xFE";
    z += "                    <%\xFE";
    z += "                else if left(dValue, 1) = \"{\" and right(dValue, 1) = \"}\" Then\xFE";
    z += "                    dValue = mid(dValue, 2, len(dValue)-2)\xFE";
    z += "                    if instr(dvalue, \"(\") and Right(dvalue, 1) = \")\" then\xFE";
    z += "                       param = field(dValue, \"(\", 2)\xFE";
    z += "                       param = left(param, len(param)-1)\xFE";
    z += "                       dValue = field(dValue, \"(\", 1)\xFE";
    z += "                       \xFE";
    z += "                       If Left(param, 1) = \"'\" And Right(param, 1) = \"'\" Then \xFE";
    z += "                           Param = Mid(Param, 2, Len(Param) - 2)\xFE";
    z += "                       ElseIf Left(param, 1) = '\"' And Right(param, 1) = '\"' Then \xFE";
    z += "                           Param = Mid(Param, 2, Len(Param) - 2)\xFE";
    z += "                       End If\xFE";
    z += "                    else\xFE";
    z += "                        Param = dValue\xFE";
    z += "                    end if\xFE";
    z += "                    if left(dValue, 1) = \"@\" then dValue = Mid(dValue, 2)\xFE";
    z += "                    \xFE";
    z += "                    select case lcase(dValue)\xFE";
    z += "                        case \"viewName\", \"viewname\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = \"<%=viewName%>\"\xFE";
    z += "                            <%\xFE";
    z += "\xFE";
    z += "                        case \"niceViewName\", \"niceviewname\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = @NiceName(\"<%=viewName%>\")\xFE";
    z += "                            <%\xFE";
    z += "\xFE";
    z += "                        case \"paramvar\",\"param\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = @paramvar('<%=Param%>')\xFE";
    z += "                            <%\xFE";
    z += "                            \xFE";
    z += "                        case \"sessionvar\", \"session\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = @sessionvar('<%=Param%>')\xFE";
    z += "                            <%\xFE";
    z += "\xFE";
    z += "                        case \"json\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = JSON('<%=Param%>')\xFE";
    z += "                            <%\xFE";
    z += "                            \xFE";
    z += "                        case \"lastvalue\"\xFE";
    z += "                           %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = Iff(@sessionvar(\"LastValue:<%=cName%>\"), @sessionvar(\"LastValue:<%=cName%>\"), @applicationvar(\"LastValue:<%=cName%>\"))\xFE";
    z += "                           <%\xFE";
    z += "                           \xFE";
    z += "                        case \"applicationvar\", \"application\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = @applicationvar('<%=Param%>')\xFE";
    z += "                            <%\xFE";
    z += "                            \xFE";
    z += "                        case \"queryvar\", \"urlparam\", \"urlvar\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = @queryvar('<%=Param%>')\xFE";
    z += "                            <%       \xFE";
    z += "                        \xFE";
    z += "                        case \"time\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = time(time())\xFE";
    z += "                            <%          \xFE";
    z += "                        \xFE";
    z += "                        case \"itime\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = time()\xFE";
    z += "                            <%\xFE";
    z += "                        \xFE";
    z += "                        case \"timestamp\", \"now\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = now()\xFE";
    z += "                            <%            \xFE";
    z += "                        \xFE";
    z += "                        case \"date\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = date(date())\xFE";
    z += "                            <%           \xFE";
    z += "                        \xFE";
    z += "                        case \"idate\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = date()\xFE";
    z += "                            <%  \xFE";
    z += "                            \xFE";
    z += "                        case \"datetime\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = date()\xFE";
    z += "                            <%\xFE";
    z += "                            \xFE";
    z += "                        case \"username\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = @UserName\xFE";
    z += "                            <%   \xFE";
    z += "                            \xFE";
    z += "                        case \"timedate\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = timedate()\xFE";
    z += "                            <%   \xFE";
    z += "                        \xFE";
    z += "                        case \"guid\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = @Guid\xFE";
    z += "                            <%  \xFE";
    z += "                            \xFE";
    z += "                        case TypeOf(Column[dValue]) = \"String\"\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = \"<%=Column[dValue]%>\"\xFE";
    z += "                            <%\xFE";
    z += "                            \xFE";
    z += "                        case Else\xFE";
    z += "                            %>If !hasTag(rtnRow, '<%=cName%>') Then rtnRow['<%=cName%>'] = <%=Column[dValue]%>\xFE";
    z += "                            <%\xFE";
    z += "                    end select\xFE";
    z += "                    \xFE";
    z += "                elseif IsNum(dValue) Then\xFE";
    z += "                    %>rtnRow['<%=cName%>'] = <%=dValue%>\xFE";
    z += "                    <%\xFE";
    z += "                else\xFE";
    z += "                    %>rtnRow['<%=cName%>'] = <%=Chr(96):dValue:Chr(96)%>\"\xFE";
    z += "                    <%\xFE";
    z += "                end if\xFE";
    z += "            end if\xFE";
    z += "        end if\xFE";
    z += "    Next\xFE";
    z += "    %>\xFE";
    z += "   \xFE";
    z += "   Return rtnRow\xFE";
    z += "end function\xFE";
    z += ""
    window.cached_jsb_viewtemplates["_setdefaults"] = z;
    var z = "*\xFE";
    z += "* To be compatable with the modeler and other views, we must implement these 4 routines:\xFE";
    z += "*\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Setup(ByRef viewVars As JSON) // viewVars = { fromParentPage: '', parentMultiView: '', lastView: true }\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_Unload(ByRef viewVars As JSON)\xFE";
    z += "*   Subroutine view_<%=niceViewName%>_checkCommands(viewVars, inCmd, ColumnID)\xFE";
    z += "*   function display_<%=niceViewName%>(ByRef viewVars As JSON) As String\xFE";
    z += "*\xFE";
    z += "*\xFE";
    z += "Subroutine view_<%=niceViewName%>_Setup(viewVars As JSON)\xFE";
    z += "    <% if viewModel.attachdb then %>\xFE";
    z += "        AttachDB \"<%=viewModel.attachdb%>\" else Stop @Errors\xFE";
    z += "    <% end if %>\xFE";
    z += "    Dim currentID As String = \"\" ;* This will be set here or by write\xFE";
    z += "    Dim rtnErrors As String = \"\"\xFE";
    z += "    Dim Row As JSON\xFE";
    z += "    Dim SqlFilter As String = \"\"\xFE";
    z += "    Dim SqlColumns As String = \"\"\xFE";
    z += "    \xFE";
    z += "    <%if viewModel.newRecord Then%>\xFE";
    z += "         Row = @view_<%=niceViewName%>_newRow(rtnErrors)\xFE";
    z += "         If rtnErrors And !@isPostBack Then @Alert(rtnErrors, True)\xFE";
    z += "         \xFE";
    z += "    <%Else%>\xFE";
    z += "        <%If viewModel.allowNewRecord Then%>\xFE";
    z += "            If InStr(@Url, \"newRecord=1\") Then\xFE";
    z += "                 Row = @view_<%=niceViewName%>_newRow(rtnErrors)\xFE";
    z += "                 If rtnErrors And !@isPostBack Then @Alert(rtnErrors, True)\xFE";
    z += "            Else\xFE";
    z += "                 Row = {}\xFE";
    z += "        <%Else%>\xFE";
    z += "            Row = {}\xFE";
    z += "        <%End if%>\xFE";
    z += "        <%= @jsb_mdl.buildSqlSelect(viewModel, false)%>\xFE";
    z += "        \xFE";
    z += "        If rtnErrors And !@isPostBack Then @Alert(rtnErrors, True)\xFE";
    z += "        \xFE";
    z += "        * Based on current filtering (SqlFilter), Get a record ID (PrimaryKey)\xFE";
    z += "        If !@view_<%=niceViewName%>_getPK(SqlFilter, currentID, rtnErrors) And !@isPostBack Then Alert(rtnErrors, True)\xFE";
    z += "    \xFE";
    z += "        If currentID = \"\" Then\xFE";
    z += "            <%If viewModel.allowNewRecord Then%>\xFE";
    z += "                 rtnErrors = \"\"\xFE";
    z += "                 Row = @view_<%=niceViewName%>_newRow(rtnErrors)\xFE";
    z += "                 If rtnErrors And !@isPostBack Then @Alert(rtnErrors, True)\xFE";
    z += "            <%Else%>\xFE";
    z += "                 if !@isPostBack Then Alert('No records found', False)\xFE";
    z += "            <%End if%>\xFE";
    z += "            \xFE";
    z += "<% if hasDefaultValues Then %>\xFE";
    z += "        Else If @view_<%=niceViewName%>_readRow(currentID, Row, rtnErrors) Then\xFE";
    z += "            Row = view_<%=niceViewName%>_setDefaults(Row)\xFE";
    z += "        Else\xFE";
    z += "<% Else %>\xFE";
    z += "        Else If !@view_<%=niceViewName%>_readRow(currentID, Row, rtnErrors) Then\xFE";
    z += "<% End If %>\xFE";
    z += "            * Didn't find record \xFE";
    z += "            if !Row Then Row = {}\xFE";
    z += "            If rtnErrors And !@isPostBack Then @Alert(rtnErrors, False)\xFE";
    z += "        End If\xFE";
    z += "        \xFE";
    z += "        <%If viewModel.allowNewRecord Then%>\xFE";
    z += "            End If\xFE";
    z += "        <%End if%>\xFE";
    z += "    <%End if%>\xFE";
    z += "    \xFE";
    z += "    viewVars.Row = Row\xFE";
    z += "    viewVars.currentID = currentID ;* Will always be blank if new record (updated on write)\xFE";
    z += "    viewVars.htmlBackDrop = \"\"\xFE";
    z += "    viewVars.OriginalRow = Clone(Row)\xFE";
    z += "    <%if viewTemplateName = \"htmlblock\" then%>\xFE";
    z += "        Dim htmlBackDrop As String\xFE";
    z += "       Read htmlBackDrop From @fHandle(\"DICT\", \"<%=ProjectName%>\"), \"<%=viewName%>.htm\" Else htmlBackDrop = \"<%=viewModel.html%>\"\xFE";
    z += "       viewVars.htmlBackDrop = Replace( htmlBackDrop, AM(), CRLF())\xFE";
    z += "    <%end if%>\xFE";
    z += "End Subroutine\xFE";
    z += ""
    window.cached_jsb_viewtemplates["_setup"] = z;
    var z = "<% \xFE";
    z += "    Style = \"\"\xFE";
    z += "    if viewModel.forecolor Then Style = Style:\"color:\":viewModel.forecolor:\"; \"\xFE";
    z += "    if viewModel.backcolor Then Style = Style:\"background-color:\":viewModel.backcolor:\"; \"\xFE";
    z += "    if viewModel.font Then Style = Style:\"font-family:\":viewModel.font:\"; \"\xFE";
    z += "    if viewModel.fontsize Then Style = Style:\"font-size:\":viewModel.fontsize:\"; \"\xFE";
    z += "    if viewModel.boxed = \"solid\" or viewModel.boxed = \"dashed\" Then \xFE";
    z += "        Style = Style:\"border-style:\":viewModel.boxed:\"; border-width:1px;\"\xFE";
    z += "    elseif viewModel.boxed = \"double\" Then \xFE";
    z += "        Style = Style:\"border-style:double; border-width:3px;\"\xFE";
    z += "    elseif viewModel.boxed <> \"none\" And viewModel.boxed <> \"\" then\xFE";
    z += "        Style = Style:\"border-style:\":viewModel.boxed:\"; border-width:4px;\"\xFE";
    z += "    End If\xFE";
    z += "    If Style Then Style = ' style=\"':style:'\"'\xFE";
    z += "%>"
    window.cached_jsb_viewtemplates["_style"] = z;
    var z = "function view_<%=niceViewName%>_writeRow(ByVal Row As JSON, ByRef pkID As String, ByRef rtnErrors As String) As Boolean\xFE";
    z += "    <% \xFE";
    z += "        modelColumns = @jsb_mdl.DropGridColumns(viewModel.columns)\xFE";
    z += "        IsAutoInteger = false\xFE";
    z += "        pkCName = \"\"\xFE";
    z += "        \xFE";
    z += "        For Each Column in viewModel.columns\xFE";
    z += "            cName = Column.name\xFE";
    z += "            if Column.name And Column.primarykey Then\xFE";
    z += "                pkCName = Column.name\xFE";
    z += "                If Column.datatype = \"autointeger\" Then IsAutoInteger = true\xFE";
    z += "                break\xFE";
    z += "            end if\xFE";
    z += "        next\xFE";
    z += "    %>\xFE";
    z += "    * Verify anything in Row you want here with custom code - return False and rtnErrors\xFE";
    z += "    Dim newRecord As Boolean = !pkID\xFE";
    z += "    Dim fTable As Table\xFE";
    z += "    if !@jsb_bf.OpenTable(\"<%=viewModel.tableName%>\", \"<%=viewName%>\", fTable, rtnErrors) Then Return False\xFE";
    z += "    \xFE";
    z += "    <%\xFE";
    z += "    For Each Column in modelColumns\xFE";
    z += "        cName = Column.name\xFE";
    z += "        if cName Then\xFE";
    z += "            If Column.nounload Then\xFE";
    z += "               %> \xFE";
    z += "               Remove Row, \"<%=cName%>\" ;* don't save this column\xFE";
    z += "               <%\xFE";
    z += "            end if\xFE";
    z += "        end if\xFE";
    z += "    Next%>\xFE";
    z += "    * If this is a new record get a default primary key value (or set one here in code)\xFE";
    z += "    if newRecord Then\xFE";
    z += "    <% \xFE";
    z += "        if IsAutoInteger Then\xFE";
    z += "            %>\xFE";
    z += "                pkID = -1 ;* Auto Integer will be defined after write\xFE";
    z += "                Row[\"<%=pkCName%>\"] = -1\xFE";
    z += "            <%\xFE";
    z += "        Else\xFE";
    z += "            %>\xFE";
    z += "                if HasTag(Row, \"<%=pkCName%>\") then pkID = Row[\"<%=pkCName%>\"] Else rtnErrors = \"No default set for new row's primary key <%=pkCName%>\"; Return False\xFE";
    z += "            <%\xFE";
    z += "        End If\xFE";
    z += "        %>\xFE";
    z += "        WriteJson Row On fTable, pkID Else Goto ErrWrite\xFE";
    z += "\xFE";
    z += "    Else\xFE";
    z += "        if hasTag(Row, \"isA_CrlF_TextFile\") Then\xFE";
    z += "            Dim sUpdatedRow As String = \"\"\xFE";
    z += "            Read sUpdatedRow From fTable, pkID Else sUpdatedRow = \"\"\xFE";
    z += "            <%\xFE";
    z += "                For Each Column, CI In modelColumns\xFE";
    z += "                    If LCase(left(Column.name, 2)) = \"*a\" and !Column.nounload Then\xFE";
    z += "                    %> sUpdatedRow<<%=Val(mid(Column.name, 3))%>> = Row[\"<%=Column.name%>\"]\xFE";
    z += "                    <%\xFE";
    z += "                    End If\xFE";
    z += "                Next\xFE";
    z += "            %>\xFE";
    z += "            Write sUpdatedRow On fTable, pkID Else Goto ErrWrite\xFE";
    z += "\xFE";
    z += "        Else\xFE";
    z += "            Dim updatedRow As JSON, tag As String\xFE";
    z += "            ReadJSon updatedRow From fTable, pkID Else updatedRow = {}\xFE";
    z += "            for each tag in Row\xFE";
    z += "                If LCase(Tag) <> \"ItemID\" Then updatedRow[tag] = Row[tag]\xFE";
    z += "            next\xFE";
    z += "            WriteJson updatedRow On fTable, pkID Else Goto ErrWrite\xFE";
    z += "        End If\xFE";
    z += "    End If\xFE";
    z += "\xFE";
    z += "    <%if IsAutoInteger Then%>\xFE";
    z += "        if newRecord Then\xFE";
    z += "            pkID = nextPrimaryKey(\"<%=viewModel.tableName%>\", \"<%=pkCName%>\")\xFE";
    z += "            Row[\"<%=pkCName%>\"] = pkID\xFE";
    z += "        End If\xFE";
    z += "    <% End If\xFE";
    z += "\xFE";
    z += "    For Each Column in modelColumns\xFE";
    z += "        cName = Column.name\xFE";
    z += "        if cName Then\xFE";
    z += "            If Column.savenewvalues Or LCase(Column.control) = \"smartcombobox\" Then\xFE";
    z += "               If !Column.reffile Then Column.reffile = \"autoref_\":cName:\"s\"\xFE";
    z += "               %> \xFE";
    z += "               * Save new values for smartcombobox <%=cName%>\xFE";
    z += "               saveNewRefValue(\"<%=Column.reffile%>\", \"<%=Column.refpk%>\", \"<%=Column.refdisplay%>\", Row[\"<%=cName%>\"])\xFE";
    z += "               <%\xFE";
    z += "            end if\xFE";
    z += "        end if\xFE";
    z += "    Next %>\xFE";
    z += "    * Alert(\"Record Saved\", False)\xFE";
    z += "    Return True\xFE";
    z += "    \xFE";
    z += "ErrWrite:\xFE";
    z += "    If newRecord Then pkID = \"\" ;* Restore To New Record\xFE";
    z += "    rtnErrors = @Errors\xFE";
    z += "    LogErr(rtnErrors)\xFE";
    z += "    Return False\xFE";
    z += "end function\xFE";
    z += ""
    window.cached_jsb_viewtemplates["_writerow"] = z;
}
anonymousFunc()
anonymousFunc = null